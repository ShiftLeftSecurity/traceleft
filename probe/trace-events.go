// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9c\x69\x6c\x5c\x57\x15\xc7\xef\xd8\xb1\x3d\xce\xea\xac\x75\x76\xa7\x89\x63\x3b\x8e\xb7\xd8\x8e\x6d\x92\x34\x76\xb6\xba\xc5\x24\x26\x29\x30\x40\xca\x78\x32\x7e\xae\xdd\x78\x19\xcd\x0c\x89\x0d\xa9\x30\x9b\x88\x10\x4b\x40\x2d\xb2\x84\x54\x55\x02\x55\x11\x6a\xa0\xa5\x12\xb5\xa0\x92\xf3\x81\x25\x44\xa8\x8a\x2a\xa4\x5a\x48\x40\xd4\x46\x10\x95\x2f\x11\x02\x6a\x55\x28\x46\xf7\xce\x9b\xcc\xf3\x39\xff\x33\xbe\x1f\x10\x20\x71\xaf\xe4\xa4\xe7\xff\xbf\xe7\xfe\xe6\x9d\x77\x97\x37\x33\x6e\x3e\x77\xbc\xe7\x44\x41\x28\xa4\xb2\x2d\xa4\xde\x53\xb9\x28\xd7\xba\x4f\xe5\xfe\xbb\xd3\xff\x73\x48\x85\xd4\xcc\x86\x8c\xf6\x65\xa5\xd4\x4a\xa5\xd4\x45\xa5\x54\x85\x52\x6a\x26\x96\xd1\xcb\x0b\x16\x8e\x33\x53\x98\xeb\xbf\x3c\x4f\xbf\xd7\x48\xbf\xd7\x7c\xfd\xb9\xec\x38\x8e\xeb\xb8\x8e\xeb\xb8\x8e\xeb\xb8\x8e\xeb\xb8\x8e\xeb\xb8\x8e\xeb\xb8\x8e\xeb\xb8\xff\x41\xee\x92\xc0\x4f\xe6\x0f\xa5\xf4\x10\xe9\x64\x2c\xee\x0d\x7b\x03\x69\xf5\xff\xd9\x0a\x83\x75\x99\xfc\x6f\xbf\x9a\xff\x9d\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\xb9\xba\xe0\xe6\xea\x82\x9b\xab\x0b\x6e\xae\x2e\xb8\x3d\xda\xdb\xa3\xee\xcf\xcf\xcf\x97\xf9\x71\xe8\x33\xa7\x55\xf8\xd2\xb2\xd0\x66\xa5\x94\xd6\xca\x7d\x7d\xdc\xff\x5b\x6b\x7b\x81\xd6\x09\xb4\x27\x80\x36\x08\xb4\x4b\x40\xbb\x02\xb4\xef\x03\x6d\x1a\x68\xbf\x01\xda\x6d\xa0\xfd\x0d\x68\xe1\x10\xd7\xb6\x00\xad\x11\x68\xc7\x80\x16\x01\xda\x30\xd0\x26\x81\xf6\x2c\xd0\xae\x02\xed\x75\xa0\xdd\x02\xda\x1d\xa0\xcd\x01\x6d\x79\x01\xd7\x2a\x80\xd6\x02\xb4\x6e\xa0\x9d\x05\x5a\x82\x68\xeb\x94\x52\x5f\x22\xda\x62\xad\x50\x15\x0a\x7a\x91\xa0\x97\x08\x7a\xa9\xa0\x2f\x13\xf4\x15\x82\xbe\x4a\xd0\x57\x0b\xfa\x5a\x41\x5f\x2f\xe8\x0f\x09\xfa\x46\x41\xdf\x2c\xe8\x5b\x05\x7d\xbb\xa0\xef\x10\xf4\x9d\x82\x5e\x29\xe8\x55\x82\x5e\x23\xe8\xb5\x82\x5e\x27\xe8\x0d\x82\xde\x24\xe8\xcd\x82\xde\x2a\xe8\x6d\x82\xde\x21\xe8\x07\x04\xfd\x90\xa0\x1f\x16\xf4\x2e\xa6\xfd\x2c\xac\xd7\x51\x3f\xd3\xdf\x2a\xd6\xba\xc7\xf4\xcf\x9b\x75\x77\x94\xe9\xdf\x2d\xd2\x7a\x84\xe9\x07\x0b\xb4\xfe\x71\xa6\xff\x79\x89\xd6\x3f\xc1\x74\xbd\xa7\x95\xa9\x4f\x32\xfd\x69\x33\xfe\x09\x7e\x4d\x66\xfc\x47\x99\xfe\x05\xd3\xff\x09\xa6\x6f\x37\xfd\x3f\xc2\x5f\xbf\x79\x3d\x1f\x65\xfa\x3a\xf3\x7a\x3e\xc6\xf4\x37\x4c\xff\x5e\xa6\x9f\x32\xfd\x3f\xcc\xf4\x49\xd3\xff\x34\xd3\xff\x6e\xea\x79\x86\xe9\x3b\x4d\xff\x4f\x31\xfd\x6b\xa6\x7f\x94\xe9\x3f\x31\xfd\x7b\x98\xde\x6c\x5e\xcf\x87\x98\x3e\x60\xfa\x9f\x64\xfa\x5b\x66\xfc\x53\x4c\x9f\x37\xfd\x8f\x31\xfd\xb2\x19\xff\x38\xd3\x5f\x35\xf5\xef\x66\x7a\xc4\xd4\xff\x31\xa6\x9f\x34\xfd\xcf\x31\xfd\x1d\x33\x7e\x9c\xe9\xf5\xa6\x7f\x1f\xd3\x67\x4c\xff\x18\xd3\x8f\x9b\xd7\x7f\x96\xe9\x3f\x36\xd7\xfb\x24\xd3\x37\x98\xf1\x1f\x67\xfa\xf7\xcc\xf8\x1f\x64\x7a\x77\xa9\xd6\xf9\xbe\xd4\x6f\xd6\x11\xdf\x3f\x27\xcc\xba\xe3\xfb\xfc\x5f\x8c\xce\xf7\xab\x5f\x15\x6a\x9d\xef\x4b\xdb\xcd\xf8\x7c\xbf\x8d\x99\xfe\x7c\x5f\xad\x31\xd7\xcb\xf7\x9f\xdf\x9b\xeb\xe5\xe7\xc8\x7d\x73\xbf\xf8\x79\xf1\x9e\xe1\xf2\x73\x6d\xb3\x79\xfd\x7c\xff\xb9\x56\xa2\x75\xbe\x8f\x7d\xd3\x8c\xcf\xf7\xcf\xe7\x4d\x3d\xf9\xb9\xbc\xdf\x8c\xc3\xcf\xdf\x46\xd3\x9f\xef\xff\x33\xe6\x75\xf2\x73\x2a\x66\x5e\x27\x3f\x4f\xdf\x34\x3a\x3f\x17\x5e\x32\xf5\xe4\xfb\xff\x09\xa3\xf3\x73\xea\x45\xc3\xe5\xe7\x5d\x89\xa9\x3f\xdf\xe7\x7f\x61\xea\xcf\xcf\xeb\x3b\xa6\x3e\xfc\x5c\xbe\x6d\xc6\xe7\xcf\x0f\xf3\xa6\x3e\x7c\x9f\xff\xba\xd1\xf9\x79\x31\x6a\xc6\xe7\xe7\x54\xb7\xe9\xcf\x9f\x67\xbe\x6a\xea\xcc\x9f\x8b\x2a\xfc\xbf\xf5\x63\xe0\x07\x74\x3e\x89\x83\xfe\x01\xe2\x1f\x20\xfe\x11\xe2\x1f\x21\xfe\x51\xe2\x1f\x25\x7e\x3b\xf1\xdb\x89\xdf\x41\xfc\x0e\xe2\x57\x13\xbf\x9a\xf8\x35\xc4\xaf\x21\x7e\x0b\xf1\x5b\x88\xdf\x4a\xfc\x56\xe2\xef\x27\xfe\x7e\xe2\xb7\x11\xbf\x8d\xf8\xbb\x89\xbf\x9b\xf8\x55\xc4\xaf\x22\x7e\x3d\xf1\xeb\x89\xdf\x40\xfc\x06\xe2\x37\x12\xbf\x91\xf8\x4d\xc4\x6f\x22\xfe\x2e\xe2\xef\x22\x7e\x25\xf1\x2b\x89\xbf\x87\xf8\x7b\x88\x5f\x4b\xfc\x5a\xe2\xef\x25\xfe\x5e\xe2\xd7\x11\xbf\x8e\xf8\x9d\xc4\xef\x24\x7e\x17\xf1\xbb\x88\xbf\x8f\xf8\xfb\x88\xdf\x4c\xfc\x66\xe2\x3f\x42\xfc\x47\x88\x7f\x98\xf8\x87\x89\x7f\x90\xf8\x07\x89\x7f\x88\xf8\x3a\xde\xe2\xc7\x4b\x03\xf7\x3c\x1b\xeb\xb7\x63\xc7\x02\xb1\xde\xd5\x23\x81\x78\x89\x7e\xee\x0b\xc4\x45\x81\x8f\x56\x74\x5c\xac\xdf\xc3\x06\x62\xbd\x87\x5e\x0d\xc4\x61\xfd\xde\x35\x10\xeb\x5d\xeb\x56\x20\xd6\x3f\x77\x02\xb1\x3e\xb5\xe6\x02\xf1\x72\xfd\x13\xca\xc5\x7a\x57\xad\x08\xc4\x2b\xf5\x1a\x0e\xc4\xfa\xd4\xee\x0e\xc4\xe6\xbd\x69\x20\xd6\xa7\x4a\x22\x10\xaf\xd1\xef\x49\x03\xb1\x3e\x65\xa7\x02\xb1\x7e\xcf\xfa\x52\x20\xd6\xa7\xc0\xf5\x40\xbc\x41\x29\xf5\xdb\x40\xac\x4f\xe3\xbb\x81\xb8\x5c\x29\xf5\xcf\x40\xac\x4f\x8b\xb2\x82\x5c\xbc\x49\xaf\xa1\x40\xac\x9f\x46\xda\x03\xb1\xbe\x77\x3d\x81\x58\x9f\x96\x7d\x81\x78\x9b\x52\x2a\x1d\x88\xf5\xd3\xc6\xe5\x40\x6c\xe6\x46\x7d\xda\x1b\x4f\xab\xf3\x49\x2f\x9d\x48\x8e\x9d\xf3\xa2\xd1\xc1\xd8\x68\xff\xb0\x17\x1d\x1a\xf5\xd2\xd1\x78\xea\x7c\x34\x16\x8f\x7b\x89\xb4\x3a\x9f\xdf\xae\x4f\x7a\xc3\x0f\x06\x69\x80\x2e\xb6\xbc\x0b\xde\x68\x5a\x8d\xc4\x12\xa9\x06\x3c\x74\x34\x91\x1c\x7b\x2a\x15\x4d\x7a\x0b\x7b\xa5\xe3\x89\xe8\x85\x96\x68\x7c\x6c\x74\xd4\x8b\x4b\x9d\x46\xce\xf7\x0f\x25\x63\x92\x3b\x10\x1f\x1c\xbb\x38\x9a\xcf\x1e\x19\xeb\x17\x6d\x33\x76\xde\x91\x05\x33\x9f\x37\x96\xf0\x24\xeb\x62\x72\x28\xed\xe5\x29\x46\xca\x4b\x47\x53\xe9\x58\xde\x3e\xf1\xe1\xb1\x94\xe4\xe7\xf3\x32\xa5\x10\xaf\x47\xf6\x92\x5e\x2c\x68\xf1\x69\xb6\xf0\x36\xd2\x59\x46\xdc\x85\x93\x0c\x99\xd0\xe1\x54\x7f\x5e\x50\x5c\x56\x5e\xc8\x39\x33\x71\x66\xa1\xc3\x65\x4e\xc8\xce\x2d\x8a\x78\xa0\x73\xc6\x42\x0b\xe8\x90\x62\xa6\x28\xa0\x64\x74\x48\x09\x58\x40\x37\xb7\xcf\xac\xca\xd4\xe2\xcb\x72\xd1\x25\x29\x2f\xc7\x3c\x4b\x31\xcf\x32\x94\x96\xa0\xb8\xfc\xa4\xa5\x27\x2c\x3b\x69\xc9\x2d\xb6\xdc\xf2\x2d\x35\x69\x99\x89\x4b\x4c\x5a\x5e\xc2\xd2\x92\x26\x38\x9c\xde\xd2\xe4\x86\x53\x1b\xcf\x5e\x71\xee\xe2\x99\x4b\x07\x91\xc6\x80\x43\xf8\x23\xa0\x99\x7f\x71\x0c\x19\x19\x3d\x7a\xc1\x4b\xa6\x86\x60\x07\x7d\xaf\xe9\x4b\x32\x1a\x7f\x45\x39\x99\x68\xd9\xf4\xd4\x44\x2a\x33\x49\x00\x27\xa3\xf3\x41\x03\x3a\x15\xf1\xf6\xf8\x60\xa6\xa1\xdd\x31\x67\xf2\xcd\x91\x78\xc8\xc0\x44\x33\x47\x11\x2d\x63\x70\x52\x40\xa7\x22\xb8\x43\x68\x74\x34\xb2\xb9\xff\x74\xe4\x9c\x18\x1d\x1e\x8a\x7b\xa3\xbe\x5b\xef\x0d\x46\x07\x92\xb1\x11\x04\xcc\x2c\x2d\xbc\x47\x8a\x3b\x24\xde\x1f\xe1\x84\x03\x83\x4b\x63\xc3\xa1\xd9\xc8\x7a\x5a\xe9\xe5\xbd\x60\x9e\x19\x81\x8f\x98\x93\xa9\x96\x4a\x27\xd3\xb1\x73\xaa\x3e\x35\x31\xa2\xff\xfe\xf7\xb4\xdf\x95\x2a\xf8\xad\x4b\xc4\xff\x28\xf1\x5d\xf2\xd1\x03\xfd\x37\xfa\x42\xfe\x4f\x31\xd1\x3b\x05\xde\x12\x12\xdf\x2c\xcd\x9f\x4f\xbf\x3b\x0a\x93\xf8\x97\xa5\x0a\x7e\xdb\x13\xf1\x3f\xfa\xca\xbe\x5f\x1a\xf4\xdf\xef\x64\xf3\xb3\xdf\x8f\xbe\x2a\xf0\xe9\xf7\x90\x12\xff\x47\x02\x7f\x1c\xf0\x8b\x00\xff\x52\x09\xe6\xd3\xef\x23\x25\xfe\x78\x09\xe6\x4f\x01\x7e\x09\xe0\xf7\x0b\x7c\xfa\xbd\xa4\xc4\xef\x13\xf8\xd3\x80\x5f\x0a\xf8\xbb\x05\x3e\xfd\x7e\x52\xe2\x3f\x2c\xf0\x67\x01\x7f\x19\xe0\xaf\x12\xf8\x53\x96\xfc\x65\x02\x7f\x0e\xf0\x57\x00\xfe\x0f\xc2\x98\x5f\x56\x68\xc7\x7f\x31\x8c\xf9\xe5\x9d\x9c\xbf\x0a\xf0\xbf\x2d\xf0\x2f\x5b\xf2\xbf\x21\xf0\xdb\x01\x7f\x35\xe0\xaf\x2c\xc6\xfc\xec\x46\xb1\x18\x7f\x69\xb1\xb0\xfe\x01\x7f\x2d\xe0\xff\xa3\x08\xf3\xc7\x2d\xf9\x7f\x2d\x12\xd6\x3f\xe0\xaf\x07\xfc\xe6\x42\xcc\xbf\x67\xc9\x6f\x28\x14\xd6\x3f\xe0\x3f\x04\xf8\x1b\x05\xfe\x60\x91\x1d\x7f\xbd\xc0\x9f\x06\xfc\x8d\x80\xff\x9c\x70\xff\x6f\x5b\xf2\xbf\x25\xdc\xff\x59\xc0\xdf\x0c\xf8\xcf\x08\xfc\x48\xb1\x1d\x7f\x42\xe0\xcf\x01\xfe\x56\xc0\x3f\x2d\xf0\x6f\x59\xf2\x4f\x0a\xfc\xf2\x2e\xce\xdf\x0e\xf8\x1d\x02\xbf\xbb\xc4\x8e\xdf\x2a\xf0\xdb\x01\x7f\x07\xe0\x4f\x09\xf3\xef\xba\x25\xff\x59\x61\xfe\x45\x00\x7f\x27\xba\xff\x02\xbf\x3d\x6c\xc7\x9f\x10\xf8\xe3\x80\x5f\x09\xf8\x13\xc2\xf3\xc7\xcb\x96\xfc\x4f\x0b\xcf\x1f\x53\x80\x5f\x05\xf8\x31\x81\x5f\x5d\x6a\xc7\x7f\x52\xe0\x4f\x03\x7e\x0d\xe0\x6f\x13\xf8\x2f\x58\xf2\x37\x09\xfc\x59\xc0\xaf\x05\xfc\x22\x81\x5f\xbe\xd4\x8e\x1f\x12\xf8\x73\x80\x5f\x07\xf8\xf7\x85\xf9\x77\xc5\x92\xff\xbe\x30\xff\xca\x8f\x70\x7e\x03\xe0\xbf\x23\xf0\xc3\xcb\xec\xf8\x7f\x14\xf8\xed\x80\xdf\x04\xf8\x6f\x14\x60\xfe\xa4\x25\xff\x66\x81\xb0\xfe\x01\xbf\x19\xf0\x5f\x11\xf8\x73\x96\xfc\x6b\x02\x7f\x1c\xf0\x5b\x01\xff\x69\xe1\xfd\x53\x62\xb9\x1d\x7f\x40\x09\xeb\x1f\xf0\xdb\x00\xbf\x47\xe0\xdf\xb5\xe4\x77\x0b\xfc\x69\xc0\xef\x00\xfc\x77\x85\xe7\xef\xbe\x15\x76\xfc\x3f\x49\xcf\xff\x80\x7f\x00\xcd\x3f\x81\x3f\x6b\xc9\xbf\x29\x3d\xff\x03\xfe\x21\xc0\xef\x15\x9e\xbf\x7b\x57\xda\xf1\x7b\xa4\xe7\xff\xa3\x9c\x7f\x18\xf0\xdb\x05\xfe\x0d\x4b\x7e\x8b\xf4\xfc\x0f\xf8\x5d\x80\xbf\x66\x49\x86\x4f\x3f\x83\xe8\xf4\x7f\x25\xa7\x9c\x7c\xe0\x40\x3f\x3f\x78\x5f\xc8\x8f\x94\xd9\xe5\x7f\x31\x84\xf3\x13\xab\xed\xf2\xbd\x22\x9c\x7f\x79\x8d\x5d\xfe\x7d\x81\xff\xc2\x5a\xbb\xfc\x1f\x0a\xfc\xe9\x75\x76\xf9\x67\x0a\x70\xfe\xad\xf5\x76\xf9\xab\x05\xfe\xdd\x0d\x76\xf9\xcf\x0b\xd7\x9f\xfd\x45\xf5\xc5\xf2\x5f\x11\xee\x7f\xf9\x46\xbb\xfc\x7a\x81\xdf\xb8\xc9\x2e\x3f\x26\xf0\xbb\x37\xdb\xe5\xbf\xa9\x70\x7e\xdf\x16\xbb\xfc\x5f\x0b\xfc\xf1\xad\x76\xf9\x8f\x0b\xd7\x7f\x65\x9b\x5d\xfe\x67\x05\xfe\xd5\xed\x76\xf9\xf7\x84\xeb\xbf\x5e\x61\x97\xff\x8c\x30\xff\x66\x77\xd8\xe5\x6f\x12\xe6\xff\xbd\x87\xed\xf2\xbf\x23\x5c\x7f\x78\x97\x5d\xfe\x2a\xa1\xfe\x15\x95\x96\x7c\xe1\xfa\xdb\x77\xdb\xe5\xb7\x09\xd7\xdf\x5b\x65\x97\xff\xb6\x70\xfd\x83\xd5\x76\xf9\x4f\x09\xd7\x3f\x59\x63\x97\xdf\x29\xf0\xa7\xf6\xd8\xe5\x5f\x13\xe6\xdf\xcb\xb5\x76\xf9\xdb\x04\xfe\x8d\xbd\x76\xf9\x5f\x11\xf8\xb7\xeb\xec\xf2\x6b\x84\xfb\x3f\x57\x6f\x97\xff\x53\xa1\xfe\x65\x8d\x76\xf9\x8f\x09\xfc\xea\x26\xbb\xfc\x3f\x08\xfc\xce\x7d\x76\xf9\xaf\x87\x85\xf3\xbf\x19\xf7\xa7\xdf\x5f\xcc\x16\xe3\xfc\xb3\x42\x3e\x8d\x6f\xf8\x7c\xf2\xcf\x37\xab\x3e\x3f\x7f\x8a\x18\xf4\xf9\xe9\xe7\xc2\xf3\x53\x24\xfb\xab\xfd\x7e\xfe\xa0\xff\xac\x4f\x9f\x9f\xde\x2e\xe5\x6c\xdd\xe6\xfc\x5f\x25\xed\xf3\x07\x0f\x91\xcf\x5f\xb2\xff\x1f\xd8\xbf\x02\x00\x00\xff\xff\xd2\x60\x84\xd6\x88\x69\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 27016, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

