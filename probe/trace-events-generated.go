// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x7b\x6c\xdc\xc5\xb5\xc7\x67\xed\x38\x5e\xaf\x13\xe2\xbc\x9d\x17\x49\x08\x21\xce\x03\xdb\x6b\x3b\x2f\xf2\x26\x2f\xe7\x12\xc0\xe4\xe9\x3c\x37\x9b\xf5\x3a\x76\xbc\x5e\xef\xdd\x5d\x62\x87\x20\x11\xb8\xc0\xb5\x80\x7b\xc5\x05\xee\xbd\x6e\x95\x3f\xf2\x40\x60\xa9\xfc\x91\x4a\xa0\x58\x08\xe4\xd0\x56\xad\xab\x82\x48\x55\xd4\xba\x2d\x82\xb4\x20\x6a\xa9\x2d\x4a\x2b\x0a\x56\x15\xb2\xd5\x9c\xdf\xac\xf7\xe7\x39\xe7\xec\x6f\x54\x55\x2a\x52\x67\xa4\x64\x72\x3e\x73\xce\x7c\xe7\x77\x76\x7e\x33\xe3\xdd\x9f\x37\x8f\x6d\xdd\xb9\xad\xc0\xe7\x13\xd9\xe2\x13\x5f\x89\x9c\x95\x2b\xc3\xb1\xdc\xbf\x37\xaa\xbf\xbb\x84\x4f\xf4\x4f\x73\xd8\x53\x42\x88\xdb\x84\x10\x67\x02\xc3\x19\x69\x77\x0a\x21\xe6\x09\x21\x22\x81\x2f\xc0\x3e\x1d\x6e\x01\xbf\xd3\xc7\x13\x50\x9f\x59\x72\x1d\xf8\x99\x99\x43\x50\xf7\x5f\x74\xfa\x29\x2e\x10\xe2\x8b\x4c\x26\x53\xae\x0d\xe2\x29\x18\x9b\x10\x53\x45\x00\xec\xb0\x6a\x9f\xea\xf3\x0b\x3d\x7e\x38\x93\xc9\xf4\x5f\x52\x76\xa1\x10\xd7\x89\xfe\xae\x8c\xc9\xf5\x5b\x20\x6d\xc5\xff\x57\xd5\xdc\x75\x49\x5b\x2a\xf6\x17\x0b\x52\x97\x1b\x77\x7f\x89\x1a\x6f\xc9\x2e\x27\xae\x57\xc5\xf9\xe9\xb8\xfe\x27\x72\xf1\x85\xd2\xbe\xa0\xfc\x7d\x42\x0c\x65\x32\x99\x2b\x05\x42\x94\x49\xfe\x62\xce\x4f\x5e\xd2\xe9\x4b\x37\x9c\x7c\xba\xfc\x6f\xdc\x72\xfc\x87\x5d\x7e\x57\xd4\x78\xce\x7c\xfb\xfa\x2d\x78\x5d\x2e\x95\x65\xb2\xf9\xda\xa8\xeb\xa9\x78\xff\x28\x9d\x9c\x7f\x85\xe6\x7f\x9d\xf4\x77\x74\xa4\x7f\x99\xe6\xff\xa1\xf2\x1f\xe3\xf2\xcf\x97\x0f\xc8\xa7\x3f\x67\x17\xc1\xeb\xd3\x00\xfd\x5f\xc9\xce\x0b\xbf\xf3\x8f\xd3\x8f\xab\xeb\x9c\xd9\x08\xed\xe1\x0b\x37\xd5\xbc\x3b\x76\xcb\xb9\xfe\x96\x91\xb8\x58\x4c\xf2\x2e\xb0\xa5\x7e\x73\x53\xa8\x55\xfe\x3b\x9e\x4a\x87\xcf\xcc\x4c\x28\xff\x5e\x55\x9f\x57\x75\x8f\xaa\x9f\x57\x75\xb7\xaa\xcf\xaa\xfa\xb2\x93\xdf\x0b\x43\x4a\xb7\x2f\x6b\x3b\xed\x33\xaf\xaa\x71\x7d\x08\x75\xff\x24\x67\xbc\x9d\x05\x42\x4c\x81\xfb\x64\x00\xf8\x7e\x9f\x10\x99\xcc\x04\x71\x66\xe6\x35\xb0\x4f\x14\x3b\xf7\x57\xa7\xaa\xfb\x5f\x56\xf9\x1c\x23\x44\xc3\xad\x4c\xa6\x3f\xec\xd8\xe5\x05\x5a\x1e\x53\x4e\x7d\xa5\x48\x88\x6e\x95\xbf\x19\x06\xf3\x3f\x77\x3f\xdf\x44\xf7\xeb\xcd\x3c\xf3\x7e\x6f\xf6\x7e\xbd\xa4\xe2\x98\x71\x49\xff\x71\x79\xda\xaf\x14\x8e\xf6\xb3\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xb5\xe3\xfd\x26\x8e\x77\x8c\xeb\x8f\x50\x9f\x45\xc9\x2e\xd2\xc9\x70\x24\x1a\x8b\x36\xa7\xc5\xbf\x66\xf1\xa9\x74\xc0\xc7\x3b\x67\x1d\x66\xf3\x92\xcb\x8b\x6f\xe4\xf3\x57\x5b\x84\xfa\x6c\x74\xe4\x3e\x3a\xfb\xcf\x1e\xcd\x37\xa7\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9f\xfd\x1c\x96\x2c\x3e\xf5\x19\x6c\x99\xc8\xe5\xc5\x16\xe7\x77\x02\xe3\xa9\x74\x38\x16\xfb\xfb\xe2\xed\x7d\x48\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\x6c\x6f\xd8\x29\x6e\x65\x32\x99\x32\x65\xfb\x1e\xd9\x25\xfc\x8f\x96\xfa\x66\xa9\x9f\x2d\xca\x15\x1f\x54\xb5\x64\xcb\xb2\xc1\x85\x39\x96\x7d\xe6\xf1\xb2\xcb\x6f\x0f\xc1\x5a\x08\xf6\x28\xc1\x9e\x27\xd8\xcb\x04\xeb\x23\xd8\xbb\x04\xbb\x4e\xb0\x2f\x08\xa6\xbe\x96\x64\x14\x9b\x4d\xb0\x6a\x82\x6d\x21\x58\x23\xc1\x62\x04\x3b\x4b\xb0\x97\x08\xd6\x4b\xb0\xb7\x08\x76\x8d\x60\x9f\x12\x6c\x98\x60\xe3\x0a\x30\x9b\x47\xb0\x3a\x82\xd5\x13\xec\x30\xc1\x12\x04\x7b\x92\x60\x3d\x04\x7b\x8d\x60\x57\x35\x36\x45\x08\xf1\x81\xc6\xf2\x95\x58\xa9\x80\x09\x3d\xa0\xf1\xd4\x38\xf9\xf7\x74\x71\x5e\xe3\x87\x80\xcf\x40\x7c\x33\xf0\x59\x88\xdf\x09\x7c\x0e\xe2\x45\xc0\xe7\x22\xfe\x19\x8c\x67\x3e\xe2\x3f\x02\xbe\x00\xf1\xcb\xc0\x17\x22\xfe\x2d\xe0\x8b\x10\x7f\x02\xf8\x62\xc4\xa3\xc0\x8b\x46\xe6\x4f\xb6\x1c\x55\xfc\x86\xf6\x1c\x7d\x1b\x8c\x7f\x29\xea\x67\x37\xf0\xbb\x11\x5f\x03\xbc\x0a\xf1\xd9\xc0\x83\x88\x7f\x0d\xba\xb5\x88\x7f\x04\x7c\x39\xe2\xfd\xc0\x57\x22\xde\x0b\x7c\x35\xe2\xff\x03\x7c\x0d\xe2\x8f\x00\x5f\x87\xf8\x32\x18\x67\x31\xe2\x11\xe0\x1b\x10\xbf\x0f\xf8\x26\xc4\x6b\x81\x6f\x46\x7c\x0a\xf0\xad\x88\xff\x05\xc6\xb3\x1d\xf1\x9f\x03\xdf\x81\xf8\x78\xe8\xa7\x04\xf1\xcf\xc1\xbf\x14\xf1\xf7\x81\x8f\x47\xbc\x0f\xf8\x04\xc4\x2f\x00\x9f\x88\xf8\x33\xc0\x27\x23\x9e\x02\x3e\x15\x71\x01\x77\x5d\x21\x41\x25\x2f\x62\x78\x31\xc3\x4b\x18\x5e\xca\xf0\xf1\x0c\x9f\xc0\xf0\x89\x0c\x9f\xcc\xf0\xa9\x0c\x9f\xce\xf0\x19\x0c\x9f\xc5\xf0\x39\x0c\x9f\xcb\xf0\xf9\x0c\x5f\xc0\xf0\x85\x0c\x5f\xc4\xf0\xc5\x0c\x5f\xca\xf0\xbb\x19\x5e\xc5\xf0\x20\xc3\x6b\x19\xbe\x9c\xe1\x2b\x19\xbe\x9a\xe1\x6b\x18\xbe\x8e\xe1\x1b\x18\xbe\x89\xe1\x9b\x19\xbe\x95\xe1\xdb\x19\xbe\x03\xb1\x09\x01\xb9\x3f\xa6\x10\x7f\xbd\x58\x72\xfc\xee\x79\xff\x18\xc9\xef\x43\xfc\x05\xf8\x3e\xbb\x13\x88\x27\xfc\x92\x37\x23\xde\x34\x56\xf2\xe3\x88\x1f\x82\x7e\x22\x88\x5f\x2e\x92\xbc\x09\xf1\x67\x7d\x92\x47\x11\xaf\x85\xfe\x1b\x10\xbf\x03\xfa\x7f\x08\xf1\xfb\xc0\xff\x28\xe2\xeb\xc1\x3f\x84\xc7\x0f\xe3\x39\x86\x75\x61\x3c\x61\xc4\xff\x1f\xfc\x0f\x22\x1e\x07\xff\x43\x88\xef\x00\xff\xc3\x88\x4f\x01\xff\x23\x88\xff\x04\x5e\x97\x76\xc4\x9f\x86\xf3\x4f\x1c\xf1\xc7\xa0\xff\x7d\x88\xef\x82\xfe\xf7\x23\x5e\x05\xfe\x8d\x88\x7f\x09\xfd\x1f\x40\x7c\x00\xfc\x1f\x40\xfc\x55\xe8\xff\x41\xc4\x1f\x85\xfc\xef\x42\xbc\x13\xf2\xbf\x1b\xf1\xe9\xe0\xff\xef\x88\x17\x80\x7f\x12\xf1\xaf\x60\x3c\x1d\x88\x7f\x04\xe3\x49\x20\x7e\x1b\xf8\xb7\x22\xfe\x53\xb8\xde\x93\x88\xff\x11\xf2\xdf\x86\xf8\x6b\xe0\x8f\x3f\x6c\xf8\x18\xfa\xdf\x83\xf8\xf7\x60\x3c\x7b\x11\x5f\x0c\xf7\x11\xde\x07\xcf\xc1\xfd\x8b\xd7\xcf\x4d\x70\xff\xe2\x75\xfe\xbd\x12\xc9\xf1\x7e\xb4\x01\xfa\xc1\xeb\x6a\x07\x5c\x17\x5e\x3f\x6f\x42\xfe\xf1\xbe\x50\x02\xfe\x78\xfd\x5f\x0c\x79\xc0\xeb\xde\x9b\xd0\x0f\xde\xef\x5e\x81\xef\x99\xc4\xfb\xda\x07\x70\x5d\x78\xff\xed\x80\xeb\xc2\xeb\x9e\x0f\x38\x5e\x3f\x57\x42\xff\x78\x9d\x7f\x07\xe6\x0f\x5e\xcf\x03\xa5\x92\xe3\x73\xc5\x33\xf0\xba\xe0\xf3\xc3\x64\xe0\xf8\x7c\xf2\x24\xe4\x19\xef\x6b\xe7\xe0\xba\xf0\xfe\xfb\x06\x8c\x1f\x9f\x13\xee\x82\x7e\xf0\x7e\xb7\x07\xf2\x8f\xf7\xb5\xcf\xe1\x7a\xf1\xfe\xfb\x1f\xa0\x8b\xf7\xf1\x62\x78\xbd\xf0\x7e\x74\x11\x5e\x2f\x7c\x0e\x79\x0e\xfa\xc7\xe7\x8d\xb7\xa1\x7f\x7c\x2e\xda\x0d\xd7\x85\xf7\xa3\xdf\x40\xde\xf0\xbe\x36\x0d\xfa\xc7\xfb\xef\x79\x78\xbd\xf0\x3e\x7b\x0e\xfa\xc1\xe7\xb7\x2f\x21\x6f\xf8\x1c\xf8\x09\xf0\x9d\x88\xbf\x08\xd7\x7b\x3f\xe2\xd9\x95\x50\xfe\x18\x24\x57\xb9\x5e\x97\x2d\xbd\x57\x69\x76\x42\xb3\xb3\x3f\xcf\xfb\xd4\xef\x14\x0f\x14\xe4\x6c\x39\x8a\x6a\x97\xff\xff\x09\x31\xb2\xd3\x48\x3b\xea\x7a\x8b\x2a\x6b\xe7\xf3\x6f\xd6\xfc\x9b\x3d\xfc\x3b\x34\xff\x0e\x0f\xff\x84\xe6\x9f\xf0\xf0\x8f\x68\xfe\x11\x0f\xff\x26\xcd\xbf\xc9\xc3\x7f\xb7\xe6\xbf\xdb\xc3\x7f\x8f\xe6\xbf\xc7\xc3\x3f\xa4\xf9\x87\x3c\xfc\x8f\x69\xfe\xc7\x3c\xfc\xc3\x9a\x7f\xd8\xc3\xff\xb8\xe6\x7f\xdc\xc3\xff\x21\xcd\xff\x21\x0f\xff\x5d\x9a\xff\x2e\x0f\xff\x03\x9a\xff\x01\x0f\xff\x83\x9a\xff\x41\x0f\xff\x43\x9a\xff\x21\x0f\xff\xc3\x9a\xff\x61\x0f\xff\x07\x35\xff\x07\x3d\xfc\x1b\x34\xff\x06\x0f\xff\xbd\x9a\xff\x5e\x0f\xff\x7d\x9a\xff\x3e\x0f\xff\xfd\x9a\xff\x7e\x0f\xff\x46\xcd\xbf\xd1\xc3\xbf\x4d\xf3\x6f\xf3\xf0\x8f\x69\xfe\x31\x0f\xff\x76\xcd\xbf\xdd\xc3\x3f\xae\xf9\xc7\x3d\xfc\x8f\x68\xfe\x47\x3c\xfc\x8f\x6a\xfe\x47\x3d\xfc\x5b\x35\xff\x56\x0f\xff\x93\x9a\xff\x49\x0f\xff\x13\x9a\xff\x09\x0f\xff\x16\xcd\x5f\xda\xb3\x95\x1d\x90\x67\x09\x57\x7c\x00\xde\x0d\x14\x62\x8b\xcb\xae\x70\xed\x77\x01\x75\x96\x8b\xb9\xec\x25\xae\xfe\x03\xf0\x6e\x9f\x10\x2f\xb9\xec\x65\xae\xfd\x31\x00\xef\xfa\x09\xf1\x96\xcb\xae\x14\x42\x5c\x73\xd9\xf2\x14\xfa\xa9\xcb\x96\x63\x1b\x76\xd9\xf2\xd4\x33\xce\x97\xb3\x6b\x84\x10\xf3\x5c\xb6\x3c\xad\xd6\xb9\xec\x3a\x21\x44\xbd\xcb\x96\xa7\xa3\xc3\x2e\x7b\x85\xdc\xb3\x5c\xb6\x3c\x15\x3e\xe9\xb2\xe5\x5e\xde\xe3\xb2\xe5\x29\xe4\x35\x97\x7d\x8f\x10\xe2\xaa\xcb\x96\xa7\xc7\x0f\x5c\xf6\x5a\x21\xc4\x90\xcb\x96\xa7\x95\x9b\x2e\x7b\xbd\x3c\x6b\x15\xe4\x6c\x79\x4a\xbe\xd3\x65\x6f\x94\x63\x70\xd9\xf2\x54\xb6\xd3\x65\xdf\x2b\x5f\x6f\x97\x2d\x4f\xbb\x69\x97\x2d\x5f\xcb\x6e\x97\x2d\x4f\x57\xe7\x5c\xf6\x36\xf9\xf3\xb5\xcb\x96\xa7\xe8\x1f\xb8\xec\x7a\x21\xc4\xa0\xcb\x86\x53\x5b\x65\x3a\xda\x95\x16\x6d\xc9\x68\x3a\x91\xec\x38\x1e\x0d\x85\x5a\xc2\xf1\xa6\x58\x34\xd4\x1a\x8f\xa6\x43\x91\x54\x5b\x28\x1c\x89\x44\x13\x69\xd1\x96\xbf\xb9\x32\x19\x8d\x8d\x74\x52\x45\xb6\xd2\x4d\xed\xe1\x44\xaa\x8a\xee\x34\x94\x48\x76\x9c\x48\x85\x92\xd1\xd1\x5e\xe9\x48\x22\x74\x6a\x45\x28\xd2\x11\x8f\x47\x23\x79\x9d\xea\x3c\x9c\xda\xdb\x9a\x5a\x93\x61\xae\xb5\x39\xd2\xd2\xd1\x19\xcf\xd7\xdc\xde\xd1\xc4\x36\x43\xdf\x79\x7b\x66\x1a\xf3\xb5\x75\x24\xa2\x5c\x53\x67\xb2\x35\x1d\xcd\x93\x8c\x54\x34\x1d\x4a\xa5\xc3\x79\x7d\x22\xb1\x8e\x14\xd7\x9e\xaf\xcd\x49\x05\x7b\x3d\x7c\x5b\x32\x1a\x46\x4d\xcd\x4d\xea\xc1\x3e\x40\x78\x62\x8e\x7e\xf9\xf5\x79\xa9\xb5\x8e\x9e\x96\x54\x23\xd9\xc2\xa8\xd6\xe5\x55\xad\xcb\xa7\x5a\xc7\xaa\xd6\xe5\x51\x55\x13\x54\x97\xcb\xe2\xd1\x3a\xbb\x4f\xef\x1e\xdd\x82\x31\x56\xc8\x4e\x72\x5d\x62\x84\x63\x8d\xd1\x4d\x04\x27\x55\xe0\x5e\x21\x54\x1c\x4e\xaa\xb8\x9a\x08\x0e\x93\x25\x7a\x2a\x1a\x4f\xa7\xbc\x17\x11\xcf\x05\xc4\x73\xf1\xe0\x17\x8e\x3c\x8b\x46\x9e\x05\x83\x5b\x2c\xd8\x85\x82\x5b\x24\x98\x05\x82\x5b\x1c\xbc\x16\x86\x7c\x8b\x02\xb7\x20\xb0\x8b\x01\xb7\x10\x30\x8b\x80\x83\x1f\x8e\xa7\x93\xe1\x48\x5b\xb4\x29\x94\x68\x6d\x4a\x71\x77\x05\x79\x4f\x70\x77\x04\x79\x3f\xd0\x53\x9e\x9d\xf0\xf4\x74\xd7\x3b\xe1\xfa\x20\xbb\x50\x3d\x50\xb7\x4b\x67\x07\xd5\xe0\xf0\xd0\xa9\x68\x32\xd5\x4a\x3a\xc8\xd7\x5f\x1f\x12\x30\x3c\xa2\x1c\xd6\x98\xab\x57\xd7\x53\xd6\x6d\x18\x8d\xee\x53\x6f\x40\xd4\x59\xdd\x5b\x63\xd1\x90\x73\xd7\xc2\xcb\x1b\x4a\x77\x84\x3a\xc3\xe9\x48\xcb\x88\x40\xea\x74\xca\x99\xaf\xc4\xe5\x39\x1c\x5f\x8b\x8b\xeb\x90\x5e\xca\x47\x26\x3d\xb5\x92\xe7\x1a\xf1\x42\xae\xb5\x51\x0d\xb4\x22\xdc\x2e\x94\x9a\xd3\x80\x95\x5c\x5c\x87\xc4\xc4\xa0\x7a\xa7\x7a\x86\x69\xa7\xf7\x9c\x83\xa1\x58\x6b\x24\x1a\x57\xad\x95\xd1\x96\x50\x73\x32\xdc\x4e\x09\x3a\x77\x39\xbd\x9e\xb3\xab\x39\xbd\x96\x93\xf3\x9c\xe8\x9c\xeb\x9b\xec\xda\x81\x30\xe5\xe4\xd2\x92\x0c\xb7\x87\x5a\x9b\x42\x89\x68\x52\xce\x3a\xb7\xa2\x9c\x6e\x72\x05\x1a\x35\xff\x00\x60\xa5\x1c\xd6\x59\x2a\x9d\x4c\x87\x8f\x8b\xca\xd4\xe9\x76\xa8\x93\x72\xa1\x0f\x8b\x9d\xf7\xde\x1b\x0c\xd5\x39\x55\xad\xac\xaa\x9d\x6a\x75\xa8\x46\x56\x35\xaa\x0e\xaa\x7a\x95\xc2\xaa\x0e\xaa\x7a\xa5\xc2\xaa\x0e\xaa\x7a\x85\xc2\xaa\x0e\xaa\x7a\xb9\x53\xd5\xaa\xba\x46\xd5\x41\x55\xd7\xa9\x66\x55\xd7\xa8\x3a\x98\xe5\xaa\x52\x75\x8d\xaa\x83\x59\x5b\x35\xab\xba\x46\xd5\xc1\x2c\x0f\x2a\xae\xea\xa0\xaa\x6b\xab\x15\x57\x75\x50\xd6\xff\x90\xb2\xad\x54\x90\x4f\x15\x74\xa9\x1f\x9c\xcf\x8c\x1b\xcd\xb5\xc7\x5d\xc0\x96\x7f\xc6\x6a\x9c\xfb\x6e\x3f\xfd\x57\x70\x0e\xf8\xf3\xc7\x0f\x6a\xdc\xaf\xd9\x7b\xfd\x82\x7c\x9a\xa1\x4b\x7d\x74\x37\x4f\xd9\x9d\xea\x31\xbc\x6c\x7c\xf6\x39\xbe\x8d\x8c\xfe\xc8\xf7\x6a\x16\xe6\xd7\x5f\xcb\xe8\xf7\xec\x1f\x7d\x1d\x9d\xea\xff\xf7\xd2\xf5\x57\x94\x32\xfa\x2a\x51\xfa\x33\x59\xba\x7e\x4d\x29\xad\x3f\xa8\xf4\xab\x5d\xfa\xc5\x84\xfe\x5c\x46\x7f\xc0\x50\x7f\x16\xa3\xef\x6f\xc4\xfa\x25\x84\xfe\x35\x26\xff\x5d\x45\x66\xfa\xef\x32\xf9\x5f\x45\xe8\x97\x12\xfa\x7d\x8c\x7e\xc5\x58\x33\xfd\xd7\x19\xfd\x16\x42\x7f\x3c\xa1\x5f\xc8\xe8\x0f\x1a\xea\x67\x8a\x99\xf9\x47\xe8\x4f\x20\xf4\xff\x50\x4c\xeb\x77\x17\x9b\xe9\x0f\x31\xfa\x03\x84\xfe\x44\x42\xff\x56\x09\xad\xbf\xca\x6f\xa6\xff\xd7\x12\x5a\x7f\x98\xd0\x9f\x4c\xe8\x7f\xc6\xe8\x0f\x19\xea\xff\x96\xd1\xaf\x38\x80\xf5\xa7\x12\xfa\xbf\x1f\x4b\xeb\xf7\x94\x98\xe9\xff\x6e\x2c\xad\xdf\x48\xe8\x4f\x27\xf4\x7f\xc6\xe8\xd7\x07\xcc\xf4\xdf\x67\xf4\xbb\x09\xfd\x19\x84\xfe\xaf\x0b\x69\xfd\x61\x43\xfd\x5f\x14\xd2\xfa\x7d\x84\xfe\x2c\x42\xff\x1d\x46\xbf\xb7\xd4\x4c\xff\x6d\x46\x7f\x88\xd0\x9f\x43\xe8\x27\x99\xfb\xaf\x71\x9c\x99\x7e\x9c\xb9\xff\xca\x0f\x62\xfd\xb9\x84\xfe\x41\x46\xdf\x3f\xde\x4c\x7f\x1f\xa3\x5f\x4f\xe8\xcf\x27\xf4\xab\x18\xfd\x3e\x43\xfd\xa5\x8c\x7e\x17\xa1\xbf\x80\xd0\x9f\xc6\xe8\xb7\xdc\x66\xa6\x3f\x89\xd1\xef\x25\xf4\x17\x52\xe7\x8f\x31\xcc\xfe\x3f\xc1\x4c\x7f\xed\x18\x66\xff\x27\xf4\x17\x11\xfa\x0b\x19\xfd\x01\x43\xfd\xf9\x8c\xbe\xff\x10\xd6\x5f\x4c\xe8\xbf\x17\x60\xf6\xff\x32\x33\xfd\x1f\x07\x98\xfd\x9f\xd0\x5f\x4a\xe8\xbf\xc1\xe8\x57\x4c\x34\xd3\xff\x2e\xa3\xdf\x42\xe8\xdf\x4d\xdd\xff\x8c\xfe\xa0\xa1\x7e\x9c\xd1\xef\x21\xf4\xab\x08\xfd\x03\x8c\x7e\xf7\x24\x33\xfd\xbd\x8c\xfe\x00\xa1\x1f\x24\xf4\x5f\x61\xe6\xdf\xaa\xc9\x66\xfa\x17\x99\xf9\x37\x4c\xe8\xd7\x12\xfa\xcf\x32\xfa\x43\x86\xfa\xff\xc9\xe8\x57\x1c\xc6\xfa\xcb\x09\xfd\x53\xcc\xfe\xd3\x33\xc5\x4c\x3f\xc9\xec\x3f\x8d\x84\xfe\x4a\xea\xf5\x67\xf4\xeb\xa7\x9a\xe9\xef\x65\xf4\xbb\x09\xfd\xd5\x84\xbe\xe0\xf6\x7f\x43\xfd\x9b\x05\xcc\xfe\x4f\xe8\xaf\x21\xf4\x3f\x29\x60\xf6\xff\x69\x66\xfa\x1f\x33\xfa\x43\x84\xfe\x3a\x42\xff\x24\xf3\xf3\x73\xe3\x74\x33\xfd\x66\xc1\xec\xff\x47\xb0\xfe\x06\x42\x7f\x27\xa3\xef\x2f\x37\xd3\xaf\x67\xf4\xeb\x09\xfd\x4d\x84\xfe\x7a\xe6\xfc\xdd\x67\xa8\x7f\x0f\x73\xfe\xee\x22\xf4\x37\x13\xfa\x77\x30\xfa\x2d\x33\xcc\xf4\x6f\x67\xf4\x7b\x09\xfd\xad\x84\xfe\xcb\x8c\x7e\xf9\x4c\x33\xfd\xf3\x8c\xfe\x20\xa1\xbf\x9d\xd0\x7f\x8e\xd1\x1f\x30\xd4\xef\x66\xf4\xfd\x47\xb1\xfe\x0e\x42\xff\x4d\xb5\xfe\xea\xef\x41\x75\xa9\x47\x5e\xf5\xff\xdf\x44\x7f\xff\xe8\xa3\x00\x1d\xff\xfc\x6c\xb3\xf8\xff\x1e\x4b\xc7\xf7\xce\x31\x8b\xff\x7e\x11\x1d\x7f\xf5\x76\xb3\xf8\x8b\x3e\x3a\x7e\x70\xae\x59\x7c\x25\x33\xfe\x1b\xf3\xcc\xe2\xe7\x14\xd0\xf1\xfe\x3b\xcc\xe2\x3b\x19\xfd\x79\x0b\xcc\xe2\x93\x8c\xfe\xaa\x3b\xcd\xe2\x7f\xc5\xe4\xbf\x61\xa1\x59\xfc\xdb\x4c\xfe\x5b\xee\x32\x8b\x7f\x84\xd1\x3f\xbb\xc8\x2c\xfe\x7e\x46\xbf\xa7\xc2\x2c\x7e\x09\xa3\x7f\x79\xb1\x59\xfc\x9f\x04\x1d\x3f\xb0\xc4\x2c\xfe\x05\x46\xff\xfa\x52\xb3\xf8\x56\xe6\xfa\x87\x97\x99\xc5\x6f\x61\xf4\xcb\x2a\xcd\xe2\x27\x30\xfa\x15\x55\x66\xf1\xdb\x98\xf9\xbf\xb1\xda\x2c\x7e\x35\x33\xff\x1b\x83\x66\xf1\x21\xe6\xfa\x13\x35\x66\xf1\x95\xcc\xf5\x77\xd7\x1a\xea\x33\xd7\x7f\xbe\xce\x2c\x7e\x1f\x73\xfd\x7d\xcb\xcd\xe2\xbf\xc3\x5c\xff\xb5\x15\x66\xf1\x4f\x33\xd7\x3f\xb4\xd2\x2c\xbe\xcd\x4f\xc7\x67\x1f\xd1\xf7\x8a\xff\x2f\xe6\xfa\xcb\xef\x31\x8b\xdf\xa7\xde\xbf\xd7\x7e\xdd\x58\x54\xab\x5f\xdd\xd0\x3f\x87\xd1\x3f\xbf\x29\xe1\xe6\xcf\x1a\x33\xfd\x77\x99\xf5\xa3\x7b\xad\x59\xfc\x10\xb3\xff\x9f\x5f\x67\x16\xff\x2a\xa3\xdf\xb7\xde\x2c\xfe\x87\x8c\xfe\xb5\x0d\x66\xf1\x8f\x33\xfa\x43\x1b\xcd\xe2\xff\xcc\xe4\x1f\x1e\x66\x34\x88\xff\x25\x33\x7f\xcb\x37\x9b\xc5\x4f\x62\xee\xdf\xea\x2d\x66\xf1\x5f\x33\xfa\xf5\x5b\xcd\xe2\xcb\x98\xf3\xdb\xb1\x6d\xb4\xbf\x3e\x7f\xdf\x28\xa6\xe3\x9b\x98\x78\xdd\x9e\x1d\xa0\xef\x9f\x16\x15\x3f\xa4\x35\xe8\xe7\xdf\x72\xee\xfd\x27\x75\xfe\xdd\xa8\xe2\xe5\xf9\xf7\x61\xe2\xfc\xfb\x40\x29\xd6\x96\xa5\x41\xfd\x4a\x50\x85\x7a\x1f\x52\x8e\xf1\xdf\x5c\xf1\xd9\xef\x1b\xf9\x5b\x00\x00\x00\xff\xff\x3a\x89\x62\x36\xf8\x8a\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 35576, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

