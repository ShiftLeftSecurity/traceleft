// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x7b\x6c\x54\xc7\xf5\xc7\x67\xfd\x7e\x40\x30\x6f\x13\xe0\x87\x09\x10\x63\x0c\xb6\xd7\x36\xc6\x0e\x01\x0c\x0e\xc1\x80\x01\x63\x1b\x30\x60\xb2\x5e\xd6\xd7\x78\xe3\xd7\x6a\x77\x7f\x18\x5a\xaa\xb8\x6a\x40\xa9\xd2\x36\x56\xa1\x12\x52\x5b\xc9\xa5\x91\x40\x08\x45\x56\x9b\x28\xa8\xa5\x8a\xfb\x90\x4a\x15\xa4\xba\x55\x22\x25\xa9\xd4\xa2\x8a\x4a\x20\xb5\x92\x23\x55\x94\xb6\x34\xae\xe6\xec\x2c\xbe\x9e\x73\xce\xde\xf9\xa3\x52\x23\x75\x46\x82\xc9\xf9\xcc\x39\xf3\x9d\x7b\xee\xdc\x99\xd9\x07\x9b\x57\x76\x36\xbd\x98\xe6\xf3\x89\x64\xf1\x89\xbf\x89\x69\x6b\xba\xd4\x87\x5c\xff\xad\xfe\x8e\x08\x9f\x78\x6f\x51\x82\x9d\x17\x42\x3c\x25\x84\x18\x12\x42\x14\x09\x21\x42\x79\x8f\xa7\x24\x7f\xef\x4a\xa2\x3d\x3b\x4d\x88\xc7\x53\x53\x53\x85\x5a\xe7\xe7\x41\x53\x88\x43\x22\x0f\xec\xe0\xf7\x55\x5c\x30\xd1\x5e\x98\x86\xfd\x67\xa5\x68\x7f\x37\x7d\xa6\xdf\xbb\x8a\x7f\x4b\xd5\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x76\xbc\x9f\x87\xf1\x66\xb8\xfe\x24\xfe\x12\x42\x76\x11\x8f\x06\x43\x4e\x9f\xd3\x1d\x17\xff\x9b\xc5\xa7\xd2\xe1\x7b\xf2\x79\x84\x2d\xb2\xa4\xbb\xe7\xcb\xf0\x7f\x7b\x34\x9f\x9f\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x97\x5d\xcd\x4d\xe2\xb3\xa9\xa9\xa9\x02\x65\xfb\xbe\xd0\x22\x72\xce\xe5\xfb\x96\x0a\x21\x24\x2b\x54\x7c\x4c\xd5\x92\xad\x27\x58\x3d\xc1\xda\x08\xd6\x43\xb0\x73\x04\x1b\x21\xd8\x9b\x04\xbb\x49\xb0\x3b\x04\xbb\x4b\xb0\xbf\x12\x2c\xc7\x87\xd9\x32\x82\x55\x10\xec\x05\x82\xb5\x13\xac\x8f\x60\xc3\x04\xbb\x44\xb0\x6b\x04\xbb\x45\xb0\x09\x82\xdd\x23\xd8\x23\x82\xcd\x4a\xc3\xac\x88\x60\xd5\x04\x6b\x24\x58\x07\xc1\x22\x04\x7b\x95\x60\x97\x35\xb6\x40\x08\x71\x43\x63\xa9\xca\xb7\xf3\x05\x3c\xfd\xa3\x1a\xff\x01\xf0\xc5\x88\x5f\x04\xbe\x04\xf1\x38\xf0\xa5\x88\x1f\x02\xbe\x1c\xf1\x1a\xe0\x2b\x10\x5f\x01\x7c\x25\xe2\x39\xc0\x57\x21\xfe\x29\x7c\xcd\x76\x0d\xe2\x9f\x00\x2f\x46\xfc\xe7\xc0\x4b\x10\x3f\x07\xfd\x67\x22\x7e\x1d\x78\x29\xe2\xaf\x03\xdf\x80\x78\x1f\xf0\x72\xc4\xf7\x01\xf7\x23\x5e\x06\xbc\x0a\xf1\xc5\xc0\x37\x22\x2e\x80\x6f\x42\xfc\x01\x5c\x57\x1d\xe2\xbf\x05\xbe\x19\xf1\x1f\x03\xdf\x82\xf8\x09\xe8\x3f\x1b\xf1\x2b\xc0\xb7\x21\xfe\x15\xe0\xdb\x11\xef\x02\xde\x80\xf8\x4e\xe0\x3b\x11\xdf\x0a\x3c\x17\xf1\x62\xe0\xf9\x88\x17\x00\x9f\x8d\xf8\xdf\xe1\xba\xe6\x20\xfe\x47\xe0\x73\x11\x7f\x1f\xf8\x7c\xc4\xdf\x06\xbe\x10\xe7\x1f\x9e\x96\x74\x82\x4a\x9e\xc9\xf0\x6c\x86\xe7\x32\x3c\x9f\xe1\xb3\x19\x3e\x87\xe1\x73\x19\x3e\x9f\xe1\x0b\x19\xbe\x98\xe1\x4b\x18\xbe\x94\xe1\xcb\x19\xbe\x82\xe1\x2b\x19\xbe\x8a\xe1\x6b\x18\x5e\xcc\xf0\x12\x86\x97\x32\x7c\x03\xc3\xcb\x19\xee\x67\x78\x15\xc3\x37\x32\x7c\x13\xc3\xeb\x18\xbe\x99\xe1\x5b\x18\xbe\x8d\xe1\xdb\x19\xde\xc0\xf0\x9d\x88\x9d\xcf\x95\xfb\x54\x2f\xe2\xdf\xcb\x96\xbc\x0f\xf1\x1b\x19\x92\xef\x42\xfc\x60\x96\xe4\x27\x10\x3f\x9e\x26\xf9\x4b\x88\x7f\x37\x53\xf2\x00\xe2\xaf\xfb\x24\xef\x44\xbc\x08\xfa\xdf\x8b\xf8\x33\xd0\x7f\x13\xe2\xb5\xe0\x7f\x14\xf1\xad\xe0\x7f\x0c\x8f\x1f\xc6\x73\x1c\xf1\x2a\x18\x4f\x07\xe2\xaf\x82\xff\x21\xc4\x07\xc0\xff\x30\xe2\x35\xe0\x7f\x04\xf1\x05\xe0\xdf\x8e\xf8\x4d\xc8\xb3\x83\xf8\x05\x38\x57\x74\x23\xde\x07\xfd\x1f\x44\xbc\x05\xfa\x6f\x41\x7c\x19\xf8\xb7\x22\xfe\x10\xfa\x6f\x43\xfc\x1d\xf0\xdf\x8d\xf8\x55\xe8\x7f\x0f\xe2\x61\xc8\xff\x3e\xc4\x87\x20\xff\xfb\x11\xcf\x00\xff\x30\xe2\x69\xe0\xff\x32\xe2\xf7\x60\x3c\xa7\x10\xff\x3d\x8c\xa7\x07\xf1\x7f\x42\x3e\x83\x88\xff\x06\xae\xf7\x24\xe2\x9f\x80\x7f\x08\xf1\x1b\xe0\xdf\x85\xf8\x1d\x18\xcf\x01\xc4\x7f\x06\xe3\x69\x46\x7c\x5e\x9e\xe4\x78\xdd\x2b\x83\xe7\x0e\xaf\xcf\x0d\xf0\x9c\xe2\x7d\xe4\x1d\xe0\x78\x3d\xec\x80\xf1\xe3\x75\xef\x01\xe4\x19\xaf\xe7\x0f\xd3\x25\xc7\xeb\x76\x09\x5c\x2f\x5e\xaf\xae\x42\x3f\x78\x9f\xba\x08\xfd\xe0\xfd\xe8\xa7\x70\x5d\x78\xdf\xfc\x53\x8e\xe4\x78\xbd\x1a\x02\x8e\xd7\xbd\xd5\xd0\x3f\x5e\x9f\xdf\x82\x79\x82\xd7\xe1\x1e\xc8\x33\x71\x1e\x80\xfe\xf1\xbe\xff\x0f\xc8\x27\xde\x77\xbe\x0a\xe3\xc7\xfb\x63\x29\xf8\xe3\x7d\xfc\x3b\xc0\xf1\x7e\xb4\x1d\xee\x0b\xde\x77\x7e\x07\xd7\x85\xf7\xc7\x08\xe8\xe2\x7d\x36\x1b\xee\x0b\xde\x2f\xde\x80\xfb\x82\xcf\x09\x67\xa1\x7f\x7c\x1e\xb8\x0e\xfd\xe3\x73\xcb\xaf\x20\x3f\x78\xbf\x38\x02\x1c\xef\x3b\xe9\xd0\x3f\xde\x1f\xbf\x0e\xf7\x05\xef\x83\xf3\xa0\x1f\x7c\xbe\x6a\x83\xfb\x85\xcf\x69\xc3\x70\x5d\x8d\x88\x57\xa8\x5a\xbe\x0c\xfc\x9a\x10\x4f\x76\x0e\x69\xbf\xe4\x7a\xab\x24\x69\xa7\xf2\x0f\x68\xfe\x01\x0f\xff\x1e\xcd\xbf\xc7\xc3\x3f\xac\xf9\x87\x3d\xfc\x3b\x34\xff\x0e\x0f\xff\x13\x9a\xff\x09\x0f\xff\x26\xcd\xbf\xc9\xc3\x7f\x9f\xe6\xbf\xcf\xc3\xbf\x5d\xf3\x6f\xf7\xf0\x3f\xaa\xf9\x1f\xf5\xf0\x3f\xa6\xf9\x1f\xf3\xf0\x3f\xae\xf9\x1f\xf7\xf0\xdf\xa3\xf9\xef\xf1\xf0\xdf\xab\xf9\xef\xf5\xf0\x6f\xd1\xfc\x5b\x3c\xfc\x5b\x35\xff\x56\x0f\xff\x36\xcd\xbf\xcd\xc3\xff\x90\xe6\x7f\xc8\xc3\xbf\x51\xf3\x6f\xf4\xf0\xdf\xad\xf9\xef\xf6\xf0\xdf\xaf\xf9\xef\xf7\xf0\x3f\xa0\xf9\x1f\xf0\xf0\x6f\xd6\xfc\x9b\x3d\xfc\x0f\x6a\xfe\x07\x3d\xfc\xbb\x34\xff\x2e\x0f\x7f\x47\xf3\x77\x3c\xfc\xbb\x35\xff\x6e\x0f\xff\x53\x9a\xff\x29\x0f\xff\xc3\x9a\xff\x61\x0f\xff\x23\x9a\xff\x11\x0f\xff\x93\x9a\xff\x49\x0f\xff\x90\xe6\x1f\xf2\xf0\xef\xd4\xfc\x3b\x3d\xfc\x83\x9a\xbf\xb4\x97\x29\x3b\x0f\xde\xdd\x9a\x8e\x97\xf6\x6a\x21\xc4\x0b\x2e\x7b\x8d\x5a\xe3\x92\xf6\xb3\xf2\x5c\xee\xb2\x8b\x5d\xfd\x4b\x7b\xad\x10\xe2\x92\xcb\x96\xa7\x8e\x6b\x2e\x7b\x9d\x10\xe2\x96\xcb\x96\xa7\xbc\x09\x97\xbd\x5e\x9e\x83\x5d\xb6\x3c\x6d\x3c\x72\xd9\x65\x42\x88\x59\xbe\x69\x5b\x9e\x06\x8b\x5c\xb6\xbc\x96\x6a\x97\x2d\x4f\x25\x8d\x2e\xbb\x52\xee\x39\x2e\x5b\x9e\xba\x22\x2e\xbb\x5a\xbe\x0e\x72\xd9\x72\xf7\xbf\xec\xb2\x6b\xe4\x79\xd9\x65\xcb\xd3\xd9\xb8\xcb\xae\x15\x42\x7c\xe0\xb2\xe5\x29\xe1\xbe\xcb\x7e\x4e\x08\xf1\xd8\x65\xcb\x53\x68\x41\xda\xb4\xfd\xbc\xbc\x07\x2e\x5b\x9e\x86\x6a\x5d\xf6\x56\xb9\xa7\xb9\x6c\x79\x9a\xec\x74\xd9\xf5\x42\x88\xb8\xcb\x96\xa7\x9a\xd7\x5c\xf6\x0e\x79\x8e\x73\xd9\xf2\x94\x3a\xe6\xb2\xe1\xde\x97\xc5\x9d\x33\x71\xd1\x1b\x75\xe2\x91\xe8\xe0\x49\x27\x10\xe8\x09\x0e\x74\xf5\x39\x81\xf0\x80\x13\x0f\x84\x62\xbd\x81\x60\x28\xe4\x44\xe2\xa2\x37\x75\x73\x59\xd4\xe9\x7b\xd2\x49\x39\xd9\x4a\x37\xf5\x07\x23\xb1\x72\xba\xd3\x40\x24\x3a\x78\x2a\x16\x88\x3a\x33\xbd\xe2\xa1\x48\xe0\x74\x4d\x20\x34\x38\x30\xe0\x84\x52\x3a\x55\x7b\x38\xf5\xf7\x76\x85\xa3\x41\xae\xb5\x3b\xd4\x33\x38\x34\x90\xaa\xb9\x7f\xb0\x8b\x6d\x86\xbe\x53\xf6\xcc\x34\xa6\x6a\x1b\x8c\x38\x5c\xd3\x50\x34\x1c\x77\x52\x24\x23\xe6\xc4\x03\xb1\x78\x30\xa5\x4f\xa8\x6f\x30\xc6\xb5\xa7\x6a\x4b\xa4\x82\xbd\x1e\xbe\x2d\xea\x04\xdd\x4d\x78\x16\xce\xbc\xd7\xfa\x24\xd4\x5a\x67\xce\x41\xaa\x91\x6c\x61\x54\xab\x53\xaa\x56\xa7\x52\xad\x66\x55\xab\x53\xa8\xaa\xd9\xa8\xcb\x25\xf1\x4c\x9d\xd6\xb3\xad\x33\x5b\x30\xc6\x0a\xc9\x19\xad\x4b\x3c\xe1\x58\x63\x66\x13\xc1\x49\x15\x78\x30\x08\x95\x04\x27\x55\x5c\x4d\x04\x87\x49\xe3\x9c\x76\x06\xe2\x31\xef\x15\xc3\x73\xb5\xf0\x5c\x29\xf8\x55\x22\xc5\x0a\x91\x62\x75\xe0\x56\x06\x76\x55\xe0\x56\x04\x66\x35\xe0\x56\x02\xaf\x55\x20\xd5\x0a\xc0\x3d\xfd\xec\x93\xcf\x3d\xf5\xcc\x13\x9f\xc0\xff\x3f\x10\x8f\x06\x43\xbd\x4e\x57\x20\x12\xee\x8a\x71\x4f\x05\xf9\x4c\x70\x4f\x04\xf9\x3c\xd0\x53\x9e\x9d\xf0\xf4\x74\xd7\x3b\xe1\xfa\x20\xbb\x50\x3d\x50\x8f\xcb\xd0\x20\xd5\x90\xe0\x81\xd3\x4e\x34\x16\x26\x1d\xe4\xfd\xd7\x87\x04\x0c\x8f\x68\x1a\x6b\x2c\x19\x1e\x3b\x1b\x4b\x4c\x1c\x42\x27\xc1\x71\xa7\x2e\xae\x43\x7a\x4d\x7d\x32\xfb\xa8\x25\x75\xba\x11\xaf\xa8\x5a\x1b\xd5\x40\x2b\xc2\xbc\xa5\xd4\x12\x0d\x58\xc9\xc5\x75\x48\xdc\x21\xaa\x77\xaa\x67\xb8\xff\x7a\xcf\xd3\x30\xd0\x17\x0e\x39\x03\xaa\xb5\xcc\xe9\x09\x74\x47\x83\xfd\x94\x60\xe2\x71\xa3\x17\x56\x76\x59\xa5\x17\x55\x72\xc2\x11\x9d\x73\x7d\x93\x5d\xa3\x9e\xe5\xb4\x92\x8f\xfc\x8c\x79\x06\x00\xf7\x38\x8d\x75\x16\x8b\x47\xe3\xc1\x93\xa2\x2c\x76\xb6\x5f\xd6\x4d\x3b\x76\xd4\x05\x2a\x65\x55\xa9\x6a\xbf\xaa\x6b\x15\x56\xb5\x5f\xd5\x9b\x14\x56\xb5\x5f\xd5\x35\x0a\xab\xda\xaf\xea\x8d\x0a\xab\xda\xaf\xea\x6a\x85\x55\xed\x57\x75\x95\xaa\x54\x5d\xa9\x6a\x7f\xd2\x56\xcd\xaa\xae\x54\xb5\x3f\x59\xab\x66\x55\x57\xaa\xda\xaf\xea\x0a\xd5\xac\xea\x4a\x55\xfb\x65\xfd\x9f\x29\x6f\xe6\x09\xf2\xd3\xe6\x61\xf5\x51\xcf\x8f\xb4\xb7\xbc\x7d\x02\xdb\xf2\x4f\x96\xc6\xb9\xdf\xc4\xca\xd0\xec\x4b\x79\xa9\xe3\xf5\xef\x98\xe4\x68\xf6\x48\x9e\xa0\x3f\xe5\x56\x1f\x65\x24\x5f\xef\x0e\xaa\xef\xa0\x25\xe3\x93\xdf\xb7\xfa\x12\xa3\x3f\x69\xa8\x7f\x96\xd1\xaf\x20\xf4\x33\x09\xfd\x17\x73\x68\xfd\x51\x9f\x99\xfe\x8e\x1c\x5a\xbf\x93\xd0\xcf\x26\xf4\xcb\x18\xfd\x66\xe6\x3b\x3e\xba\xfe\x3a\x46\x7f\x84\xd0\xcf\x25\xf4\x27\xb3\x69\xfd\xe4\xa4\xf4\xd2\xff\x73\x36\xad\x3f\x4e\xe8\xe7\x13\xfa\x1f\x33\xfa\x63\x86\xfa\x1f\x32\xfa\x93\x84\xfe\x6c\x42\x3f\x9e\x4b\xeb\x77\x66\x98\xe9\x47\x72\x69\xfd\xa2\x66\xac\x3f\x87\xd0\xef\x60\xf4\x0b\x32\xcd\xf4\xdb\x19\xfd\x66\x42\x7f\x2e\xa1\xff\x51\x16\xad\x3f\x6e\xa8\xff\x41\x16\xad\x3f\x4c\xe8\xcf\x27\xf4\xc7\x19\xfd\x48\x96\x99\xfe\x2d\x46\x7f\x8c\xd0\x5f\x48\xe8\xdf\x4e\xa7\xf5\x8b\xb2\xcd\xf4\x7f\x91\x4e\xeb\xdf\x25\xf4\x17\x13\xfa\x6f\x31\xfa\x13\x86\xfa\xd7\x19\xfd\x82\x83\x58\x7f\x09\xa1\x1f\x60\x9e\xbf\xe1\x1c\x33\xfd\xe3\xcc\xf3\x57\x4f\xe8\x2f\x25\xf4\x77\x31\xfa\x15\xb9\x66\xfa\x0d\x8c\x7e\x84\xd0\x5f\x4e\xe8\x2f\x63\xf4\xef\x1a\xea\x17\x32\xfa\xa3\x84\xfe\x0a\x42\x3f\x9d\xd1\x1f\xc9\x33\xd3\x9f\x62\xe6\xff\x04\xa1\xbf\x92\xd0\xdf\x90\xc1\xec\xff\xf9\x66\xfa\x25\x19\xcc\xfe\xdf\x82\xf5\x57\x11\xfa\xf3\x18\xfd\x49\x43\xfd\xa7\x18\xfd\x0a\x42\x7f\x0d\xa1\xdf\xc0\x9c\x3f\x46\x67\x99\xe9\x6f\x63\xce\x1f\x9d\x84\x7e\x31\xa1\x5f\xca\xe8\x37\xcf\x36\xd3\x2f\x66\xf4\x47\x08\xfd\x12\x42\xff\x3e\xb3\xff\xc0\x8f\xe3\x1a\xe8\xdf\x63\xf6\x9f\x71\x42\xbf\x94\xd0\xff\x35\xa3\x3f\x66\xa8\xff\x3e\xa3\x3f\x49\xe8\x6f\x20\xf4\x2f\x32\xf3\xaf\x73\x8e\x99\xfe\x1b\xcc\xfc\x2b\x6a\xc5\xfa\xe5\x84\xfe\x19\x46\xbf\xa0\xc0\x4c\x3f\xce\xe8\x37\x13\xfa\x7e\x42\x3f\xc4\xec\x3f\xe3\x86\xfa\x01\x66\xff\x19\x26\xf4\xab\xa8\xf3\x37\xa3\x1f\x99\x6b\xa6\xbf\x83\xd1\x1f\x23\xf4\x37\x12\xfa\x7f\x49\x63\xf6\xff\x79\x66\xfa\x0f\xd2\x98\xfd\x9f\xd0\xdf\x44\xe8\x4f\x30\xfa\x13\x86\xfa\x77\x18\xfd\x82\x36\xac\x5f\x47\xe8\xbf\xcc\xbc\x7e\x1c\x9e\x6f\xa6\xdf\x2d\x98\xfd\x9f\xd0\xdf\x4c\xe8\x37\x31\xfa\x15\x0b\xcc\xf4\x1b\x19\xfd\x08\xa1\xbf\x85\xd0\x7f\x9b\x79\xfd\x75\xd7\x50\x7f\x8c\x79\xfd\x35\x4a\xe8\x6f\x23\xf4\x2f\x33\xfa\x23\x0b\xcd\xf4\x2f\x31\xfa\x13\x84\xfe\x76\x42\xff\x69\x66\xfd\xad\x5f\x64\xa6\xbf\x88\x59\x7f\x93\x5f\x6d\x75\xeb\x37\x10\xfa\x69\x8c\xfe\xa4\xa1\xfe\x67\xcc\xf5\x57\x10\xfa\x3b\x09\xfd\xab\x6a\xfd\xd5\xdf\x83\x19\x55\x5f\x41\xd4\x7f\xff\x5d\x7f\xff\xe4\x8b\x59\x74\xfc\xcd\x42\xb3\xf8\xb1\x4c\x3a\x7e\x62\x89\x59\xfc\x15\x1f\x1d\x7f\xff\x69\xb3\xf8\xa5\xcc\xf8\x93\x5f\x5c\xf0\x8a\x5f\x9e\x46\xc7\x17\x2e\x37\x8b\xef\x62\xf4\x2b\xfe\xcf\x2c\x3e\xca\xe8\x37\xae\x30\x8b\xff\x25\x93\xff\xce\x22\xb3\xf8\x9f\x30\xf9\x3f\xb3\xd2\x2c\xfe\x14\xa3\x3f\xf2\x8c\x59\xfc\x3e\x46\xff\xda\x2a\xb3\xf8\xc5\x8c\xfe\xf8\x6a\xb3\xf8\x4f\x05\x1d\xff\xd1\x1a\xb3\xf8\x57\x18\xfd\xc9\x67\xcd\xe2\xc3\xcc\xf5\xe7\xac\x35\x8b\xf7\x33\xfa\x45\x25\x66\xf1\x73\x18\xfd\xda\x75\x66\xf1\x55\xcc\xfc\x6f\x2e\x35\x8b\xaf\x63\xe6\x7f\xcf\x7a\xb3\xf8\x26\xe6\xfa\x87\x37\x98\xc5\x97\x31\xd7\x7f\xb9\xcc\x50\x9f\xb9\xfe\xb1\x72\xb3\xf8\xc3\xcc\xf5\xdf\xae\x30\x8b\xbf\xcc\x5c\xff\x5d\xbf\x59\xfc\x05\xe6\xfa\x1f\x55\x9a\xc5\x3f\x64\xf6\x9f\x82\x6a\xb3\xf8\x3b\xcc\xf3\xb7\x76\xa3\x59\xfc\x87\x8c\x7e\x7d\x8d\x59\xfc\x55\x46\xbf\x7d\x93\x59\xfc\x0f\x19\xfd\x48\xad\x59\xfc\x97\x19\xfd\xd7\xea\xcc\xe2\xff\xc0\xdc\xff\xd1\xe7\xcc\xe2\x3f\x66\xee\xff\xcd\xcd\x66\xf1\x53\xdc\xfe\xff\xbc\x59\xfc\xbf\xb8\xfd\x7f\x8b\x59\xfc\x85\x5c\x66\xff\xdf\x46\xfb\xeb\x9f\x3f\x5d\xc9\xa6\xe3\x33\x98\x78\xdd\xfe\xa6\xd2\xd7\xfe\xb7\x38\x22\x47\xc5\x8f\x6b\x0d\xfa\xf9\xef\x1b\xcc\xf9\xb3\x53\x9d\xff\x92\xff\x6e\x5b\x9e\xff\xfa\x89\xf3\xdf\x8d\x3c\xac\x2d\xcb\x6d\xf5\x4f\x14\x6a\xd5\xfb\x30\x3e\xed\xfc\x98\xfc\x5d\x80\x7f\x07\x00\x00\xff\xff\x5f\xf6\x4e\xae\x40\x7f\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 32576, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

