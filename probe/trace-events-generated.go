// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x0b\x6c\x5c\xc5\xd5\xc7\x67\x6d\x27\x5e\xaf\xf3\x70\x48\x42\xde\x5f\x0c\x21\xe4\x45\x12\xaf\xed\xbc\x08\x21\xce\x3b\xf0\x99\x2f\x26\x4f\x93\xd7\xf5\x66\xbd\x8e\x1d\xaf\x77\x97\xdd\x05\xc7\x9f\xf9\xf4\x99\x16\x50\x2a\x84\xb0\x1a\xa8\x22\x54\xa4\x84\x50\x91\x56\x11\x32\xad\x20\x41\xa5\x8d\x55\x21\x35\xad\x52\x64\x24\xaa\xba\x42\x2a\x56\x8b\x44\x90\xfa\x48\x55\x04\x91\x1a\xd8\x6a\xce\x9d\xf5\x5e\xcf\x39\x67\xef\xa8\xaa\x54\xa4\xce\x48\x30\x3e\xbf\x39\x67\xfe\x73\xcf\xde\x79\x78\xf7\x7a\xf3\xff\xdb\x1a\xb7\x97\x04\x02\x22\x5f\x02\xe2\x0b\x51\xb0\x3c\xa5\xab\xf0\x63\x83\xfa\xff\x49\x11\x10\x57\x6e\x77\xd9\xd3\x42\x88\x49\x42\x88\xde\xd0\xcd\x9c\xb4\xbb\x85\x10\xd5\x42\x88\x68\xe8\x33\xb0\x7b\x22\xed\xe0\xd7\x73\x2c\x05\x75\xef\xd2\x11\xe0\xbd\xb3\xaf\x43\x7d\xe5\x15\xb7\x9f\xf2\x12\x21\x3e\xcb\xe5\x72\x33\xb5\x41\x3c\x0d\x63\x13\x62\xba\x08\x81\x1d\x51\xed\xd3\x03\x41\xa1\xc7\xdf\xcc\xe5\x72\x57\xce\x2b\xbb\x54\x88\x11\xa2\xbf\x4b\x65\x85\x7e\x4b\xa4\xad\xf8\x8b\xaa\xe6\xae\x4b\xda\x52\xf1\x4a\xb9\x20\x75\xb9\x71\x5f\xa9\x50\xe3\xad\xd8\xe3\xc6\x5d\x50\x71\x41\x3a\xee\xca\x37\x0a\xf1\xa5\xd2\x3e\xa7\xfc\x03\x42\x5c\xcf\xe5\x72\x97\x4a\x84\xa8\x92\xfc\x74\xc1\x4f\x5e\xd2\x25\xa5\xd3\xfb\xd2\x90\x9b\xf7\xf3\x37\x72\xf9\x3c\x54\x6b\xfd\x8c\xa8\x7e\x82\x9e\xf8\x9e\xf3\x23\xa3\xfe\x0d\x9a\xff\xb0\x8f\xff\x62\xcd\x7f\x88\xf4\x1f\x1a\xf5\xaf\xd2\xfc\xaf\x29\xff\x32\x8f\x7f\xb1\xbc\x40\x5e\x83\x05\x7b\x1c\xbc\x4e\x0d\xd0\xff\xa5\xfc\xfd\x11\x74\x7f\xe8\x79\x52\xe5\x65\xf6\x4e\x68\x8f\x9c\xbb\xa5\xee\xbf\x26\xb7\x7e\xa9\x79\x34\x2e\x1e\x97\xbc\x1d\x6c\xa9\xdf\xd6\xea\x74\xc8\x9f\x13\x99\x6c\xa4\x77\x76\x8b\xf2\x3f\xa3\xea\x7e\x55\x9f\x52\x75\x9f\xaa\x4f\xaa\x3a\xa5\xea\xb3\xee\xeb\x71\xee\xba\xd2\xbd\xa0\xec\x61\x65\x0f\xa8\x71\x5d\x73\xe7\xc3\x6d\xee\x78\xbb\x4b\x84\x98\x06\xf3\xe5\x32\xf0\x03\x01\x21\x72\xb9\xc9\xa2\x77\xf6\x20\xd8\xc7\xcb\xdd\xd7\xb5\x5b\xd5\x57\x5e\x55\xf9\x2c\x13\xa2\x41\xce\x83\x88\x6b\xcf\x2c\xd1\xf2\x98\x71\xeb\x4b\xe3\x84\x38\xa5\xf2\x37\xcb\x60\x1e\x14\xe6\xf5\x2d\x34\x6f\x6f\x15\xb9\xff\xf7\xe5\xe7\xed\x79\x15\xc7\x8c\x4b\xfa\x4f\x28\xd2\x7e\xa9\x74\xac\x9f\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xef\xd7\x71\xbc\x65\x9e\xff\x84\xfa\x4c\x4a\x76\x91\x4d\x47\xa2\xb1\x78\xac\x2d\x2b\xfe\x33\x4b\x40\xa5\x03\x3e\xde\xe9\x73\x99\xcd\x4b\x21\x2f\x81\xd1\xcf\x61\x6d\x11\xea\x33\xd2\xd1\x79\xd4\xf7\xef\x1e\xcd\xd7\xa7\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x97\x00\xf1\x39\xac\x2d\x6e\x5e\x82\xc2\xfd\x5b\x3d\x9b\x97\x42\x69\x6b\x75\x3a\x12\x99\x6c\x24\x1e\xff\xe7\xe2\xed\x3c\xa4\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x76\x34\x35\x8a\xaf\x72\xb9\x5c\x95\xb2\x03\xff\xbb\x5b\x04\x9f\xa8\x0c\xcc\x51\xbf\x5b\xcc\x54\x7c\x58\xd5\x92\xdd\xa3\x7e\x0e\x96\x16\x58\xfe\x99\xc7\x01\x8f\xdf\x5e\x82\xb5\x13\xec\x09\x82\xf5\x13\xec\x55\x82\x5d\x26\xd8\x35\x82\x8d\x10\xec\x33\x82\xa9\xaf\x25\x19\xc3\xe6\x12\xac\x86\x60\x5b\x09\xd6\x4c\xb0\x38\xc1\xfa\x08\xf6\x02\xc1\x2e\x10\xec\x1d\x82\x0d\x11\xec\x63\x82\xdd\x24\xd8\x84\x12\xcc\xaa\x09\x56\x4f\xb0\x9d\x04\x3b\x4c\xb0\x14\xc1\x9e\x22\xd8\x19\x82\x5d\x24\xd8\xa0\xc6\xa6\x09\x21\x3e\xd0\x58\xb1\xd2\x55\x29\x60\x95\xb8\xaa\xf1\xec\x04\xf9\xff\x19\xe2\xac\xc6\x0f\x03\x9f\x85\xf8\x56\xe0\x73\x10\x5f\x08\x7c\x1e\xe2\xe3\x81\xcf\x47\xfc\x13\x18\xcf\x1d\x88\x5f\x05\xbe\x00\xf1\x37\x80\x2f\x44\xfc\x25\xe0\x8b\x10\xff\x26\xf0\x25\x88\xb7\x01\x1f\x27\x86\xb5\xe7\xef\x1d\xc5\x6f\x6a\xcf\xd1\xc7\x61\xfc\xcb\x50\x3f\x7b\x81\x2f\x47\xfc\x3e\xe0\x2b\x11\x9f\x07\x3c\x8c\xf8\x57\xa0\x5b\x87\xf8\x47\xc0\x57\x21\x3e\x08\x7c\x0d\xe2\xdf\x07\xbe\x0e\xf1\x6f\x03\x5f\x8f\x78\x2f\xf0\x0d\x88\x2f\x87\x71\x96\x23\xde\x0a\x7c\x23\xe2\x8d\xc0\x37\x21\x5e\x0f\x7c\x0b\xe2\xd3\x81\x6f\x43\xfc\x73\x18\xcf\x0e\xc4\x7f\x03\xfc\x01\xc4\x27\x41\x3f\x15\x88\xff\x05\xfc\x2b\x11\x1f\x02\x3e\x11\xf1\xb7\x81\x4f\x46\xfc\x15\xe0\x53\x10\x7f\x16\xf8\x54\xc4\xb3\xc0\xa7\x23\x2e\x60\xd6\x95\x12\x54\xf2\x71\x0c\x2f\x67\x78\x05\xc3\x2b\x19\x3e\x91\xe1\x93\x19\x3e\x85\xe1\x53\x19\x3e\x9d\xe1\x33\x18\x3e\x8b\xe1\x73\x18\x3e\x8f\xe1\xf3\x19\x7e\x07\xc3\x17\x30\x7c\x21\xc3\x17\x31\x7c\x09\xc3\x97\x31\x7c\x39\xc3\x57\x32\x3c\xcc\xf0\x3a\x86\xaf\x62\xf8\x1a\x86\xaf\x63\xf8\x7a\x86\x6f\x60\xf8\x46\x86\x6f\x62\xf8\x16\x86\x6f\x63\xf8\x0e\x86\x3f\x80\x58\x55\x48\xee\x8f\x19\xc4\xdf\x2c\x97\x1c\xff\xb5\xce\xc5\x32\xc9\xff\x1b\xf1\xcb\xc0\x8f\x23\xfe\x68\x50\xf2\x36\xc4\x63\xe3\x25\x3f\x86\xf8\x21\xf8\x7e\xbc\x28\xe2\x6f\x8c\x93\xbc\x15\xf1\x67\x03\x92\xc7\x10\xaf\x87\xfe\x9b\x10\xbf\x13\xfa\x7f\x18\xf1\x46\xf0\x3f\x8a\xf8\xfd\xe0\xef\xe0\xf1\xc3\x78\x5a\x10\xaf\x83\xf1\x44\x10\x3f\x03\xfe\x07\x11\x4f\x80\xff\x21\xc4\x1f\x04\xff\xc3\x88\x4f\x03\xff\x23\x88\x5f\x83\xfc\x77\x21\xfe\x0c\x9c\x7f\x12\x88\xf7\x41\xff\xfb\x11\xdf\x0d\xfd\x1f\x40\xbc\x06\xfc\x9b\x11\xff\x1c\xfa\x7f\x04\xf1\x5f\x80\xff\xff\x20\xfe\x1a\xf4\xbf\x0b\xf1\xff\x83\xfc\xef\x46\xbc\x1b\xf2\xbf\x07\xf1\x99\xe0\xff\x28\xe2\x25\xe0\x9f\x46\xfc\x26\x8c\x27\x89\xf8\xef\x60\x3c\x29\xc4\x27\x83\x7f\x07\xe2\xef\xc3\xf5\x9e\x40\xfc\xcf\x90\xff\x4e\xc4\x2f\x82\x3f\xfe\xb0\x61\x04\xfa\xdf\x8b\xf8\xcf\x60\x3c\xfb\x10\x5f\x0a\xf3\x08\xef\x83\x2f\xc3\xfc\xc5\xeb\xe7\x66\x98\xbf\x78\x9d\x7f\xaf\x42\x72\xbc\x1f\x35\x40\x3f\x78\x5d\x3d\x0c\xd7\x85\xd7\xcf\x2f\x21\xff\x78\x5f\xf8\x1c\xbe\x1f\x12\xaf\xff\x4b\x20\x0f\x78\xdd\xfb\x31\xf4\x83\xf7\xbb\xd3\xd0\x0f\xde\xd7\x7e\x0d\xd7\x85\xf7\xdf\x14\x5c\x17\x5e\xf7\x4a\x80\xe3\xf5\xf3\x2e\xe8\x1f\xaf\xf3\xaf\xc3\xfd\x83\xd7\xf3\xca\x4a\xc9\xf1\xb9\xe2\x59\x78\x5d\xf0\xf9\x61\x1a\x70\x7c\x3e\x79\x1a\xf2\x8c\xf7\xb5\x97\xe1\xba\xf0\xfe\xfb\x16\x8c\x1f\x9f\x13\x16\x41\x3f\x78\xbf\xdb\x04\xaf\x17\xde\xd7\x3e\x84\xeb\xc5\xfb\xef\x53\xa0\x8b\xf7\xf1\x72\x78\xbd\xf0\x7e\x74\x1e\x5e\x2f\x7c\x0e\xe9\x81\xfe\xf1\x79\xe3\xa7\xd0\x3f\x3e\x17\xed\x85\xeb\xc2\xfb\xd1\xef\x21\x6f\x78\x5f\x2b\x85\xfe\xf1\xfe\xfb\x1c\xbc\x5e\x78\x9f\x7d\x19\xfa\xc1\xe7\xb7\x2f\x20\x6f\xf8\x1c\xf8\x31\xf0\x46\xc4\x5f\x80\xeb\x7d\x08\xf1\xfc\x4a\x28\x7f\x0d\x92\xab\xdc\x05\x8f\x2d\xbd\xd7\x6a\x76\x4a\xb3\x4f\x05\x0a\xf6\x8b\xf2\x7c\x5d\x52\xb0\xe5\x28\x6a\x3c\xfe\xdf\x11\x62\x74\xa7\x91\x76\xcc\xf3\x16\x55\xde\x2e\xe6\xdf\xa6\xf9\xb7\xf9\xf8\x27\x35\xff\xa4\x8f\x7f\x4a\xf3\x4f\xf9\xf8\x47\x35\xff\xa8\x8f\x7f\xab\xe6\xdf\xea\xe3\xbf\x47\xf3\xdf\xe3\xe3\xbf\x57\xf3\xdf\xeb\xe3\xef\x68\xfe\x8e\x8f\x7f\x8b\xe6\xdf\xe2\xe3\x1f\xd1\xfc\x23\x3e\xfe\xc7\x34\xff\x63\x3e\xfe\x0f\x6b\xfe\x0f\xfb\xf8\xef\xd6\xfc\x77\xfb\xf8\x3f\xa2\xf9\x3f\xe2\xe3\x7f\x50\xf3\x3f\xe8\xe3\x7f\x48\xf3\x3f\xe4\xe3\x7f\x58\xf3\x3f\xec\xe3\xbf\x4b\xf3\xdf\xe5\xe3\xdf\xa4\xf9\x37\xf9\xf8\xef\xd3\xfc\xf7\xf9\xf8\xef\xd7\xfc\xf7\xfb\xf8\x1f\xd0\xfc\x0f\xf8\xf8\x37\x6b\xfe\xcd\x3e\xfe\x9d\x9a\x7f\xa7\x8f\x7f\x5c\xf3\x8f\xfb\xf8\x77\x69\xfe\x5d\x3e\xfe\x09\xcd\x3f\xe1\xe3\x7f\x44\xf3\x3f\xe2\xe3\x7f\x54\xf3\x3f\xea\xe3\xdf\xa1\xf9\x77\xf8\xf8\x9f\xd0\xfc\x4f\xf8\xf8\x1f\xd7\xfc\x8f\xfb\xf8\xb7\x6b\xfe\xd2\x9e\xab\xec\x90\x10\xe2\x6e\x4f\x7c\x08\xde\x0d\x14\x62\xab\xc7\x5e\xec\xd9\xef\x42\xea\x2c\x17\xf7\xd8\x4b\x3d\xfd\x87\xe0\xdd\x3e\x21\x5e\xf0\xd8\xf7\x78\xf6\xc7\x10\xbc\xeb\x27\xc4\x3b\x1e\x7b\x85\xdc\xff\x3c\xb6\x3c\x85\x7e\xec\xb1\xe5\xd8\x6e\x7a\x6c\x79\xea\x99\x10\x28\xd8\xb5\x42\x88\x6a\x8f\x2d\x4f\xab\xf5\x1e\xbb\x5e\x08\xb1\xd3\x63\xcb\xd3\xd1\x61\x8f\xbd\x5a\xee\x59\x1e\x5b\x9e\x0a\x9f\xf2\xd8\x72\x2f\x3f\xe3\xb1\xe5\x29\xe4\xa2\xc7\xbe\x57\x08\x31\xe8\xb1\xe5\xe9\xf1\x03\x8f\x7d\x9f\x10\xe2\xba\xc7\x96\xa7\x95\x5b\x1e\xfb\x7e\x79\xd6\x2a\x29\xd8\xf2\x94\x7c\x97\xc7\x6e\x90\x63\xf0\xd8\xf2\x54\xd6\xe8\xb1\x37\xcb\xd7\xdb\x63\xcb\xd3\x6e\xd6\x63\xcb\xd7\xf2\x94\xc7\x96\xa7\xab\xef\x7a\xec\xed\x42\x88\x01\x8f\x2d\x4f\xd1\xef\x7a\xec\x9d\x42\x88\x61\x8f\x0d\xa7\xb6\x15\xd9\xd8\xc9\xac\xe8\x4c\xc7\xb2\xa9\x74\xf2\x58\xcc\x71\xda\x23\x89\xd6\x78\xcc\xe9\x48\xc4\xb2\x4e\x34\xd3\xe9\x44\xa2\xd1\x58\x2a\x2b\x3a\x8b\x37\xaf\x48\xc7\xe2\xa3\x9d\xac\x24\x5b\xe9\xa6\xae\x48\x2a\xb3\x92\xee\xd4\x49\xa5\x93\xc7\x33\x4e\x3a\x36\xd6\x2b\x1b\x4d\x39\x8f\xaf\x76\xa2\xc9\x44\x22\x16\x2d\xea\x54\xef\xe3\xd4\xd5\xd9\xda\x91\x8e\x70\xad\x6d\xd1\xf6\x64\x77\xa2\x58\x73\x57\xb2\x95\x6d\x86\xbe\x8b\xf6\xcc\x34\x16\x6b\x4b\xa6\x62\x5c\x53\x77\xba\x23\x1b\x2b\x92\x8c\x4c\x2c\xeb\x64\xb2\x91\xa2\x3e\xd1\x78\x32\xc3\xb5\x17\x6b\x73\x53\xc1\x5e\x0f\xdf\x96\x8e\x45\xbc\x4d\xf8\x2e\x1c\xfb\x5a\xeb\x37\xa1\xd6\x3a\xf6\x1e\xa4\x1a\xc9\x16\x46\xb5\xbe\xa8\x6a\x7d\x31\xd5\x7a\x56\xb5\xbe\x88\xaa\xba\x1b\x75\xb9\x3c\x1e\xab\xb3\xa7\x67\xcf\xd8\x16\x8c\xb1\x42\xfe\x8e\xd6\x25\x46\x39\xd6\x18\xdb\x44\x70\x52\x05\x26\x06\xa1\xe2\x72\x52\xc5\xd3\x44\x70\xb8\x69\x62\x8f\xc7\x12\xd9\x8c\xfb\x73\x5b\xab\x7a\xfc\xd3\x89\xa4\x8f\x67\xfc\x57\x11\xdf\x15\xc4\x77\xf5\xe0\x57\x8e\x22\xab\x46\x91\x15\x83\x5b\x2d\xd8\x95\x82\x5b\x25\x98\x15\x82\x5b\x1d\xfc\x56\x86\x62\xab\x02\xb7\x22\xb0\xab\x01\xb7\x12\x30\xab\x80\x8b\x1f\x4b\x64\xd3\x91\x68\x67\xac\xd5\x49\x75\xb4\x66\xb8\x99\x42\xce\x13\x6e\x96\x90\x73\x84\x9e\x06\xec\x24\xa0\xa7\x80\xde\x09\xd7\x07\xd9\x85\xea\x81\x9a\x42\xdd\x49\xaa\xc1\xe5\xce\xe3\xb1\x74\xa6\x83\x74\x90\xaf\xbf\x3e\x24\x60\x78\x44\x05\xac\x31\x4f\xaf\x9e\xc7\xac\x3b\x31\x1a\xdb\xa7\xde\x80\xa8\x3b\x71\x3b\xe2\x31\xc7\x9d\xc9\xf0\xf2\x3a\xd9\xa4\xd3\x1d\xc9\x46\xdb\x47\x05\x32\x3d\x19\xf7\x7e\x25\x2e\xcf\xe5\xf8\x5a\x3c\x5c\x87\xf4\xf2\x3e\x7a\xd3\x53\xab\x7b\xa1\x11\x2f\xee\x5a\x1b\xd5\x40\x2b\xc2\x74\xa1\xd4\xdc\x06\xac\xe4\xe1\x3a\x24\x6e\x0c\xaa\x77\xaa\x67\xb8\xed\xf4\x9e\x0b\xd0\x89\x77\x44\x63\x09\xd5\xba\x22\xd6\xee\xb4\xa5\x23\x5d\x94\xa0\x3b\xcb\xe9\x35\x9e\x5d\xe1\xe9\xf5\x9d\xbc\xcf\x89\xce\xb9\xbe\xc9\xae\x5d\x08\xb7\x9c\x5c\x5a\xd2\x91\x2e\xa7\xa3\xd5\x49\xc5\xd2\xf2\xae\xf3\x2a\xca\xdb\x4d\xae\x40\x63\xee\x3f\x00\x58\xa9\x80\x75\x96\xc9\xa6\xb3\x91\x63\x62\x45\xa6\xa7\x0b\xea\xb4\x5c\xe8\x23\xa2\x71\xf3\xe6\xb0\x53\xef\x56\x75\xb2\xaa\x71\xab\x75\x4e\xad\xac\x6a\x55\x1d\x56\xf5\x5a\x85\x55\x1d\x56\xf5\x1a\x85\x55\x1d\x56\xf5\x6a\x85\x55\x1d\x56\xf5\x2a\xb7\xaa\x53\x75\xad\xaa\xc3\xaa\xae\x57\xcd\xaa\xae\x55\x75\x38\xcf\x55\xa5\xea\x5a\x55\x87\xf3\xb6\x6a\x56\x75\xad\xaa\xc3\x79\x1e\x56\x5c\xd5\x61\x55\xd7\xd5\x28\xae\xea\xb0\xac\xff\x15\x65\x47\xa5\x20\x9f\x2a\xe8\x53\xbf\x38\x3f\x31\x61\x2c\xd7\x1e\x77\x01\x5b\xfe\x37\x5e\xe3\xdc\x77\xfb\xe9\x7f\x82\x73\x30\x58\x3c\x7e\x58\xe3\x41\xcd\xde\x1f\x14\xe4\xd3\x0c\x7d\xea\xa3\xbb\x6a\x65\x77\xab\x67\x1b\xf3\xf1\xf9\xe7\xf8\x36\x31\xfa\xf9\xef\xd5\x0c\x96\x16\xd7\xdf\xc0\xe8\x9f\x3d\x30\xf6\x3a\xba\xd5\xbf\xef\xa5\xeb\xaf\xa9\xa4\xf5\xab\x55\xa2\xf4\x67\xb2\x74\xfd\xba\x4a\x5a\x7f\x44\xe9\xd7\x78\xf4\xcb\x09\xfd\x6a\x46\x7f\xc8\x50\x7f\x2e\xa3\x5f\xd5\x8c\xf5\x2b\x08\xfd\xf7\x99\xfc\xf7\x8d\x33\xd3\xff\x15\x93\xff\x06\x42\xbf\x92\xd0\x7f\x9b\xd1\xaf\x19\x6f\xa6\xff\x26\xa3\x9f\x22\xf4\x27\x12\xfa\x65\x8c\xfe\x88\xa1\xbe\xe0\xee\x3f\x42\x7f\x32\xa1\xff\xa7\x72\x5a\xbf\xbf\xdc\x4c\xff\xd3\x72\x5a\x7f\x88\xd0\x9f\x42\xe8\xe7\x2a\x98\xf9\x1f\x34\xd3\xff\x7b\x05\xad\x9f\xff\x28\xde\xab\x3f\x95\xd0\xff\x84\xd1\xbf\x61\xa8\xff\x07\x46\xbf\x86\xd0\x9f\x4e\xe8\xff\x71\x3c\xad\x7f\xb6\xc2\x4c\xff\xfa\x78\x5a\xbf\x85\xd0\x9f\x41\xe8\x7f\xc0\xe8\x37\x85\xcc\xf4\x87\x18\xfd\x7e\x42\x7f\x16\xa1\x7f\xb5\x94\xd6\xcf\x7f\x94\xec\xa7\xff\x6e\x29\xad\x3f\x48\xe8\xcf\x21\xf4\x5f\x67\xf4\x07\x0c\xf5\x7f\xc0\xe8\xdf\x20\xf4\xe7\x11\xfa\x19\x66\xfe\xb5\x4c\x30\xd3\x4f\x32\xf3\xaf\xfa\x20\xd6\x9f\x4f\xe8\x1f\x62\xf4\xab\x26\x9a\xe9\x1f\x60\xf4\x9b\x08\xfd\x3b\x08\xfd\x1a\x46\x7f\xd0\x50\xff\x1e\x46\xbf\x8f\xd0\x5f\x40\xe8\xcf\x60\xf4\x53\x93\xcc\xf4\xa7\x32\xfa\x03\x84\xfe\x42\x42\x7f\x79\x19\xb3\xff\x4f\x36\xd3\x5f\x52\xc6\xec\xff\x84\xfe\x22\x42\xff\x36\x46\x7f\xc8\x50\x7f\x12\xa3\x5f\x75\x08\xeb\x2f\x21\xf4\xdf\x0b\x31\xfb\x7f\x95\x99\xfe\x2f\x43\xcc\xfe\x4f\xe8\x2f\x23\xf4\xdf\x62\xf4\x6b\xa6\x98\xe9\xff\x90\xd1\x4f\x11\xfa\xcb\xa9\xf9\xcf\xe8\x8f\x18\xea\x27\x19\xfd\xb3\x84\xfe\x4a\x42\xff\x20\xa3\xdf\x7f\x9b\x99\xfe\x7e\x46\x7f\x88\xd0\x0f\x13\xfa\xa7\x99\xfb\xaf\x61\xaa\x99\xfe\xf3\xcc\xfd\x97\x7f\x64\xd0\xab\x5f\x47\xe8\x9f\x64\xf4\x6f\x18\xea\x67\x19\xfd\x1a\x42\x7f\x15\xa1\x1f\x65\xf6\x9f\xb3\xd3\xcc\xf4\x1d\x66\xff\x69\x21\xf4\xd7\x10\xfa\xdb\x19\xfd\xa6\xe9\x66\xfa\x9b\x19\xfd\x7e\x42\x7f\x1d\x75\xfe\x2c\x61\xf6\xff\xdb\xcd\xf4\x3f\x2d\x61\xf6\x7f\x42\x7f\x3d\xa1\x3f\xc4\xe8\x0f\x18\xea\x5f\x63\xf4\x6f\x10\xfa\x1b\x08\xfd\x13\xcc\xef\xcf\x2d\x33\xcc\xf4\xdb\x04\xb3\xff\x1f\xc1\xfa\x1b\x09\xfd\x46\x46\xbf\x6a\xa6\x99\xfe\x4e\x46\xbf\x89\xd0\xdf\x44\xe8\x6f\x64\xce\xdf\x83\x86\xfa\xeb\x99\xf3\x77\x1f\xa1\xbf\x85\xd0\x5f\xc0\xe8\xa7\x66\x99\xe9\xcf\x67\xf4\x07\x08\xfd\x6d\x84\xfe\xf7\x18\xfd\xea\xd9\x66\xfa\xe7\x18\xfd\x11\x42\x7f\x07\xa1\xff\x1c\xa3\x3f\x64\xa8\xff\x2d\x46\xbf\xea\x28\xd6\x7f\x80\xd0\x7f\x4d\xad\xbf\xfa\x7b\x50\x7d\xea\x91\x57\xfd\xdf\x37\xd1\xdf\x3f\xfa\x28\x44\xc7\x9f\x99\x6b\x16\xff\xfc\x78\x3a\x7e\x60\x9e\x59\xfc\xbb\xe3\xe8\xf8\xab\xff\x65\x16\xff\x4a\x80\x8e\x1f\x99\x6f\x16\xbf\x92\x19\xff\xcd\x6a\xb3\xf8\x79\x25\x74\x7c\xd5\x9d\x66\xf1\x27\x19\xfd\xc5\x0b\xcc\xe2\xd3\x8c\x7e\xc3\x5d\x66\xf1\x1f\x32\xf9\x6f\x5e\x68\x16\xff\x13\x26\xff\xa9\xbb\xcd\xe2\x7b\x19\xfd\x53\x8b\xcc\xe2\x1f\x62\xf4\xcf\x2e\x36\x8b\x5f\xc6\xe8\x5f\x5e\x62\x16\xff\x57\x41\xc7\x0f\x2d\x35\x8b\x3f\xcd\xe8\x5f\x5f\x66\x16\xdf\xc1\x5c\x7f\xfe\xd1\x70\xbf\xf8\x6d\x8c\xfe\xcc\x15\x66\xf1\x93\x19\xfd\x9a\x95\x66\xf1\x3b\x98\xfb\x7f\x67\x8d\x59\xfc\x3a\xe6\xfe\x6f\x09\x9b\xc5\xb7\x30\xd7\x7f\xb2\xd6\x2c\x7e\x05\x73\xfd\xfd\x75\x86\xfa\xcc\xf5\x5f\xa8\x37\x8b\xdf\xcf\x5c\xff\xe0\x2a\xb3\xf8\x8b\xcc\xf5\x0f\xaf\x36\x8b\x7f\x86\xb9\xfe\x1b\x6b\xcc\xe2\xe3\x41\x3a\x3e\xb8\xce\x2c\xfe\x47\xcc\xfe\x57\x7d\xaf\x59\xfc\x01\xf5\xfe\xbd\xf6\xe7\xc6\x62\xad\xfa\xd3\x0d\xfd\x73\x18\xfd\xf3\x9b\x10\x77\xff\xac\x37\xd3\xbf\xc6\xac\x1f\xfd\xf7\x99\xc5\x7f\xca\x5c\xff\x85\x0d\x66\xf1\xaf\x31\xfa\x83\xf7\x9b\xc5\xff\x9c\xd1\x1f\xde\x68\x16\xff\x24\xa3\x7f\xa3\xc1\x2c\xfe\x6f\x4c\xfe\x83\x9b\xcd\xe2\x7f\xcb\xdc\xbf\xd5\x5b\xcc\xe2\xa7\x32\xf3\x77\xed\x56\xb3\xf8\x2f\x19\xfd\xa6\x6d\x66\xf1\x53\x98\xf3\x5b\xfb\x76\xda\x5f\xbf\x7f\xdf\x2a\xa7\xe3\xe3\x4c\x3c\x3a\xff\x84\xe8\xf9\x93\x52\xf1\xd7\xb5\x06\xfd\xfc\x3b\x8b\x7b\xff\x49\x9d\x7f\x1b\x54\xbc\x3c\xff\x3e\x46\x9c\x7f\x77\x55\x62\x6d\x59\x9a\xd5\x9f\x04\x2d\x56\xef\x43\xca\x31\x3e\xe8\x89\xcf\x7f\xdf\xc8\x3f\x02\x00\x00\xff\xff\x38\x06\xcd\x7e\x00\x8b\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 35584, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

