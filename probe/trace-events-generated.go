// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x7b\x6c\x54\xc7\xf5\xc7\x67\xfd\x7e\x40\x30\x10\x82\x09\xf0\xc3\x04\x08\x18\x83\xed\xb5\x0d\xb6\x43\x88\x8d\x1d\xc0\x80\x01\x63\x0c\x18\x30\x59\x2f\xeb\x6b\xbc\xf1\x6b\x7f\xbb\x1b\x0c\x2d\x52\x5c\x09\x10\x55\x9b\xc6\x6d\x88\x84\xd4\x56\x72\x49\x25\x50\x8a\x22\x4b\x69\x14\x54\x51\xc5\x8d\x22\x35\x6d\x91\xea\xb6\x89\x94\x34\x52\x6b\xa9\x54\x22\x55\x2b\xb9\x55\x45\x51\x4a\xe3\x6a\xce\xce\xe2\xeb\x39\xe7\xec\x9d\x3f\x2a\x35\x52\x67\xa4\x64\x7a\x3e\x73\xce\x7c\xe7\x9e\x3b\xaf\xb5\xb7\xce\x8b\xdb\x9b\x77\xa4\xf9\x7c\x22\x59\x7c\xe2\x1f\x62\xc6\x9a\x29\x97\xba\x66\xfe\x77\xbd\xfa\xf7\xff\x0b\x9f\x78\xe7\xb1\x04\xbb\x20\x84\x78\x44\x08\x31\x24\x84\x28\x12\x42\x84\xf2\x1e\x4c\x4b\xfe\xce\xd5\x44\x7b\x76\x9a\x10\x0f\xa6\xa7\xa7\x0b\xb5\xce\x2f\x80\xa6\x10\x87\x44\x1e\xd8\xc1\xd7\x54\x5c\x30\xd1\x5e\x98\x86\xfd\xe7\xa4\x68\x7f\x3b\x7d\xb6\xdf\xdb\x8a\xbf\xaa\x6a\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\xde\x2f\xc2\x78\x33\x5c\xff\x24\xfe\x25\x84\xec\x22\x1e\x0d\x86\x9c\x3e\xa7\x3b\x2e\xfe\x37\x8b\x4f\xa5\x23\x47\x1a\xc3\x09\x66\xf3\x32\x93\x17\xdf\xc3\xdf\xd3\xd8\x22\x4b\xba\x7b\x1d\x0d\xff\xb7\x47\xf3\xc5\x29\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xd9\xd9\xd2\x2c\x3e\x9f\x9e\x9e\x2e\x50\xb6\xef\x4b\xad\x22\xe7\x5c\xbe\x6f\xa9\x10\x42\xb2\x42\xc5\xc7\x54\x2d\xd9\x06\x82\xd5\x13\xac\x8d\x60\x3d\x04\x3b\x47\xb0\x11\x82\x7d\x9f\x60\x37\x09\x76\x9b\x60\x93\x04\xfb\x3b\xc1\x72\x7c\x98\x2d\x23\x58\x39\xc1\x9e\x25\x58\x3b\xc1\xfa\x08\x36\x4c\xb0\xcb\x04\xbb\x4e\xb0\x5b\x04\x9b\x20\xd8\x1d\x82\xdd\x27\xd8\x9c\x34\xcc\x8a\x08\x56\x45\xb0\x26\x82\x75\x10\x2c\x42\xb0\xf3\x04\xbb\xa2\xb1\x47\x85\x10\x37\x34\x96\xaa\xbc\x99\x2f\x60\xf5\x8f\x6a\xfc\xe7\xc0\x17\x23\xfe\x03\xe0\x4b\x10\xff\x3a\xf0\xa5\x88\xf7\x03\x5f\x8e\xf8\x3e\xe0\x2b\x10\xaf\x06\xbe\x12\xf1\x22\xe0\xab\x10\xcf\x05\xbe\x06\xf1\xbf\xc1\xd7\x92\xd7\x22\xfe\x09\xf0\x62\xc4\x2f\x43\x3f\x99\x88\xbf\x0b\xbc\x04\xf1\xd7\x80\x6f\x44\xfc\x3c\xf0\x32\xc4\x1d\xe0\x7e\xc4\x77\x00\xaf\x44\xbc\x0c\xf8\x26\xc4\x0b\x81\x57\x23\xee\x03\x5e\x8b\xf8\x9f\xe0\x79\xb7\x20\xfe\x1b\xe0\x5b\x11\x7f\x01\xfa\xc9\x46\xfc\x47\xc0\xeb\x10\xff\x36\xf0\x6d\x88\x9f\x03\xde\x88\xf8\x09\xe0\xdb\x11\x3f\x0c\x3c\x17\xf1\x3a\xe0\xf9\x88\xaf\x03\x3e\x17\xf1\xf9\xc0\xe7\x21\xfe\x19\x3c\xef\x7c\xc4\xff\x00\x7c\x21\xe2\xb7\x81\x2f\x42\x5c\xc0\x6a\x49\x27\xa8\xe4\x99\x0c\xcf\x66\x78\x2e\xc3\xf3\x19\x3e\x97\xe1\xf3\x18\x3e\x9f\xe1\x0b\x19\xbe\x88\xe1\x8b\x19\xbe\x84\xe1\x4b\x19\xbe\x9c\xe1\x2b\x18\xbe\x92\xe1\xab\x18\xbe\x86\xe1\x6b\x19\x5e\xcc\xf0\x12\x86\x6f\x64\x78\x19\xc3\xfd\x0c\xaf\x64\xf8\x26\x86\x57\x33\xbc\x96\xe1\x5b\x18\xbe\x95\xe1\x75\x0c\xdf\xc6\xf0\x46\x86\x6f\x47\xec\x42\xae\x3c\xa7\xfa\x10\xff\x5e\xb6\xe4\xfd\x88\xdf\xc8\x90\x7c\x27\xe2\x07\xb2\x24\x7f\x0e\xf1\xe3\x69\x92\x07\x10\xff\x6e\xa6\xe4\x9d\x88\x7f\xcd\x27\x79\x10\xf1\x22\xe8\xbf\x19\xf1\x27\xa0\xff\xbd\x88\xd7\x80\xff\x31\xc4\x9f\x01\xff\xe3\x78\xfc\x30\x9e\x0e\xc4\x2b\x61\x3c\x27\x10\x3f\x0f\xfe\x87\x11\x1f\x00\xff\x23\x88\x6f\x06\xff\x76\xc4\x1f\x05\xff\xa3\x88\xdf\x84\x3c\x77\x23\x7e\x11\xee\x15\xa7\x10\xef\x83\xfe\x5b\x11\x6f\x85\xfe\x0f\x22\xbe\x0c\xfc\xdb\x10\xbf\x07\xfd\x1f\x42\xfc\x2d\xf0\xdf\x8d\xf8\x35\xe8\x7f\x0f\xe2\x61\xc8\xff\x3e\xc4\x87\x20\xff\xfb\x11\xcf\x00\xff\xe7\x11\x4f\x03\xff\x5e\xc4\xef\xc0\x78\x7a\x10\xff\x1d\x8c\x27\x8c\xf8\x3f\x21\x9f\x27\x11\xff\x15\x3c\x6f\x08\xf1\xdf\x82\x7f\x17\xe2\x37\xc0\xdf\x41\xfc\x36\x8c\xa7\x05\xf1\x77\x61\x3c\x07\x10\x5f\x90\x27\x39\xde\xf7\x4a\x61\xdd\xe1\xfd\xb9\x11\xd6\x29\x3e\x47\xde\x02\x8e\xf7\xc3\x0e\x18\x3f\xde\xf7\x3e\x85\x3c\xe3\xfd\xfc\x5e\xba\xe4\x78\xdf\x2e\x86\xe7\xc5\xfb\xd5\x35\xe8\x07\x9f\x53\xaf\x40\x3f\xf8\x3c\xfa\x09\x3c\x17\x3e\x37\xff\x98\x23\x39\xde\xaf\x86\x80\xe3\x7d\x6f\x35\xf4\x8f\xf7\xe7\x37\x60\x9e\xe0\x7d\x78\x18\xf2\x4c\xdc\x07\xa0\x7f\x7c\xee\x7f\x06\xf9\xc4\xe7\xce\x57\x61\xfc\xf8\x7c\x2c\x01\x7f\x7c\x8e\x7f\x07\x38\x3e\x8f\xb6\xc1\x7b\xc1\xe7\xce\x27\xf0\x5c\xf8\x7c\x8c\x80\x2e\x3e\x67\xb3\xe1\xbd\xe0\xf3\xe2\x65\x78\x2f\xf8\x9e\x70\x16\xfa\xc7\xf7\x81\xd7\xa1\x7f\x7c\x6f\xf9\x19\xe4\x07\x9f\x17\x47\x80\xe3\x73\x27\x1d\xfa\xc7\xe7\xe3\x4b\xf0\x5e\xf0\x39\xb8\x00\xfa\xc1\xf7\xab\x3e\x78\x5f\xf8\x9e\x76\x14\x78\x13\xe2\xc3\xf0\xbc\xbb\x10\x2f\x57\xb5\xfc\x78\xf8\x92\x10\x0f\x4f\x1a\x69\x3f\xe7\xfa\x11\x4a\xd2\x4e\xe5\x1f\xd0\xfc\x03\x1e\xfe\x3d\x9a\x7f\x8f\x87\x7f\x58\xf3\x0f\x7b\xf8\x77\x68\xfe\x1d\x1e\xfe\x27\x34\xff\x13\x1e\xfe\xcd\x9a\x7f\xb3\x87\xff\x5e\xcd\x7f\xaf\x87\x7f\xbb\xe6\xdf\xee\xe1\x7f\x54\xf3\x3f\xea\xe1\x7f\x4c\xf3\x3f\xe6\xe1\x7f\x5c\xf3\x3f\xee\xe1\xbf\x5b\xf3\xdf\xed\xe1\xbf\x47\xf3\xdf\xe3\xe1\xdf\xaa\xf9\xb7\x7a\xf8\x1f\xd4\xfc\x0f\x7a\xf8\xb7\x69\xfe\x6d\x1e\xfe\x87\x34\xff\x43\x1e\xfe\x4d\x9a\x7f\x93\x87\xff\x2e\xcd\x7f\x97\x87\xff\x3e\xcd\x7f\x9f\x87\xff\x7e\xcd\x7f\xbf\x87\x7f\x8b\xe6\xdf\xe2\xe1\x7f\x40\xf3\x3f\xe0\xe1\xdf\xa5\xf9\x77\x79\xf8\x3b\x9a\xbf\xe3\xe1\xdf\xad\xf9\x77\x7b\xf8\x9f\xd2\xfc\x4f\x79\xf8\x1f\xd6\xfc\x0f\x7b\xf8\x1f\xd1\xfc\x8f\x78\xf8\x9f\xd4\xfc\x4f\x7a\xf8\x87\x34\xff\x90\x87\x7f\xa7\xe6\xdf\xe9\xe1\x1f\xd4\xfc\xa5\xbd\x4c\xd9\x79\xf0\x53\xaf\x99\x78\x69\xaf\x16\x42\x3c\xeb\xb2\xd7\xa8\x3d\x2e\x69\x3f\x29\xcf\x39\x97\xbd\xd6\xd5\xbf\xb4\xd7\x09\x21\x2e\xbb\x6c\x79\x1b\xb9\xee\xb2\xd7\x0b\x21\x6e\xb9\x6c\x79\xfb\x9b\x70\xd9\x1b\xe4\xfd\xd8\x65\xcb\x5b\xc8\x7d\x97\x5d\x2a\x84\x98\xe3\x9b\xb1\xe5\x2d\xb1\xc8\x65\xcb\x67\xa9\x72\xd9\xf2\xb6\xd2\xe4\xb2\x2b\xe4\x99\xe3\xb2\xe5\x6d\x2c\xe2\xb2\xab\xe4\xe7\x23\x97\x2d\x6f\x05\x57\x5c\xf6\x66\x79\x8f\x76\xd9\xf2\xd6\x36\xee\xb2\x6b\x84\x10\x1f\xb8\x6c\x79\x7b\xb8\xeb\xb2\x9f\x12\x42\x3c\x70\xd9\xf2\x76\x5a\x90\x36\x63\x3f\x2d\xdf\x81\xcb\x96\xb7\xa4\x1a\x97\xfd\x8c\x3c\xd3\x5c\xb6\xbc\x65\x76\xba\xec\x7a\x21\x44\xdc\x65\xcb\xdb\xce\x25\x97\xdd\x20\xef\x77\x2e\x5b\xde\x5e\xc7\x5c\x36\xbc\xfb\xd2\xb8\x73\x26\x2e\x7a\xa3\x4e\x3c\x12\x1d\x3c\xe9\x04\x02\x3d\xc1\x81\xae\x3e\x27\x10\x1e\x70\xe2\x81\x50\xac\x37\x10\x0c\x85\x9c\x48\x5c\xf4\xa6\x6e\x2e\x8d\x3a\x7d\x0f\x3b\x29\x23\x5b\xe9\xa6\xfe\x60\x24\x56\x46\x77\x1a\x88\x44\x07\x4f\xc5\x02\x51\x67\xb6\x57\x3c\x14\x09\x9c\xde\x1c\x08\x0d\x0e\x0c\x38\xa1\x94\x4e\x55\x1e\x4e\xfd\xbd\x5d\xe1\x68\x90\x6b\xed\x0e\xf5\x0c\x0e\x0d\xa4\x6a\xee\x1f\xec\x62\x9b\xa1\xef\x94\x3d\x33\x8d\xa9\xda\x06\x23\x0e\xd7\x34\x14\x0d\xc7\x9d\x14\xc9\x88\x39\xf1\x40\x2c\x1e\x4c\xe9\x13\xea\x1b\x8c\x71\xed\xa9\xda\x12\xa9\x60\x9f\x87\x6f\x8b\x3a\x41\x77\x13\x9e\x85\xb3\xdf\xb5\x3e\x09\xb5\xd6\xd9\x73\x90\x6a\x24\x5b\x18\xd5\xaa\x94\xaa\x55\xa9\x54\xab\x58\xd5\xaa\x14\xaa\x6a\x36\xea\x72\x49\x3c\x5b\xe7\xe0\xd9\x83\xb3\x5b\x30\xc6\x0a\xc9\x19\xad\x4b\x3c\xe4\x58\x63\x76\x13\xc1\x49\x15\x58\x18\x84\x4a\x82\x93\x2a\xae\x26\x82\xc3\xa4\x71\x4e\x3b\x03\xf1\x98\xf7\x8e\xe1\xb9\x5b\x78\xee\x14\xfc\x2e\x91\x62\x87\x48\xb1\x3b\x70\x3b\x03\xbb\x2b\x70\x3b\x02\xb3\x1b\x70\x3b\x81\xd7\x2e\x90\x6a\x07\xe0\x56\x3f\xbb\xf2\xb9\x55\xcf\xac\xf8\x04\x7e\x61\x20\x1e\x0d\x86\x7a\x9d\xae\x40\x24\xdc\x15\xe3\x56\x05\xb9\x26\xb8\x15\x41\xae\x07\x7a\xca\xb3\x13\x9e\x9e\xee\x7a\x27\x5c\x1f\x64\x17\xaa\x07\x6a\xb9\x0c\x0d\x52\x0d\x09\x1e\x38\xed\x44\x63\x61\xd2\x41\xbe\x7f\x7d\x48\xc0\xf0\x88\x66\xb0\xc6\x92\xe1\xb1\xb3\xb1\xc4\xc4\x21\x74\x12\x1c\x77\xea\xe2\x3a\xa4\xf7\xd4\x87\xb3\x8f\xda\x52\x67\x1a\xf1\x8e\xaa\xb5\x51\x0d\xb4\x22\xcc\x5b\x4a\x2d\xd1\x80\x95\x5c\x5c\x87\xc4\x1b\xa2\x7a\xa7\x7a\x86\xf7\xaf\xf7\x3c\x03\x03\x7d\xe1\x90\x33\xa0\x5a\x4b\x9d\x9e\x40\x77\x34\xd8\x4f\x09\x26\x96\x1b\xbd\xb1\xb2\xdb\x2a\xbd\xa9\x92\x13\x8e\xe8\x9c\xeb\x9b\xec\x3a\x01\x61\x61\xcb\x35\x1e\x0d\xf6\x07\xc2\x5d\x81\x88\x13\x95\xab\xdb\xad\x28\xa7\x9b\xdc\x0a\x66\xcd\x3f\x00\x58\x69\x06\xeb\x2c\x16\x8f\xc6\x83\x27\x45\x69\xec\x6c\xbf\xac\x9b\x1b\x1a\x6a\x03\x15\xb2\xaa\x50\xb5\x5f\xd5\x35\x0a\xab\xda\xaf\xea\x6a\x85\x55\xed\x57\xf5\x66\x85\x55\xed\x57\xf5\x26\x85\x55\xed\x57\x75\x95\xc2\xaa\xf6\xab\xba\x52\x55\xaa\xae\x50\xb5\x3f\x69\xab\x66\x55\x57\xa8\xda\x9f\xac\x55\xb3\xaa\x2b\x54\xed\x57\x75\xb9\x6a\x56\x75\x85\xaa\xfd\xb2\xfe\xcf\x94\x5b\x79\x82\xfc\xed\xf4\x98\xfa\x80\xf8\x6b\xed\x47\xe4\x3e\x81\x6d\xf9\x4f\x96\xc6\xb9\xbf\xa1\x95\xa1\xd9\x37\xf2\x52\xc7\xeb\xdf\x49\xc9\xd1\xec\xeb\x79\x82\xfc\xad\x78\xb9\xfa\xd5\x47\xf2\x73\x70\x44\x7d\x67\x2d\x19\x9f\xfc\x7e\xd6\xab\x8c\xfe\x94\xa1\xfe\x37\x19\xfd\x4e\x42\x3f\x93\xd0\xdf\x91\x43\xeb\x8f\xfa\xcc\xf4\x1b\x72\x68\xfd\x11\x42\x3f\x9b\xd0\x2f\x65\xf4\x5b\x98\xef\x04\xe9\xfa\xeb\x19\xfd\x71\x42\x3f\x97\xd0\x9f\xca\xa6\xf5\x93\x93\xd2\x4b\xff\xcf\xd9\xb4\xfe\x14\xa1\x9f\x4f\xe8\x7f\xcc\xe8\x8f\x19\xea\x7f\xc8\xe8\x17\x1d\xc0\xfa\x73\x09\xfd\x78\x2e\xad\xdf\x99\x61\xa6\x1f\xc9\xa5\xf5\x5b\x08\xfd\x79\x84\x7e\x07\xa3\x5f\x90\x69\xa6\xdf\xce\xe8\x0f\x13\xfa\xf3\x09\xfd\x8f\xb2\x68\xfd\x71\x43\xfd\x0f\xb2\x68\xfd\x31\x42\x7f\x21\xa1\x3f\xce\xe8\x47\xb2\xcc\xf4\x6f\x31\xfa\x93\x84\xfe\x22\x42\xff\xfd\x74\x5a\xbf\x28\xdb\x4c\xff\xbd\x74\x5a\xbf\xa0\x15\xeb\x2f\x26\xf4\xdf\x60\xf4\x27\x0c\xf5\x5f\x67\xf4\xeb\x09\xfd\x25\x84\x7e\x80\x59\x7f\xc3\x39\x66\xfa\xc7\x99\xf5\x17\x21\xf4\x97\x12\xfa\x3b\x19\xfd\xf2\x5c\x33\xfd\x46\x46\x7f\x94\xd0\x5f\x4e\xe8\x2f\x63\xf4\x27\x0d\xf5\x0b\x19\xfd\x09\x42\x7f\x05\xa1\x9f\xce\xe8\x8f\xe4\x99\xe9\x4f\x33\xf3\x3f\xf9\x15\x0f\xb7\xfe\x4a\x42\x7f\x63\x06\x73\xfe\xe7\x9b\xe9\x17\x67\x30\xe7\x3f\xa1\xbf\x8a\xd0\x5f\xc0\xe8\x4f\x19\xea\x3f\xc2\xe8\x77\x12\xfa\x6b\x08\xfd\x46\xe6\xfe\x31\x3a\xc7\x4c\xbf\x8e\xb9\x7f\x8c\x10\xfa\x6b\x09\xfd\x12\x46\xbf\x65\xae\x99\xfe\x5a\x46\x7f\x9c\xd0\x2f\x26\xf4\xef\x32\xe7\x0f\xfc\x91\x61\x03\xfd\x3b\xcc\xf9\x33\x45\xe8\x97\x10\xfa\xbf\x64\xf4\xc7\x0c\xf5\x7f\xc1\xe8\x17\xb5\x61\xfd\x8d\x84\xfe\x2b\xcc\xfc\xeb\x9c\x67\xa6\xff\x32\x33\xff\x5a\x08\xfd\x32\x42\xff\x0c\xa3\x5f\x50\x60\xa6\x1f\x67\xf4\x87\x09\x7d\x3f\xa1\x1f\x62\xce\x9f\x71\x43\xfd\x00\x73\xfe\x8c\x11\xfa\x95\xd4\xfd\x9b\xd1\x8f\xcc\x37\xd3\x6f\x60\xf4\x27\x09\xfd\x4d\x84\xfe\x5f\xd2\x98\xf3\x7f\x81\x99\xfe\xa7\x69\xcc\xf9\x7f\x08\xeb\x57\x13\xfa\x13\x8c\xfe\x84\xa1\xfe\x6d\x46\xbf\x9e\xd0\xaf\x25\xf4\x9f\x67\x3e\x3f\x0e\x2f\x34\xd3\xef\x16\xcc\xf9\x4f\xe8\x6f\x21\xf4\x9b\x19\xfd\xf2\x47\xcd\xf4\x9b\x18\xfd\x51\x42\x7f\x2b\xa1\xff\x43\xe6\xf3\xd7\xa4\xa1\xfe\x18\xf3\xf9\x6b\x82\xd0\xaf\x23\xf4\xaf\x30\xfa\x23\x8b\xcc\xf4\x2f\x33\xfa\xc9\xaf\xa2\xba\xf5\xb7\x11\xfa\x8f\x33\xfb\x6f\xfd\x63\x66\xfa\x8f\x31\xfb\x6f\x39\xa1\xdf\x48\xe8\xa7\x31\xfa\x53\x86\xfa\x9f\x33\xcf\xdf\x49\xe8\x6f\x27\xf4\xaf\xa9\xfd\x57\xff\x19\xcc\xa8\xfa\xca\xa2\xfe\x77\xf4\xf5\x9f\x9f\xb4\xe5\xd1\xf1\x37\x0b\xcd\xe2\xbf\x9c\x45\xc7\x4f\x2c\x31\x8b\x1f\xcb\xa4\xe3\xef\x3e\x6e\x16\x7f\xd5\x47\xc7\x27\xbf\xd0\xe0\x15\xbf\x94\x19\x7f\xe1\x72\xb3\xf8\xe5\x69\x74\x7c\xf9\xff\x99\xc5\x77\x31\xfa\x4d\x2b\xcc\xe2\xa3\x8c\x7e\x67\x91\x59\xfc\x4f\x99\xfc\x9f\x59\x69\x16\xff\x63\x26\xff\x23\x4f\x98\xc5\x9f\x62\xf4\xaf\xaf\x32\x8b\xdf\xcb\xe8\x8f\xaf\x36\x8b\x5f\xcc\xe8\x7f\xb4\xc6\x2c\xfe\xaf\x82\x8e\x9f\x7a\xd2\x2c\xfe\x45\x46\x3f\x67\x9d\x59\x7c\x98\x79\xfe\xa2\x62\xb3\x78\x3f\xa3\x5f\xb3\xde\x2c\x7e\x1e\xa3\xdf\x52\x62\x16\x5f\xc9\xcc\xff\x9e\x0d\x66\xf1\xb5\xcc\xfc\x1f\xde\x68\x16\xdf\xcc\x3c\xff\x95\x52\xb3\xf8\x52\xe6\xf9\xc7\xca\x0c\xf5\x99\xe7\x7f\xbf\xdc\x2c\xfe\x30\xf3\xfc\x93\x7e\xb3\xf8\x2b\xcc\xf3\xdf\xaf\x30\x8b\xbf\xc8\x3c\x7f\x41\x95\x59\xfc\x3d\xe6\xfc\x5a\xb7\xc9\x2c\xfe\x36\xb3\xfe\xea\x37\x9b\xc5\x7f\xc8\xe8\xb7\x57\x9b\xc5\x5f\x63\xf4\x23\x35\x66\xf1\x6f\x32\xfa\x97\x6a\xcd\xe2\xbf\xc2\xe8\x8f\x3e\x65\x16\xff\x7b\xe6\xfd\xdf\xdc\x62\x16\xff\x31\xf3\xfe\x27\x9e\x36\x8b\x9f\xe6\xce\xff\xad\x66\xf1\xff\xe2\xce\xff\x3a\xb3\xf8\x8b\xb9\xcc\xf9\x5f\x4f\xfb\xeb\xbf\xbf\xba\x9a\x4d\xc7\x2f\x63\xe2\x75\xfb\x5b\x4a\x5f\xfb\xcf\x13\x89\x22\x15\x3f\xae\x35\xe8\xf7\xc7\x6f\x30\xf7\xd7\x11\x75\x7f\x4c\xfe\xff\xc4\xe5\xfd\x71\x80\xb8\x3f\xbe\x97\x87\xb5\x65\x99\x6c\x48\xd4\xc9\x9f\xe3\xf8\xb4\xfb\x67\xf2\xef\x10\xfc\x3b\x00\x00\xff\xff\x33\xd2\x7f\x4a\xc8\x80\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 32968, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

