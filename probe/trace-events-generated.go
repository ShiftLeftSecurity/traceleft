// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x0b\x6c\x5c\xc5\xd5\xc7\x67\x6d\x27\x5e\xaf\xf3\x70\x48\x42\xde\x5f\x0c\x21\xe4\x45\x12\xaf\xed\xbc\x08\x21\xce\x3b\xf0\x99\x2f\x26\x4f\x93\xd7\xf5\x66\xbd\x8e\x1d\xaf\x77\x97\xdd\x05\xc7\x9f\xf9\xf4\x99\x16\x50\x2a\x84\xb0\x1a\xa8\x22\x54\xa4\x84\x50\x91\x56\x11\x32\xad\x20\x41\xa5\x8d\x55\x21\x35\xad\x52\x64\x24\xaa\xba\x42\x2a\x56\x8b\x44\x90\xfa\x48\x55\x04\x91\x1a\xd8\x6a\xce\x9d\xf5\x5e\xcf\x39\x67\xef\xa8\xaa\x54\xa4\xce\x48\x30\x3e\xbf\x39\x67\xfe\x73\xcf\xde\x79\x78\xf7\x7a\xf3\xff\xdb\x1a\xb7\x97\x04\x02\x22\x5f\x02\xe2\x0b\x51\xb0\x3c\xa5\xab\xf0\x63\x83\xfa\xff\x49\x11\x10\x57\x6e\x77\xd9\xd3\x42\x88\x49\x42\x88\xde\xd0\xcd\x9c\xb4\xbb\x85\x10\xd5\x42\x88\x68\xe8\x33\xb0\x7b\x22\xed\xe0\xd7\x73\x2c\x05\x75\xef\xd2\x11\xe0\xbd\xb3\xaf\x43\x7d\xe5\x15\xb7\x9f\xf2\x12\x21\x3e\xcb\xe5\x72\x33\xb5\x41\x3c\x0d\x63\x13\x62\xba\x08\x81\x1d\x51\xed\xd3\x03\x41\xa1\xc7\xdf\xcc\xe5\x72\x57\xce\x2b\xbb\x54\x88\x11\xa2\xbf\x4b\x65\x85\x7e\x4b\xa4\xad\xf8\x8b\xaa\xe6\xae\x4b\xda\x52\xf1\x4a\xb9\x20\x75\xb9\x71\x5f\xa9\x50\xe3\xad\xd8\xe3\xc6\x5d\x50\x71\x41\x3a\xee\xca\x37\x0a\xf1\xa5\xd2\x3e\xa7\xfc\x03\x42\x5c\xcf\xe5\x72\x97\x4a\x84\xa8\x92\xfc\x74\xc1\x4f\x5e\xd2\x25\xa5\xd3\xfb\xd2\x90\x9b\xf7\xf3\x37\x72\xf9\x3c\x54\x6b\xfd\x8c\xa8\x7e\x82\x9e\xf8\x9e\xf3\x23\xa3\xfe\x0d\x9a\xff\xb0\x8f\xff\x62\xcd\x7f\x88\xf4\x1f\x1a\xf5\xaf\xd2\xfc\xaf\x29\xff\x32\x8f\x7f\xb1\xbc\x40\x5e\x83\x05\x7b\x1c\xbc\x4e\x0d\xd0\xff\xa5\xfc\xfd\x11\x74\x7f\xe8\x79\x52\xe5\x65\xf6\x4e\x68\x8f\x9c\xbb\xa5\xee\xbf\x26\xb7\x7e\xa9\x79\x34\x2e\x1e\x97\xbc\x1d\x6c\xa9\xdf\xd6\xea\x74\xc8\x9f\x13\x99\x6c\xa4\x77\x76\x8b\xf2\x3f\xa3\xea\x7e\x55\x9f\x52\x75\x9f\xaa\x4f\xaa\x3a\xa5\xea\xb3\xee\xeb\x71\xee\xba\xd2\xbd\xa0\xec\x61\x65\x0f\xa8\x71\x5d\x73\xe7\xc3\x6d\xee\x78\xbb\x4b\x84\x98\x06\xf3\xe5\x32\xf0\x03\x01\x21\x72\xb9\xc9\xa2\x77\xf6\x20\xd8\xc7\xcb\xdd\xd7\xb5\x5b\xd5\x57\x5e\x55\xf9\x2c\x13\xa2\x41\xce\x83\x88\x6b\xcf\x2c\xd1\xf2\x98\x71\xeb\x4b\xe3\x84\x38\xa5\xf2\x37\xcb\x60\x1e\x14\xe6\xf5\x2d\x34\x6f\x6f\x15\xb9\xff\xf7\xe5\xe7\xed\x79\x15\xc7\x8c\x4b\xfa\x4f\x28\xd2\x7e\xa9\x74\xac\x9f\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xaf\x1d\xef\xd7\x71\xbc\x65\x9e\xff\x84\xfa\x4c\x4a\x76\x91\x4d\x47\xa2\xb1\x78\xac\x2d\x2b\xfe\x33\x4b\x40\xa5\x03\x3e\xde\xe9\x73\x99\xcd\x4b\x21\x2f\x81\xd1\xcf\x61\x6d\x11\xea\x33\xd2\xd1\x79\xd4\xf7\xef\x1e\xcd\xd7\xa7\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x97\x80\xfd\x1c\x96\x2c\x01\xf5\x19\x6c\x95\x28\xe4\xc5\x16\xf7\x6f\x02\x13\x99\x6c\x24\x1e\xff\xe7\xe2\xed\x3c\xa4\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x76\x34\x35\x8a\xaf\x72\xb9\x5c\x95\xb2\x03\xff\xbb\x5b\x04\x9f\xa8\x0c\xcc\x51\xbf\x5b\xcc\x54\x7c\x58\xd5\x92\xdd\xa3\x7e\x0e\x96\x16\x58\xfe\x99\xc7\x01\x8f\xdf\x5e\x82\xb5\x13\xec\x09\x82\xf5\x13\xec\x55\x82\x5d\x26\xd8\x35\x82\x8d\x10\xec\x33\x82\xa9\xaf\x25\x19\xc3\xe6\x12\xac\x86\x60\x5b\x09\xd6\x4c\xb0\x38\xc1\xfa\x08\xf6\x02\xc1\x2e\x10\xec\x1d\x82\x0d\x11\xec\x63\x82\xdd\x24\xd8\x84\x12\xcc\xaa\x09\x56\x4f\xb0\x9d\x04\x3b\x4c\xb0\x14\xc1\x9e\x22\xd8\x19\x82\x5d\x24\xd8\xa0\xc6\xa6\x09\x21\x3e\xd0\x58\xb1\xd2\x55\x29\x60\x95\xb8\xaa\xf1\xec\x04\xf9\xff\x19\xe2\xac\xc6\x0f\x03\x9f\x85\xf8\x56\xe0\x73\x10\x5f\x08\x7c\x1e\xe2\xe3\x81\xcf\x47\xfc\x13\x18\xcf\x1d\x88\x5f\x05\xbe\x00\xf1\x37\x80\x2f\x44\xfc\x25\xe0\x8b\x10\xff\x26\xf0\x25\x88\xb7\x01\x1f\x27\x86\xb5\xe7\xef\x1d\xc5\x6f\x6a\xcf\xd1\xc7\x61\xfc\xcb\x50\x3f\x7b\x81\x2f\x47\xfc\x3e\xe0\x2b\x11\x9f\x07\x3c\x8c\xf8\x57\xa0\x5b\x87\xf8\x47\xc0\x57\x21\x3e\x08\x7c\x0d\xe2\xdf\x07\xbe\x0e\xf1\x6f\x03\x5f\x8f\x78\x2f\xf0\x0d\x88\x2f\x87\x71\x96\x23\xde\x0a\x7c\x23\xe2\x8d\xc0\x37\x21\x5e\x0f\x7c\x0b\xe2\xd3\x81\x6f\x43\xfc\x73\x18\xcf\x0e\xc4\x7f\x03\xfc\x01\xc4\x27\x41\x3f\x15\x88\xff\x05\xfc\x2b\x11\x1f\x02\x3e\x11\xf1\xb7\x81\x4f\x46\xfc\x15\xe0\x53\x10\x7f\x16\xf8\x54\xc4\xb3\xc0\xa7\x23\x2e\x60\xd6\x95\x12\x54\xf2\x71\x0c\x2f\x67\x78\x05\xc3\x2b\x19\x3e\x91\xe1\x93\x19\x3e\x85\xe1\x53\x19\x3e\x9d\xe1\x33\x18\x3e\x8b\xe1\x73\x18\x3e\x8f\xe1\xf3\x19\x7e\x07\xc3\x17\x30\x7c\x21\xc3\x17\x31\x7c\x09\xc3\x97\x31\x7c\x39\xc3\x57\x32\x3c\xcc\xf0\x3a\x86\xaf\x62\xf8\x1a\x86\xaf\x63\xf8\x7a\x86\x6f\x60\xf8\x46\x86\x6f\x62\xf8\x16\x86\x6f\x63\xf8\x0e\x86\x3f\x80\x58\x55\x48\xee\x8f\x19\xc4\xdf\x2c\x97\x1c\xbf\x7b\x7e\xb1\x4c\xf2\xff\x46\xfc\x32\xf0\xe3\x88\x3f\x1a\x94\xbc\x0d\xf1\xd8\x78\xc9\x8f\x21\x7e\x08\xbe\x1f\x2f\x8a\xf8\x1b\xe3\x24\x6f\x45\xfc\xd9\x80\xe4\x31\xc4\xeb\xa1\xff\x26\xc4\xef\x84\xfe\x1f\x46\xbc\x11\xfc\x8f\x22\x7e\x3f\xf8\x3b\x78\xfc\x30\x9e\x16\xc4\xeb\x60\x3c\x11\xc4\xcf\x80\xff\x41\xc4\x13\xe0\x7f\x08\xf1\x07\xc1\xff\x30\xe2\xd3\xc0\xff\x08\xe2\xd7\x20\xff\x5d\x88\x3f\x03\xe7\x9f\x04\xe2\x7d\xd0\xff\x7e\xc4\x77\x43\xff\x07\x10\xaf\x01\xff\x66\xc4\x3f\x87\xfe\x1f\x41\xfc\x17\xe0\xff\x3f\x88\xbf\x06\xfd\xef\x42\xfc\xff\x20\xff\xbb\x11\xef\x86\xfc\xef\x41\x7c\x26\xf8\x3f\x8a\x78\x09\xf8\xa7\x11\xbf\x09\xe3\x49\x22\xfe\x3b\x18\x4f\x0a\xf1\xc9\xe0\xdf\x81\xf8\xfb\x70\xbd\x27\x10\xff\x33\xe4\xbf\x13\xf1\x8b\xe0\x8f\x3f\x6c\x18\x81\xfe\xf7\x22\xfe\x33\x18\xcf\x3e\xc4\x97\xc2\x3c\xc2\xfb\xe0\xcb\x30\x7f\xf1\xfa\xb9\x19\xe6\x2f\x5e\xe7\xdf\xab\x90\x1c\xef\x47\x0d\xd0\x0f\x5e\x57\x0f\xc3\x75\xe1\xf5\xf3\x4b\xc8\x3f\xde\x17\x3e\x87\xef\x87\xc4\xeb\xff\x12\xc8\x03\x5e\xf7\x7e\x0c\xfd\xe0\xfd\xee\x34\xf4\x83\xf7\xb5\x5f\xc3\x75\xe1\xfd\x37\x05\xd7\x85\xd7\xbd\x12\xe0\x78\xfd\xbc\x0b\xfa\xc7\xeb\xfc\xeb\x70\xff\xe0\xf5\xbc\xb2\x52\x72\x7c\xae\x78\x16\x5e\x17\x7c\x7e\x98\x06\x1c\x9f\x4f\x9e\x86\x3c\xe3\x7d\xed\x65\xb8\x2e\xbc\xff\xbe\x05\xe3\xc7\xe7\x84\x45\xd0\x0f\xde\xef\x36\xc1\xeb\x85\xf7\xb5\x0f\xe1\x7a\xf1\xfe\xfb\x14\xe8\xe2\x7d\xbc\x1c\x5e\x2f\xbc\x1f\x9d\x87\xd7\x0b\x9f\x43\x7a\xa0\x7f\x7c\xde\xf8\x29\xf4\x8f\xcf\x45\x7b\xe1\xba\xf0\x7e\xf4\x7b\xc8\x1b\xde\xd7\x4a\xa1\x7f\xbc\xff\x3e\x07\xaf\x17\xde\x67\x5f\x86\x7e\xf0\xf9\xed\x0b\xc8\x1b\x3e\x07\x7e\x0c\xbc\x11\xf1\x17\xe0\x7a\x1f\x42\x3c\xbf\x12\xca\x5f\x83\xe4\x2a\x77\xc1\x63\x4b\xef\xb5\x9a\x9d\xd2\xec\x53\x81\x82\xfd\xa2\x3c\x5f\x97\x14\x6c\x39\x8a\x1a\x8f\xff\x77\x84\x18\xdd\x69\xa4\x1d\xf3\xbc\x45\x95\xb7\x8b\xf9\xb7\x69\xfe\x6d\x3e\xfe\x49\xcd\x3f\xe9\xe3\x9f\xd2\xfc\x53\x3e\xfe\x51\xcd\x3f\xea\xe3\xdf\xaa\xf9\xb7\xfa\xf8\xef\xd1\xfc\xf7\xf8\xf8\xef\xd5\xfc\xf7\xfa\xf8\x3b\x9a\xbf\xe3\xe3\xdf\xa2\xf9\xb7\xf8\xf8\x47\x34\xff\x88\x8f\xff\x31\xcd\xff\x98\x8f\xff\xc3\x9a\xff\xc3\x3e\xfe\xbb\x35\xff\xdd\x3e\xfe\x8f\x68\xfe\x8f\xf8\xf8\x1f\xd4\xfc\x0f\xfa\xf8\x1f\xd2\xfc\x0f\xf9\xf8\x1f\xd6\xfc\x0f\xfb\xf8\xef\xd2\xfc\x77\xf9\xf8\x37\x69\xfe\x4d\x3e\xfe\xfb\x34\xff\x7d\x3e\xfe\xfb\x35\xff\xfd\x3e\xfe\x07\x34\xff\x03\x3e\xfe\xcd\x9a\x7f\xb3\x8f\x7f\xa7\xe6\xdf\xe9\xe3\x1f\xd7\xfc\xe3\x3e\xfe\x5d\x9a\x7f\x97\x8f\x7f\x42\xf3\x4f\xf8\xf8\x1f\xd1\xfc\x8f\xf8\xf8\x1f\xd5\xfc\x8f\xfa\xf8\x77\x68\xfe\x1d\x3e\xfe\x27\x34\xff\x13\x3e\xfe\xc7\x35\xff\xe3\x3e\xfe\xed\x9a\xbf\xb4\xe7\x2a\x3b\x24\x84\xb8\xdb\x13\x1f\x82\x77\x03\x85\xd8\xea\xb1\x17\x7b\xf6\xbb\x90\x3a\xcb\xc5\x3d\xf6\x52\x4f\xff\x21\x78\xb7\x4f\x88\x17\x3c\xf6\x3d\x9e\xfd\x31\x04\xef\xfa\x09\xf1\x8e\xc7\x5e\x21\xf7\x3f\x8f\x2d\x4f\xa1\x1f\x7b\x6c\x39\xb6\x9b\x1e\x5b\x9e\x7a\x26\x04\x0a\x76\xad\x10\xa2\xda\x63\xcb\xd3\x6a\xbd\xc7\xae\x17\x42\xec\xf4\xd8\xf2\x74\x74\xd8\x63\xaf\x96\x7b\x96\xc7\x96\xa7\xc2\xa7\x3c\xb6\xdc\xcb\xcf\x78\x6c\x79\x0a\xb9\xe8\xb1\xef\x15\x42\x0c\x7a\x6c\x79\x7a\xfc\xc0\x63\xdf\x27\x84\xb8\xee\xb1\xe5\x69\xe5\x96\xc7\xbe\x5f\x9e\xb5\x4a\x0a\xb6\x3c\x25\xdf\xe5\xb1\x1b\xe4\x18\x3c\xb6\x3c\x95\x35\x7a\xec\xcd\xf2\xf5\xf6\xd8\xf2\xb4\x9b\xf5\xd8\xf2\xb5\x3c\xe5\xb1\xe5\xe9\xea\xbb\x1e\x7b\xbb\x10\x62\xc0\x63\xcb\x53\xf4\xbb\x1e\x7b\xa7\x10\x62\xd8\x63\xc3\xa9\x6d\x45\x36\x76\x32\x2b\x3a\xd3\xb1\x6c\x2a\x9d\x3c\x16\x73\x9c\xf6\x48\xa2\x35\x1e\x73\x3a\x12\xb1\xac\x13\xcd\x74\x3a\x91\x68\x34\x96\xca\x8a\xce\xe2\xcd\x2b\xd2\xb1\xf8\x68\x27\x2b\xc9\x56\xba\xa9\x2b\x92\xca\xac\xa4\x3b\x75\x52\xe9\xe4\xf1\x8c\x93\x8e\x8d\xf5\xca\x46\x53\xce\xe3\xab\x9d\x68\x32\x91\x88\x45\x8b\x3a\xd5\xfb\x38\x75\x75\xb6\x76\xa4\x23\x5c\x6b\x5b\xb4\x3d\xd9\x9d\x28\xd6\xdc\x95\x6c\x65\x9b\xa1\xef\xa2\x3d\x33\x8d\xc5\xda\x92\xa9\x18\xd7\xd4\x9d\xee\xc8\xc6\x8a\x24\x23\x13\xcb\x3a\x99\x6c\xa4\xa8\x4f\x34\x9e\xcc\x70\xed\xc5\xda\xdc\x54\xb0\xd7\xc3\xb7\xa5\x63\x11\x6f\x13\xbe\x0b\xc7\xbe\xd6\xfa\x4d\xa8\xb5\x8e\xbd\x07\xa9\x46\xb2\x85\x51\xad\x2f\xaa\x5a\x5f\x4c\xb5\x9e\x55\xad\x2f\xa2\xaa\xee\x46\x5d\x2e\x8f\xc7\xea\xec\xe9\xd9\x33\xb6\x05\x63\xac\x90\xbf\xa3\x75\x89\x51\x8e\x35\xc6\x36\x11\x9c\x54\x81\x89\x41\xa8\xb8\x9c\x54\xf1\x34\x11\x1c\x6e\x9a\xd8\xe3\xb1\x44\x36\xe3\xfe\xdc\xd6\xaa\x1e\xff\x74\x22\xe9\xe3\x19\xff\x55\xc4\x77\x05\xf1\x5d\x3d\xf8\x95\xa3\xc8\xaa\x51\x64\xc5\xe0\x56\x0b\x76\xa5\xe0\x56\x09\x66\x85\xe0\x56\x07\xbf\x95\xa1\xd8\xaa\xc0\xad\x08\xec\x6a\xc0\xad\x04\xcc\x2a\xe0\xe2\xc7\x12\xd9\x74\x24\xda\x19\x6b\x75\x52\x1d\xad\x19\x6e\xa6\x90\xf3\x84\x9b\x25\xe4\x1c\xa1\xa7\x01\x3b\x09\xe8\x29\xa0\x77\xc2\xf5\x41\x76\xa1\x7a\xa0\xa6\x50\x77\x92\x6a\x70\xb9\xf3\x78\x2c\x9d\xe9\x20\x1d\xe4\xeb\xaf\x0f\x09\x18\x1e\x51\x01\x6b\xcc\xd3\xab\xe7\x31\xeb\x4e\x8c\xc6\xf6\xa9\x37\x20\xea\x4e\xdc\x8e\x78\xcc\x71\x67\x32\xbc\xbc\x4e\x36\xe9\x74\x47\xb2\xd1\xf6\x51\x81\x4c\x4f\xc6\xbd\x5f\x89\xcb\x73\x39\xbe\x16\x0f\xd7\x21\xbd\xbc\x8f\xde\xf4\xd4\xea\x5e\x68\xc4\x8b\xbb\xd6\x46\x35\xd0\x8a\x30\x5d\x28\x35\xb7\x01\x2b\x79\xb8\x0e\x89\x1b\x83\xea\x9d\xea\x19\x6e\x3b\xbd\xe7\x02\x74\xe2\x1d\xd1\x58\x42\xb5\xae\x88\xb5\x3b\x6d\xe9\x48\x17\x25\xe8\xce\x72\x7a\x8d\x67\x57\x78\x7a\x7d\x27\xef\x73\xa2\x73\xae\x6f\xb2\x6b\x17\xc2\x2d\x27\x97\x96\x74\xa4\xcb\xe9\x68\x75\x52\xb1\xb4\xbc\xeb\xbc\x8a\xf2\x76\x93\x2b\xd0\x98\xfb\x0f\x00\x56\x2a\x60\x9d\x65\xb2\xe9\x6c\xe4\x98\x58\x91\xe9\xe9\x82\x3a\x2d\x17\xfa\x88\x68\xdc\xbc\x39\xec\xd4\xbb\x55\x9d\xac\x6a\xdc\x6a\x9d\x53\x2b\xab\x5a\x55\x87\x55\xbd\x56\x61\x55\x87\x55\xbd\x46\x61\x55\x87\x55\xbd\x5a\x61\x55\x87\x55\xbd\xca\xad\xea\x54\x5d\xab\xea\xb0\xaa\xeb\x55\xb3\xaa\x6b\x55\x1d\xce\x73\x55\xa9\xba\x56\xd5\xe1\xbc\xad\x9a\x55\x5d\xab\xea\x70\x9e\x87\x15\x57\x75\x58\xd5\x75\x35\x8a\xab\x3a\x2c\xeb\x7f\x45\xd9\x51\x29\xc8\xa7\x0a\xfa\xd4\x2f\xce\x4f\x4c\x18\xcb\xb5\xc7\x5d\xc0\x96\xff\x8d\xd7\x38\xf7\xdd\x7e\xfa\x9f\xe0\x1c\x0c\x16\x8f\x1f\xd6\x78\x50\xb3\xf7\x07\x05\xf9\x34\x43\x9f\xfa\xe8\xae\x5a\xd9\xdd\xea\xd9\xc6\x7c\x7c\xfe\x39\xbe\x4d\x8c\x7e\xfe\x7b\x35\x83\xa5\xc5\xf5\x37\x30\xfa\x67\x0f\x8c\xbd\x8e\x6e\xf5\xef\x7b\xe9\xfa\x6b\x2a\x69\xfd\x6a\x95\x28\xfd\x99\x2c\x5d\xbf\xae\x92\xd6\x1f\x51\xfa\x35\x1e\xfd\x72\x42\xbf\x9a\xd1\x1f\x32\xd4\x9f\xcb\xe8\x57\x35\x63\xfd\x0a\x42\xff\x7d\x26\xff\x7d\xe3\xcc\xf4\x7f\xc5\xe4\xbf\x81\xd0\xaf\x24\xf4\xdf\x66\xf4\x6b\xc6\x9b\xe9\xbf\xc9\xe8\xa7\x08\xfd\x89\x84\x7e\x19\xa3\x3f\x62\xa8\x2f\xb8\xfb\x8f\xd0\x9f\x4c\xe8\xff\xa9\x9c\xd6\xef\x2f\x37\xd3\xff\xb4\x9c\xd6\x1f\x22\xf4\xa7\x10\xfa\xb9\x0a\x66\xfe\x07\xcd\xf4\xff\x5e\x41\xeb\xe7\x3f\x8a\xf7\xea\x4f\x25\xf4\x3f\x61\xf4\x6f\x18\xea\xff\x81\xd1\xaf\x21\xf4\xa7\x13\xfa\x7f\x1c\x4f\xeb\x9f\xad\x30\xd3\xbf\x3e\x9e\xd6\x6f\x21\xf4\x67\x10\xfa\x1f\x30\xfa\x4d\x21\x33\xfd\x21\x46\xbf\x9f\xd0\x9f\x45\xe8\x5f\x2d\xa5\xf5\xf3\x1f\x25\xfb\xe9\xbf\x5b\x4a\xeb\x0f\x12\xfa\x73\x08\xfd\xd7\x19\xfd\x01\x43\xfd\x1f\x30\xfa\x37\x08\xfd\x79\x84\x7e\x86\x99\x7f\x2d\x13\xcc\xf4\x93\xcc\xfc\xab\x3e\x88\xf5\xe7\x13\xfa\x87\x18\xfd\xaa\x89\x66\xfa\x07\x18\xfd\x26\x42\xff\x0e\x42\xbf\x86\xd1\x1f\x34\xd4\xbf\x87\xd1\xef\x23\xf4\x17\x10\xfa\x33\x18\xfd\xd4\x24\x33\xfd\xa9\x8c\xfe\x00\xa1\xbf\x90\xd0\x5f\x5e\xc6\xec\xff\x93\xcd\xf4\x97\x94\x31\xfb\x3f\xa1\xbf\x88\xd0\xbf\x8d\xd1\x1f\x32\xd4\x9f\xc4\xe8\x57\x1d\xc2\xfa\x4b\x08\xfd\xf7\x42\xcc\xfe\x5f\x65\xa6\xff\xcb\x10\xb3\xff\x13\xfa\xcb\x08\xfd\xb7\x18\xfd\x9a\x29\x66\xfa\x3f\x64\xf4\x53\x84\xfe\x72\x6a\xfe\x33\xfa\x23\x86\xfa\x49\x46\xff\x2c\xa1\xbf\x92\xd0\x3f\xc8\xe8\xf7\xdf\x66\xa6\xbf\x9f\xd1\x1f\x22\xf4\xc3\x84\xfe\x69\xe6\xfe\x6b\x98\x6a\xa6\xff\x3c\x73\xff\xe5\x1f\x19\xf4\xea\xd7\x11\xfa\x27\x19\xfd\x1b\x86\xfa\x59\x46\xbf\x86\xd0\x5f\x45\xe8\x47\x99\xfd\xe7\xec\x34\x33\x7d\x87\xd9\x7f\x5a\x08\xfd\x35\x84\xfe\x76\x46\xbf\x69\xba\x99\xfe\x66\x46\xbf\x9f\xd0\x5f\x47\x9d\x3f\x4b\x98\xfd\xff\x76\x33\xfd\x4f\x4b\x98\xfd\x9f\xd0\x5f\x4f\xe8\x0f\x31\xfa\x03\x86\xfa\xd7\x18\xfd\x1b\x84\xfe\x06\x42\xff\x04\xf3\xfb\x73\xcb\x0c\x33\xfd\x36\xc1\xec\xff\x47\xb0\xfe\x46\x42\xbf\x91\xd1\xaf\x9a\x69\xa6\xbf\x93\xd1\x6f\x22\xf4\x37\x11\xfa\x1b\x99\xf3\xf7\xa0\xa1\xfe\x7a\xe6\xfc\xdd\x47\xe8\x6f\x21\xf4\x17\x30\xfa\xa9\x59\x66\xfa\xf3\x19\xfd\x01\x42\x7f\x1b\xa1\xff\x3d\x46\xbf\x7a\xb6\x99\xfe\x39\x46\x7f\x84\xd0\xdf\x41\xe8\x3f\xc7\xe8\x0f\x19\xea\x7f\x8b\xd1\xaf\x3a\x8a\xf5\x1f\x20\xf4\x5f\x53\xeb\xaf\xfe\x1e\x54\x9f\x7a\xe4\x55\xff\xf7\x4d\xf4\xf7\x8f\x3e\x0a\xd1\xf1\x67\xe6\x9a\xc5\x3f\x3f\x9e\x8e\x1f\x98\x67\x16\xff\xee\x38\x3a\xfe\xea\x7f\x99\xc5\xbf\x12\xa0\xe3\x47\xe6\x9b\xc5\xaf\x64\xc6\x7f\xb3\xda\x2c\x7e\x5e\x09\x1d\x5f\x75\xa7\x59\xfc\x49\x46\x7f\xf1\x02\xb3\xf8\x34\xa3\xdf\x70\x97\x59\xfc\x87\x4c\xfe\x9b\x17\x9a\xc5\xff\x84\xc9\x7f\xea\x6e\xb3\xf8\x5e\x46\xff\xd4\x22\xb3\xf8\x87\x18\xfd\xb3\x8b\xcd\xe2\x97\x31\xfa\x97\x97\x98\xc5\xff\x55\xd0\xf1\x43\x4b\xcd\xe2\x4f\x33\xfa\xd7\x97\x99\xc5\x77\x30\xd7\x9f\x7f\x34\xdc\x2f\x7e\x1b\xa3\x3f\x73\x85\x59\xfc\x64\x46\xbf\x66\xa5\x59\xfc\x0e\xe6\xfe\xdf\x59\x63\x16\xbf\x8e\xb9\xff\x5b\xc2\x66\xf1\x2d\xcc\xf5\x9f\xac\x35\x8b\x5f\xc1\x5c\x7f\x7f\x9d\xa1\x3e\x73\xfd\x17\xea\xcd\xe2\xf7\x33\xd7\x3f\xb8\xca\x2c\xfe\x22\x73\xfd\xc3\xab\xcd\xe2\x9f\x61\xae\xff\xc6\x1a\xb3\xf8\x78\x90\x8e\x0f\xae\x33\x8b\xff\x11\xb3\xff\x55\xdf\x6b\x16\x7f\x40\xbd\x7f\xaf\xfd\xb9\xb1\x58\xab\xfe\x74\x43\xff\x1c\x46\xff\xfc\x26\xc4\xdd\x3f\xeb\xcd\xf4\xaf\x31\xeb\x47\xff\x7d\x66\xf1\x9f\x32\xd7\x7f\x61\x83\x59\xfc\x6b\x8c\xfe\xe0\xfd\x66\xf1\x3f\x67\xf4\x87\x37\x9a\xc5\x3f\xc9\xe8\xdf\x68\x30\x8b\xff\x1b\x93\xff\xe0\x66\xb3\xf8\xdf\x32\xf7\x6f\xf5\x16\xb3\xf8\xa9\xcc\xfc\x5d\xbb\xd5\x2c\xfe\x4b\x46\xbf\x69\x9b\x59\xfc\x14\xe6\xfc\xd6\xbe\x9d\xf6\xd7\xef\xdf\xb7\xca\xe9\xf8\x38\x13\x8f\xce\x3f\x21\x7a\xfe\xa4\x54\xfc\x75\xad\x41\x3f\xff\xce\xe2\xde\x7f\x52\xe7\xdf\x06\x15\x2f\xcf\xbf\x8f\x11\xe7\xdf\x5d\x95\x58\x5b\x96\x66\xf5\x27\x41\x8b\xd5\xfb\x90\x72\x8c\x0f\x7a\xe2\xf3\xdf\x37\xf2\x8f\x00\x00\x00\xff\xff\x35\x8f\x9e\x37\x00\x8b\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 35584, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

