// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x0b\x6c\x5c\xc5\xd5\xc7\x67\x6d\x27\x5e\xaf\xf3\x70\x48\x42\x9c\xd7\x97\x40\x08\x71\x12\x92\x78\x6d\x27\x71\x08\x21\xce\xdb\xf0\x99\x26\xe4\xe9\x24\x4e\x36\x9b\xf5\x3a\x76\xbc\xf6\x2e\xbb\x0b\xb6\x6b\xaa\x86\x16\x90\x2b\x84\x88\x1a\xa8\x2c\x54\x24\x42\xa8\x70\xab\x08\x85\x56\x10\xa3\xd2\x26\xaa\x90\xea\x56\x29\x32\x12\x55\x5d\x21\x15\xab\x45\xc2\x48\x7d\x50\x15\x81\xa5\x06\xb6\x9a\x73\x67\xbd\xd7\x73\xce\xd9\x3b\xaa\x2a\x15\xa9\x33\x52\x32\x3e\xbf\x39\x67\xfe\x73\xcf\xbd\xf3\xf0\xee\xda\xfe\xe6\xae\x86\xdd\x05\x3e\x9f\xc8\x16\x9f\xf8\x5c\xe4\xac\x5c\xf1\x77\xe4\xbe\xae\x53\xff\x77\x0b\x9f\xb8\x76\xab\xc3\x9e\x10\x42\xcc\x10\x42\xf4\x06\xc6\x33\xd2\xee\x12\x42\x2c\x15\x42\x44\x02\x9f\x82\xdd\x13\x6e\x05\xbf\x9e\xd3\x09\xa8\x7b\x57\x8d\x02\xef\x5d\x30\x06\xf5\xb5\x97\x9c\x7e\x8a\x0b\x84\xf8\x34\x93\xc9\x94\x6b\x83\x78\x02\xc6\x26\xc4\x5c\x11\x00\x3b\xac\xda\xe7\xfa\xfc\x42\x8f\x1f\xcf\x64\x32\xd7\x2e\x29\xbb\x50\x88\x51\xa2\xbf\xab\x45\xb9\x7e\x0b\xa4\xad\xf8\x73\xaa\xe6\xae\x4b\xda\x52\xf1\x5a\xb1\x20\x75\xb9\x71\x5f\x2b\x51\xe3\x2d\x39\xe8\xc4\x0d\xa8\x38\x3f\x1d\x77\xed\x5b\xb9\xf8\x42\x69\x5f\x54\xfe\x3e\x21\xc6\x32\x99\xcc\xd5\x02\x21\xca\x24\xbf\x90\xf3\x93\x97\x74\x55\xe9\xf4\x3e\x3f\xec\xe4\xfd\xd2\x27\x99\x6c\x1e\x96\x6a\xfd\x8c\xaa\x7e\xfc\xae\xf8\x9e\x4b\xa3\x13\xfe\x75\x9a\xff\x88\x87\x7f\x85\xe6\x3f\x4c\xfa\x0f\x4f\xf8\x97\x69\xfe\x37\x94\x7f\x91\xcb\x3f\x5f\x5e\x20\xaf\xfe\x9c\x3d\x05\xee\x53\x2d\xf4\x7f\x35\xfb\x7c\xf8\x9d\x2f\x7a\x1e\x53\x79\x59\x50\x07\xed\xe1\x8b\x37\xd5\xf3\x57\xef\xd4\xcf\xef\x9b\x88\x8b\xc5\x24\x3f\x05\xb6\xd4\x6f\x69\x0e\xb5\xc9\xaf\x3b\x53\xe9\x70\xef\x82\x46\xe5\x7f\x5e\xd5\x7d\xaa\x3e\xa7\xea\x6e\x55\x27\x54\xdd\xaa\xea\x17\x55\xdd\xef\xdc\x97\x8b\x63\x4a\x7f\x40\xd9\x23\xca\xbe\xa2\xc6\x77\xc3\x99\x17\xb7\x38\xe3\xee\x2a\x10\x62\x0e\xcc\x9b\x41\xe0\x47\x7c\x42\x64\x32\x33\x45\xef\x82\xeb\x60\x9f\x29\x76\xee\x6f\x97\xaa\xaf\xbd\xac\xf2\x5a\x24\x44\xad\x9c\x0f\x61\xc7\x2e\x2f\xd0\xf2\x99\x72\xea\xab\x53\x84\x38\xaf\xf2\x38\xdf\x60\x3e\xe4\xe6\xf7\x4d\x34\x7f\x6f\xe6\x99\x07\x87\xb2\xf3\xf7\x92\x8a\x63\xc6\x25\xfd\xa7\xe5\x69\xbf\x5a\x38\xd9\xcf\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xd7\x8e\xf7\xab\x38\xde\x22\xd7\x3f\xa1\xde\x9b\x92\x5d\xa4\x93\xe1\x48\x34\x16\x6d\x49\x8b\xff\xcd\xe2\x53\xe9\x80\xb7\x79\xce\x39\xcc\xe6\x25\x97\x17\xdf\xc4\xfb\xb1\xb6\x08\xf5\x5e\xe9\xc4\x3c\x3a\xf7\xdf\x1e\xcd\x57\xa7\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9f\xcd\x0b\x59\x7c\xea\x3d\xd8\x32\x91\x7b\x7f\xda\x16\xe7\x67\x03\x3b\x53\xe9\x70\x2c\xf6\xef\xc5\xdb\x79\x48\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xec\xd9\xd7\x20\xbe\xcc\x64\x32\x65\xca\xf6\x7d\x7d\xbf\xf0\x3f\x5a\xea\x5b\xa8\xbe\xb7\x28\x57\x7c\x44\xd5\x92\xdd\x95\xfd\xba\x30\xc7\xb2\x9f\x79\xbc\xe2\xf2\x3b\x48\xb0\x56\x82\x3d\x4a\xb0\xf3\x04\x7b\x99\x60\x83\x04\xbb\x41\xb0\x51\x82\x7d\x4a\x30\xf5\xeb\x49\x26\xb1\x45\x04\xab\x24\xd8\x4e\x82\x35\x12\x2c\x46\xb0\x73\x04\x7b\x96\x60\x03\x04\x7b\x8b\x60\xc3\x04\xfb\x90\x60\xe3\x04\x9b\x56\x80\xd9\x52\x82\xd5\x10\xac\x9e\x60\x4d\x04\x4b\x10\xec\x71\x82\xf5\x13\xec\x32\xc1\xae\x6b\x6c\x8e\x10\xe2\x3d\x8d\xe5\x2b\x1d\xa5\x02\x56\x89\x21\x8d\xa7\xa7\xc9\xff\xe7\x89\x17\x35\xde\x04\x7c\x3e\xe2\x3b\x81\x2f\x44\x7c\x39\xf0\xc5\x88\x4f\x05\xbe\x04\xf1\x8f\x60\x3c\xb7\x21\x3e\x04\x7c\x19\xe2\xaf\x01\x5f\x8e\xf8\xf3\xc0\x57\x20\xfe\x6d\xe0\x2b\x11\x6f\x01\x3e\x45\x8c\x68\x9f\xbf\x0f\x29\x2e\x0a\x27\xf3\x18\x8c\x7f\x35\xea\xe7\x20\xf0\x35\x88\xdf\x03\x7c\x1d\xe2\x8b\x81\x07\x11\xff\x12\x74\xab\x11\xff\x00\xf8\x7a\xc4\xaf\x03\xdf\x88\xf8\x0f\x81\x6f\x42\xfc\xbb\xc0\x37\x23\xde\x0b\x7c\x0b\xe2\x6b\x60\x9c\xc5\x88\x37\x03\xdf\x8a\x78\x03\xf0\x6d\x88\xd7\x00\xdf\x81\xf8\x5c\xe0\xbb\x10\xff\x0c\xc6\xb3\x07\xf1\xdf\x01\xbf\x0f\xf1\x19\xd0\x4f\x09\xe2\x7f\x03\xff\x52\xc4\x87\x81\x4f\x47\xfc\x4d\xe0\x33\x11\x7f\x09\xf8\x2c\xc4\x9f\x02\x3e\x1b\xf1\x34\xf0\xb9\x88\x0b\x98\x75\x85\x04\x95\x7c\x0a\xc3\x8b\x19\x5e\xc2\xf0\x52\x86\x4f\x67\xf8\x4c\x86\xcf\x62\xf8\x6c\x86\xcf\x65\xf8\x3c\x86\xcf\x67\xf8\x42\x86\x2f\x66\xf8\x12\x86\xdf\xc6\xf0\x65\x0c\x5f\xce\xf0\x15\x0c\x5f\xc9\xf0\xd5\x0c\x5f\xc3\xf0\x75\x0c\x0f\x32\xbc\x9a\xe1\xeb\x19\xbe\x91\xe1\x9b\x18\xbe\x99\xe1\x5b\x18\xbe\x95\xe1\xdb\x18\xbe\x83\xe1\xbb\x18\xbe\x87\xe1\xf7\x21\x56\x16\x90\xfb\x63\x0a\xf1\xd7\x8b\x25\xc7\x3f\xad\x73\xb9\x48\xf2\xff\x47\x7c\x10\xf8\x19\xc4\x1f\xf2\x4b\xde\x82\x78\x74\xaa\xe4\xa7\x11\x3f\x0e\xbf\x27\x2f\x82\xf8\x6b\x53\x24\x6f\x46\xfc\x29\x9f\xe4\x51\xc4\x6b\xa0\xff\x7d\x88\xdf\x0e\xfd\x3f\x88\x78\x03\xf8\x9f\x44\xfc\x5e\xf0\x0f\xe1\xf1\xc3\x78\x4e\x21\x5e\x0d\xe3\x09\x23\xde\x0f\xfe\xc7\x10\xef\x04\xff\xe3\x88\xdf\x0f\xfe\x4d\x88\xcf\x01\xff\x13\x88\xdf\x80\xfc\x77\x20\xfe\x24\x9c\x7f\x3a\x11\x3f\x07\xfd\x1f\x46\x7c\x3f\xf4\x7f\x04\xf1\x4a\xf0\x6f\x44\xfc\x33\xe8\xff\x28\xe2\xbf\x02\xff\xaf\x21\xfe\x0a\xf4\xbf\x17\xf1\x6f\x40\xfe\xf7\x23\xde\x05\xf9\x3f\x80\x78\x39\xf8\x3f\x84\x78\x01\xf8\x27\x11\x1f\x87\xf1\xc4\x11\xff\x03\x8c\x27\x81\xf8\x4c\xf0\x6f\x43\xfc\x5d\xb8\xde\xb3\x88\xff\x15\xf2\xdf\x8e\xf8\x65\xf0\xc7\x6f\x36\x8c\x42\xff\x07\x11\xff\x05\x8c\xe7\x10\xe2\xab\x60\x1e\xe1\x7d\xf0\x05\x98\xbf\x78\xfd\xdc\x0e\xf3\x17\xaf\xf3\xef\x94\x48\x8e\xf7\xa3\x3a\xe8\x07\xaf\xab\x4d\x70\x5d\x78\xfd\xfc\x02\xf2\x8f\xf7\x85\xcf\xe0\xf7\x44\xe2\xf5\x7f\x25\xe4\x01\xaf\x7b\x3f\x85\x7e\xf0\x7e\x77\x01\xfa\xc1\xfb\xda\x6f\xe1\xba\xf0\xfe\x9b\x80\xeb\xc2\xeb\x5e\x01\x70\xbc\x7e\xde\x01\xfd\xe3\x75\xfe\x55\x78\x7e\xf0\x7a\x5e\x5a\x2a\x39\x3e\x57\x3c\x05\xf7\x05\x9f\x1f\xe6\x00\xc7\xe7\x93\x27\x20\xcf\x78\x5f\x7b\x01\xae\x0b\xef\xbf\x6f\xc0\xf8\xf1\x39\x61\x05\xf4\x83\xf7\xbb\x6d\x70\xbf\xf0\xbe\xf6\x3e\x5c\x2f\xde\x7f\x1f\x07\x5d\xbc\x8f\x17\xc3\xfd\xc2\xfb\xd1\x25\xb8\x5f\xf8\x1c\xd2\x03\xfd\xe3\xf3\xc6\xcf\xa1\x7f\x7c\x2e\x3a\x08\xd7\x85\xf7\xa3\x3f\x42\xde\xf0\xbe\x56\x08\xfd\xe3\xfd\xf7\x69\xb8\x5f\x78\x9f\x7d\x01\xfa\xc1\xe7\xb7\xcf\x21\x6f\xf8\x1c\xf8\x21\xf0\x06\xc4\x9f\x85\xeb\x7d\x00\xf1\xec\x4a\x28\xbf\x0d\x92\xab\xdc\x80\xcb\x96\xde\xb5\x9a\x9d\xd0\xec\x3e\x5f\xce\x7e\x4e\x08\x31\x52\x90\xb3\xe5\x28\x2a\x5d\xfe\xdf\x13\x62\x62\xa7\x91\x76\xd4\xf5\x12\x55\xd6\xce\xe7\xdf\xa2\xf9\xb7\x78\xf8\xc7\x35\xff\xb8\x87\x7f\x42\xf3\x4f\x78\xf8\x47\x34\xff\x88\x87\x7f\xb3\xe6\xdf\xec\xe1\x7f\x40\xf3\x3f\xe0\xe1\x7f\x50\xf3\x3f\xe8\xe1\x1f\xd2\xfc\x43\x1e\xfe\xa7\x34\xff\x53\x1e\xfe\x61\xcd\x3f\xec\xe1\x7f\x5a\xf3\x3f\xed\xe1\xff\xa0\xe6\xff\xa0\x87\xff\x7e\xcd\x7f\xbf\x87\xff\x51\xcd\xff\xa8\x87\xff\x31\xcd\xff\x98\x87\xff\x71\xcd\xff\xb8\x87\x7f\x93\xe6\xdf\xe4\xe1\xbf\x57\xf3\xdf\xeb\xe1\xbf\x4f\xf3\xdf\xe7\xe1\x7f\x48\xf3\x3f\xe4\xe1\x7f\x58\xf3\x3f\xec\xe1\x7f\x44\xf3\x3f\xe2\xe1\xdf\xa8\xf9\x37\x7a\xf8\xb7\x6b\xfe\xed\x1e\xfe\x31\xcd\x3f\xe6\xe1\xdf\xa1\xf9\x77\x78\xf8\x77\x6a\xfe\x9d\x1e\xfe\x27\x34\xff\x13\x1e\xfe\x27\x35\xff\x93\x1e\xfe\x6d\x9a\x7f\x9b\x87\xff\x59\xcd\xff\xac\x87\xff\x19\xcd\xff\x8c\x87\x7f\xab\xe6\x2f\xed\x45\xca\x0e\x08\x21\xee\x74\xc5\x07\xe0\xd5\x40\x21\x76\xba\xec\x0a\xd7\x7e\x17\x50\x67\xb9\x98\xcb\x5e\xe5\xea\x3f\x00\xaf\xf6\x09\xf1\xac\xcb\xbe\xcb\xb5\x3f\x06\xe0\x55\x3f\x21\xde\x72\xd9\x6b\x85\x10\xc3\x2e\x5b\x9e\x42\x3f\x74\xd9\x72\x6c\xe3\x2e\x5b\x9e\x7a\xa6\xf9\x72\x76\x95\x10\x62\xa9\xcb\x96\xa7\xd5\x1a\x97\x5d\x23\x84\xa8\x77\xd9\xf2\x74\xd4\xe4\xb2\x37\xc8\x3d\xcb\x65\xcb\x53\xe1\xe3\x2e\x5b\xee\xe5\xfd\x2e\x5b\x9e\x42\x2e\xbb\xec\xbb\x85\x10\xd7\x5d\xb6\x3c\x3d\xbe\xe7\xb2\xef\x11\x42\x8c\xb9\x6c\x79\x5a\xb9\xe9\xb2\xef\x95\x67\xad\x82\x9c\x2d\x4f\xc9\x77\xb8\xec\x3a\x39\x06\x97\x2d\x4f\x65\x0d\x2e\x7b\xbb\xbc\xdf\x2e\x5b\x9e\x76\xd3\x2e\x5b\xde\xcb\x3e\x97\x2d\x4f\x57\xdf\x77\xd9\xbb\x85\x10\x57\x5c\xb6\x3c\x45\xbf\xed\xb2\xeb\x5d\xe7\x93\x00\xbc\x9a\x28\x6f\x5a\x3a\xda\x9d\x16\xed\xc9\x68\x3a\x91\x8c\x9f\x8e\x86\x42\xad\xe1\xce\xe6\x58\x34\xd4\xd6\x19\x4d\x87\x22\xa9\xf6\x50\x38\x12\x89\x26\xd2\xa2\x3d\x7f\xf3\xda\x64\x34\x36\xd1\xc9\x3a\xb2\x95\x6e\xea\x08\x27\x52\xeb\xe8\x4e\x43\x89\x64\xfc\x4c\x2a\x94\x8c\x4e\xf6\x4a\x47\x12\xa1\x47\x36\x84\x22\xf1\xce\xce\x68\x24\xaf\x53\x8d\x87\x53\x47\x7b\x73\x5b\x32\xcc\xb5\xb6\x44\x5a\xe3\x5d\x9d\xf9\x9a\x3b\xe2\xcd\x6c\x33\xf4\x9d\xb7\x67\xa6\x31\x5f\x5b\x3c\x11\xe5\x9a\xba\x92\x6d\xe9\x68\x9e\x64\xa4\xa2\xe9\x50\x2a\x1d\xce\xeb\x13\x89\xc5\x53\x5c\x7b\xbe\x36\x27\x15\xec\xf5\xf0\x6d\xc9\x68\xd8\xdd\x84\x9f\xc2\xc9\xf7\x5a\x7f\x08\xb5\xd6\xc9\xcf\x20\xd5\x48\xb6\x30\xaa\x35\x79\x55\x6b\xf2\xa9\xd6\xb0\xaa\x35\x79\x54\xd5\xd3\xa8\xcb\x65\xf1\x64\x9d\x03\x3d\x07\x26\xb7\x60\x8c\x15\xb2\x4f\xb4\x2e\x31\xc1\xb1\xc6\xe4\x26\x82\x93\x2a\x30\x31\x08\x15\x87\x93\x2a\xae\x26\x82\xc3\x43\x13\x7d\x24\xda\x99\x4e\x39\x5f\xb7\x34\xab\x8f\x7f\x86\xc2\xc9\x33\x29\xef\x55\xc4\x73\x05\xf1\x5c\x3d\xf8\x95\x23\xcf\xaa\x91\x67\xc5\xe0\x56\x0b\x76\xa5\xe0\x56\x09\x66\x85\xe0\x56\x07\xaf\x95\x21\xdf\xaa\xc0\xad\x08\xec\x6a\xc0\xad\x04\xcc\x2a\xe0\xe0\x87\x3b\xd3\xc9\x70\xa4\x3d\xda\x1c\x4a\xb4\x35\xa7\xb8\x99\x42\xce\x13\x6e\x96\x90\x73\x84\x9e\x06\xec\x24\xa0\xa7\x80\xde\x09\xd7\x07\xd9\x85\xea\x81\x9a\x42\x5d\x71\xaa\xc1\xe1\xa1\x47\xa2\xc9\x54\x1b\xe9\x20\xef\xbf\x3e\x24\x60\x78\x44\x39\xac\x31\x57\xaf\xae\x8f\x59\xb7\x63\x34\xb9\x4f\xbd\x01\x51\x67\xe2\xb6\xc5\xa2\x21\x67\x26\xc3\xed\x0d\xa5\xe3\xa1\xae\x70\x3a\xd2\x3a\x21\x90\xea\x49\x39\xcf\x2b\x71\x79\x0e\xc7\xd7\xe2\xe2\x3a\xa4\x97\xf7\x89\x87\x9e\x5a\xdd\x73\x8d\x78\x71\xd7\xda\xa8\x06\x5a\x11\xa6\x0b\xa5\xe6\x34\x60\x25\x17\xd7\x21\xf1\x60\x50\xbd\x53\x3d\xc3\x63\xa7\xf7\x9c\x83\xa1\x58\x5b\x24\xda\xa9\x5a\xd7\x46\x5b\x43\x2d\xc9\x70\x07\x25\xe8\xcc\x72\x7a\x8d\x67\x57\x78\x7a\x7d\x27\x9f\x73\xa2\x73\xae\x6f\xb2\x6b\x07\xc2\x23\x27\x97\x96\x64\xb8\x23\xd4\xd6\x1c\x4a\x44\x93\xf2\xa9\x73\x2b\xca\xc7\x4d\xae\x40\x93\x9e\x3f\x00\x58\x29\x87\x75\x96\x4a\x27\xd3\xe1\xd3\x62\x6d\xaa\xa7\x03\xea\xa4\x5c\xe8\xc3\xa2\x61\xfb\xf6\x60\xa8\xc6\xa9\xaa\x65\x55\xe9\x54\x9b\x42\x55\xb2\xaa\x52\x75\x50\xd5\xb5\x0a\xab\x3a\xa8\xea\x8d\x0a\xab\x3a\xa8\xea\x0d\x0a\xab\x3a\xa8\xea\xf5\x4e\x55\xad\xea\x2a\x55\x07\x55\x5d\xa3\x9a\x55\x5d\xa5\xea\x60\x96\xab\x4a\xd5\x55\xaa\x0e\x66\x6d\xd5\xac\xea\x2a\x55\x07\xb3\x3c\xa8\xb8\xaa\x83\xaa\xae\xae\x54\x5c\xd5\x41\x59\xff\x27\xca\x9e\x52\xf4\x51\x15\x28\x7d\xea\x1b\xe7\x47\xa7\x4d\xe6\xda\xc7\x5d\xc0\x96\xff\xa6\x6a\x9c\xfb\xdd\x7e\xfa\x8f\xe0\x1c\xf3\xe7\x8f\x1f\xd1\xb8\x5f\xb3\x0f\xfb\x05\xf9\x69\x86\x3e\xf5\xd6\xdd\x52\x65\x77\xa9\xcf\x36\x66\xe3\xb3\x9f\xe3\xdb\xc6\xe8\x67\x7f\xaf\x66\x59\x61\x7e\xfd\x2d\x8c\xfe\xc0\x91\xc9\xd7\xd1\xa5\xfe\xce\x97\xae\xbf\xb1\x94\xd6\xaf\x50\x89\xd2\x3f\x93\xa5\xeb\x57\x97\xd2\xfa\x63\x4a\xbf\xd2\xa5\x5f\x4c\xe8\x2f\x65\xf4\x47\x0c\xf5\x17\x31\xfa\xe5\x8d\x58\xbf\x84\xd0\x7f\x97\xc9\x7f\xdf\x14\x33\xfd\xdf\x30\xf9\xaf\x27\xf4\x4b\x09\xfd\x37\x19\xfd\xda\xa9\x66\xfa\xaf\x33\xfa\xdd\x84\xfe\x74\x42\xbf\x88\xd1\x1f\x33\xd4\x17\xdc\xf3\x47\xe8\xcf\x24\xf4\xff\x52\x4c\xeb\xf7\x17\x9b\xe9\x7f\x5c\x4c\xeb\x8f\x10\xfa\xb3\x08\xfd\x4c\x09\xad\x5f\xef\x37\xd3\xff\x67\x09\xad\xef\x3f\x8a\xf5\x67\x13\xfa\x1f\x31\xfa\xe3\x86\xfa\x7f\x62\xf4\x6b\x09\xfd\xb9\x84\xfe\x9f\xa7\xd2\xfa\x03\x25\x66\xfa\xf2\x39\xa1\xf4\x5b\x09\xfd\x79\x84\xfe\x7b\x8c\x7e\x63\xc0\x4c\x7f\x98\xd1\xef\x27\xf4\xe7\x13\xfa\x43\x85\xb4\xbe\xbf\xd4\x4c\xff\xed\x42\x5a\x7f\x88\xd0\x5f\x48\xe8\xbf\xca\xe8\x0f\x1a\xea\xff\x88\xd1\x1f\x27\xf4\x17\x13\xfa\x29\x66\xfe\xb5\x4e\x33\xd3\x8f\x33\xf3\xaf\xe2\x18\xd6\x5f\x42\xe8\x1f\x67\xf4\xcb\xa7\x9b\xe9\x1f\x61\xf4\x1b\x09\xfd\xdb\x08\xfd\x4a\x46\x7f\xc8\x50\xff\x2e\x46\xbf\x8f\xd0\x5f\x46\xe8\xcf\x63\xf4\xbb\x67\x98\xe9\xcf\x66\xf4\x07\x09\xfd\xe5\x84\xfe\x9a\x22\x66\xff\x9f\x69\xa6\xbf\xb2\x88\xd9\xff\x09\xfd\x15\x84\xfe\x2d\x8c\xfe\x88\xa1\xfe\x0c\x46\xbf\xfc\x38\xd6\x5f\x49\xe8\xbf\x13\x60\xf6\xff\x32\x33\xfd\x5f\x07\x98\xfd\x9f\xd0\x5f\x4d\xe8\xbf\xc1\xe8\xd7\xce\x32\xd3\xff\x31\xa3\xdf\x4d\xe8\xaf\xa1\xe6\x3f\xa3\x3f\x66\xa8\x1f\x67\xf4\x07\x08\xfd\x75\x84\xfe\x31\x46\xbf\xff\x16\x33\xfd\xc3\x8c\xfe\x08\xa1\x1f\x24\xf4\x2f\x30\xcf\x5f\xfd\x6c\x33\xfd\x67\x98\xe7\xcf\xdf\x84\xf5\xab\x09\xfd\x6e\x46\x7f\xdc\x50\x3f\xcd\xe8\xd7\x12\xfa\xeb\x09\xfd\x08\xb3\xff\x0c\xcc\x31\xd3\x0f\x31\xfb\x4f\x2b\xa1\xbf\x91\xd0\xdf\xcd\xe8\x37\xce\x35\xd3\xdf\xce\xe8\xf7\x13\xfa\x9b\xa8\xf3\x67\x01\xb3\xff\xdf\x6a\xa6\xff\x71\x01\xb3\xff\x13\xfa\x9b\x09\xfd\x61\x46\x7f\xd0\x50\xff\x06\xa3\x3f\x4e\xe8\x6f\x21\xf4\xcf\x32\xdf\x3f\xb7\xce\x33\xd3\x6f\x11\xcc\xfe\x7f\x02\xeb\x6f\x25\xf4\x1b\x18\xfd\xf2\x72\x33\xfd\x7a\x46\xbf\x91\xd0\xdf\x46\xe8\x6f\x65\xce\xdf\x43\x86\xfa\x9b\x99\xf3\x77\x1f\xa1\xbf\x83\xd0\x5f\xc6\xe8\x77\xcf\x37\xd3\x5f\xc2\xe8\x0f\x12\xfa\xbb\x08\xfd\x1f\x30\xfa\x15\x0b\xcc\xf4\x2f\x32\xfa\x63\x84\xfe\x1e\x42\xff\x69\x46\x7f\xc4\x50\xff\x3b\x8c\x7e\xf9\x49\xac\x7f\x1f\xa1\xff\x8a\x5a\x7f\xf5\xd7\xa0\xfa\xd4\x47\x5e\xf5\xbf\x6f\xa2\xbf\x7e\xf4\x41\x80\x8e\x7f\x71\x91\x59\xfc\x33\x53\xe9\xf8\xc1\xc5\x66\xf1\x6f\x4f\xa1\xe3\x87\xff\xcf\x2c\xfe\x25\x1f\x1d\x3f\xb6\xc4\x2c\x7e\x1d\x33\xfe\xec\x47\x68\xbd\xe2\x17\x17\xd0\xf1\xe5\xb7\x9b\xc5\x77\x33\xfa\x95\xcb\xcc\xe2\x93\x8c\x7e\xfd\x1d\x66\xf1\xef\x33\xf9\x3f\xb5\xdc\x2c\xfe\x67\x4c\xfe\xbb\xef\x34\x8b\xef\x65\xf4\xcf\xaf\x30\x8b\x7f\x80\xd1\x1f\xa8\x30\x8b\x5f\xcd\xe8\x5f\x5f\x69\x16\xff\x77\x41\xc7\x8f\xac\x32\x8b\xbf\xc0\xe8\x7f\xb2\xda\x2c\xbe\x8d\xb9\x7e\xff\x1a\xb3\xf8\x5d\x8c\xfe\xd2\xb5\x66\xf1\x33\x19\xfd\xda\x75\x66\xf1\x7b\x98\xe7\x7f\x5f\xa5\x59\xfc\x26\xe6\xf9\x6f\x0d\x9a\xc5\x9f\x62\xae\xff\x5c\x95\x59\xfc\x5a\xe6\xfa\xfb\xab\x0d\xf5\x99\xeb\xbf\x52\x63\x16\x7f\x98\xb9\xfe\xa1\xf5\x66\xf1\x97\x99\xeb\x1f\xdd\x60\x16\xff\x24\x73\xfd\xe3\x1b\xcd\xe2\x63\x7e\x3a\xbe\x6c\x93\x59\xfc\x4f\x98\xfd\xaf\xe2\x6e\xb3\xf8\x23\xea\xf5\x7b\xed\xcf\x76\x89\x3a\xf5\xa3\x1b\xfa\xfb\x30\xfa\xfb\x37\x01\xee\xf9\xd9\x6c\xa6\x7f\x83\x59\x3f\xfa\xef\x31\x8b\xff\x98\xb9\xfe\x2b\x5b\xcc\xe2\x5f\x61\xf4\x87\xee\x35\x8b\xff\x25\xa3\x3f\xba\xd5\x2c\xfe\x31\x46\x7f\xbc\xce\x2c\xfe\x1f\x4c\xfe\xcb\xb6\x9b\xc5\xff\x9e\x79\x7e\x2b\x76\x98\xc5\xcf\x66\xe6\x6f\xdd\x4e\xb3\xf8\x2f\x18\xfd\xc6\x5d\x66\xf1\xb3\x98\xf3\x5b\x62\x37\xed\xaf\x3f\xbf\x6f\x14\xd3\xf1\x69\x26\x1e\x9d\x7f\x02\xf4\xfc\xe9\x56\xf1\x63\x5a\x83\x7e\xfe\x9d\xcf\xbd\xfe\xa4\xce\xbf\x75\x2a\x5e\x9e\x7f\x1f\x26\xce\xbf\x7b\x4b\xb1\xb6\x2c\xa7\xd4\x8f\x04\x55\xa8\xd7\x21\xe5\x18\xef\x77\xc5\x67\x7f\xdf\xc8\xbf\x02\x00\x00\xff\xff\xae\x3d\x71\x81\x08\x8b\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 35592, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

