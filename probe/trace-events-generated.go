// Code generated by go-bindata.
// sources:
// ../dist/trace_events.bpf
// DO NOT EDIT!

package probe

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _trace_eventsBpf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\x7b\x6c\x54\xc7\xf5\xc7\x67\xfd\x7e\x40\x30\x3f\x02\x98\x80\x83\x81\x98\xb7\x1f\x6b\x16\x6c\x07\x08\xe6\xf5\xc3\x06\x03\xc6\xe6\x61\x9e\xeb\xf5\xfa\x1a\x1b\xbf\x56\xbb\x5b\x5e\x4a\x8a\xd3\x86\x36\x6d\x91\xea\xa8\x50\x41\x54\x45\x6e\x52\xa9\x56\x15\x24\x2b\x8a\x12\x9a\x44\x8d\xdb\x4a\x2d\xad\xfa\x70\x50\x1f\x51\x23\x35\xae\x94\x4a\x28\x95\x8a\xd5\x56\x85\x3f\x50\x5d\xcd\xd9\x59\x7c\x3d\xe7\x9c\xbd\x23\xf5\x8f\x46\xea\x8c\x04\x93\xf3\x99\x73\xe6\x3b\xf7\xdc\xb9\x33\xb3\x0f\x36\x97\x76\x36\xfc\x7f\x9a\xcf\x27\x92\xc5\x27\xee\x8b\x29\x6b\xaa\xd4\x86\x5d\xff\xad\xfe\x8e\x08\x9f\x78\x7f\x5e\x82\x5d\x16\x42\x3c\x26\x84\x38\x27\x84\x28\x16\x42\x84\xf3\x1e\x4e\x4a\xfe\xfe\xab\x89\xf6\xec\x34\x21\x1e\x4e\x4e\x4e\x16\x6a\x9d\x5f\x06\x4d\x21\x0e\x89\x3c\xb0\x43\xaf\xa9\xb8\x50\xa2\xbd\x30\x0d\xfb\xcf\x48\xd1\xfe\x76\xfa\x74\xbf\xb7\x15\xbf\xa6\x6a\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\x5e\x3b\xde\xcf\xc2\x78\x33\x5c\x7f\x12\x7f\x09\x21\xbb\x88\x47\x43\x61\xa7\xc7\xe9\x88\x8b\xff\xcd\xe2\x53\xe9\xf0\x3d\xfa\x3c\xc2\x16\x59\xd2\xdd\xf3\x65\xe0\xbf\x3d\x9a\xcf\x4e\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\x8b\xcd\x0b\x5d\x6c\x5e\xe8\x62\xf3\x42\x17\x9b\x17\xba\xd8\xbc\xd0\xc5\xe6\x85\x2e\x36\x2f\x74\xb1\x79\xa1\xcb\xae\xc6\x06\xf1\xaf\xc9\xc9\xc9\x02\x65\xfb\x2e\x36\x89\x9c\x67\xf3\x7d\x0b\x85\x10\x92\x15\x2a\x3e\xa2\x6a\xc9\xd6\x12\xac\x96\x60\x07\x09\xd6\x49\xb0\x67\x09\x36\x48\xb0\xef\x10\xec\x16\xc1\x7e\x41\xb0\x71\x82\xfd\x83\x60\x39\x3e\xcc\x16\x11\xac\x82\x60\x3b\x08\xd6\x42\xb0\x1e\x82\x0d\x10\xec\x2a\xc1\x86\x09\xf6\x1e\xc1\xc6\x08\xf6\x09\xc1\x1e\x10\x6c\x46\x1a\x66\xc5\x04\x0b\x10\xac\x8e\x60\x27\x08\x16\x21\xd8\x0b\x04\xbb\xae\xb1\xc7\x85\x10\xaf\x6b\x2c\x55\xf9\x76\xbe\x80\xa7\x7f\x48\xe3\xb7\x80\xcf\x47\xfc\x06\xf0\x05\x88\x5f\x04\xbe\x10\xf1\xe3\xc0\x8b\x10\xdf\x04\x7c\x31\xe2\x25\xc0\x97\x20\xfe\x18\xf0\x65\x88\xdf\x87\xaf\xd9\x96\x20\x3e\x0e\x7c\x05\xe2\x3f\x03\xbe\x0a\xf1\x2f\x40\xff\x99\x88\x8f\x00\x5f\x83\xf8\x4b\xc0\x4b\x11\x8f\x02\x2f\x47\xbc\x19\xb8\x1f\xf1\x00\xf0\x75\x88\x17\x01\x5f\x8f\x78\x16\xf0\x2a\xc4\xef\xc1\x75\xd5\x20\xfe\x21\xf0\x8d\x88\xff\x10\xf8\x66\xc4\xc3\xd0\x7f\x36\xe2\xc3\xc0\xb7\x20\xfe\x15\xe0\x5b\x11\x3f\x03\x7c\x3b\xe2\x7b\x80\xef\x44\x7c\x07\xf0\x5c\xc4\x4b\x81\xe7\x23\x3e\x0f\xf8\x4c\xc4\x27\xe1\xba\x66\x21\x7e\x17\xf8\x6c\xc4\x3f\x00\x3e\x07\xf1\x77\x80\xcf\x45\x5c\xc0\xd3\x92\x4e\x50\xc9\x33\x19\x9e\xcd\xf0\x5c\x86\xe7\x33\x7c\x26\xc3\x67\x31\x7c\x36\xc3\xe7\x30\x7c\x2e\xc3\xe7\x33\x7c\x01\xc3\x17\x32\xbc\x88\xe1\x8b\x19\xbe\x84\xe1\xcb\x18\x5e\xc2\xf0\x15\x0c\x5f\xc5\xf0\x35\x0c\x2f\x65\x78\x39\xc3\xfd\x0c\x5f\xc7\xf0\xf5\x0c\xaf\x62\x78\x0d\xc3\x37\x32\x7c\x33\xc3\xb7\x30\x7c\x2b\xc3\xb7\x33\x7c\x27\x62\x5f\xcb\x95\xfb\x54\x37\xe2\xdf\xcd\x96\xbc\x07\xf1\xe7\x61\x5f\xdb\x85\xf8\x91\x2c\xc9\x4f\x22\x1e\x4a\x93\xfc\x14\xe2\xaf\x65\x4a\x1e\x44\xfc\x25\x9f\xe4\xad\x88\x2f\x87\xfe\xf7\x20\xbe\x12\xfa\x6f\x40\xfc\x19\xf0\x3f\x8a\xf8\x0e\xf0\x3f\x86\xc7\x0f\xe3\x39\x8e\x78\x0d\x8c\xe7\x04\xe2\x5f\x05\xff\x43\x88\xc7\xc1\xff\x30\xe2\x9b\xc0\xff\x08\xe2\x4f\x80\x7f\x0b\xe2\x3f\xc8\x90\xdc\x41\xfc\x0a\xe4\xbf\x03\xf1\x28\xf4\x7f\x00\xf1\x16\xe8\xbf\x09\xf1\xa5\xe0\xdf\x8c\xf8\x43\xe8\xff\x20\xe2\xef\x82\x7f\x3d\xe2\x37\xa1\xff\xdd\x88\xf7\x43\xfe\xf7\x22\xfe\x1c\xe4\x7f\x1f\xe2\x79\xe0\xdf\x85\x78\x0e\xf8\x9f\x41\xfc\x53\x18\xcf\x69\xc4\x3f\x81\xf1\x74\x22\xee\x03\xff\x10\xe2\xbf\x87\xeb\x6d\x43\x7c\x1c\xf2\x1f\x46\xfc\x0d\xf0\x6f\x47\xfc\x0e\xf4\xbf\x1f\xf1\xdb\x30\x9e\x46\xc4\x0b\xf3\x24\xc7\xeb\x5e\x00\x9e\x3b\xbc\x3e\xd7\xc3\x73\x8a\xf7\x91\x77\x81\xe3\xf5\xb0\x0d\xc6\x8f\xd7\xbd\x7b\x90\x67\xbc\x9e\x3f\x4c\x97\x1c\xaf\xdb\xab\xe0\x7a\xf1\x7a\x75\x13\xfa\xc1\xfb\xd4\x0d\xe8\x07\xef\x47\x3f\x85\xeb\xc2\xfb\xe6\x5f\x72\x24\xc7\xeb\xd5\x73\xc0\xf1\xba\xb7\x1a\xfa\xc7\xeb\xf3\x9b\x30\x4f\xf0\x3a\xdc\x07\x79\xc6\xe7\x81\x2c\xe8\x9f\xd8\xf7\xc1\x1f\xef\x3b\x5f\x87\xf1\xe3\xfd\xd1\x0f\xf9\xc7\xfb\xf8\xab\xc0\xf1\x7e\xb4\x0b\xee\x0b\xde\x77\xfe\x04\xd7\x85\xf7\xc7\xb3\xa0\x8b\xf7\xd9\x6c\xb8\x2f\x78\xbf\xb8\x06\xf7\x05\x9f\x13\x2e\x41\xff\xf8\x3c\x30\x02\xfd\xe3\x73\xcb\xaf\x21\x3f\x78\xbf\x38\x09\x1c\xef\x3b\xb9\xd0\x3f\xde\x1f\xbf\x01\xf7\x05\xef\x83\x85\xd0\x0f\x3e\x5f\x1d\x83\xfc\xe3\x73\xda\x97\xe0\xba\xea\x10\xaf\x50\xb5\x4f\xad\x8d\xad\x2e\xfb\x94\xeb\xad\x92\xa4\x9d\xca\x3f\xa8\xf9\x07\x3d\xfc\x3b\x35\xff\x4e\x0f\xff\x2e\xcd\xbf\xcb\xc3\xff\x84\xe6\x7f\xc2\xc3\xff\xa4\xe6\x7f\xd2\xc3\xbf\x41\xf3\x6f\xf0\xf0\xdf\xab\xf9\xef\xf5\xf0\x6f\xd1\xfc\x5b\x3c\xfc\x8f\x6a\xfe\x47\x3d\xfc\x8f\x69\xfe\xc7\x3c\xfc\x8f\x6b\xfe\xc7\x3d\xfc\x77\x6b\xfe\xbb\x3d\xfc\xf7\x68\xfe\x7b\x3c\xfc\x9b\x34\xff\x26\x0f\xff\x66\xcd\xbf\xd9\xc3\xff\xa0\xe6\x7f\xd0\xc3\xff\x90\xe6\x7f\xc8\xc3\xbf\x4e\xf3\xaf\xf3\xf0\xaf\xd7\xfc\xeb\x3d\xfc\xf7\x69\xfe\xfb\x3c\xfc\xf7\x6b\xfe\xfb\x3d\xfc\x1b\x35\xff\x46\x0f\xff\x03\x9a\xff\x01\x0f\xff\x76\xcd\xbf\xdd\xc3\xdf\xd1\xfc\x1d\x0f\xff\x0e\xcd\xbf\xc3\xc3\xff\xb4\xe6\x7f\xda\xc3\xff\xb0\xe6\x7f\xd8\xc3\xff\x88\xe6\x7f\xc4\xc3\xbf\x4d\xf3\x6f\xf3\xf0\x0f\x6b\xfe\x61\x0f\xff\x56\xcd\xbf\xd5\xc3\x3f\xa4\xf9\x4b\x7b\x91\xb2\xf3\xe0\xdd\xad\xa9\x78\x69\x3f\x25\x5f\x4f\xb8\xec\x12\xb5\xc6\x25\xed\xe5\x42\x3c\x7a\x05\x95\x07\xef\x76\x4d\xf5\x2f\xed\x95\x42\x88\xab\x2e\x5b\x9e\x3a\x86\x5d\xf6\x6a\x21\xc4\x7b\x2e\x5b\x9e\xf2\xc6\x5c\xf6\x5a\x79\xde\x75\xd9\xf2\xb4\xf1\xc0\x65\x97\x09\x21\x66\xf8\xa6\x6c\x79\x1a\x2c\x76\xd9\xf2\x5a\x02\x2e\x5b\x9e\x4a\xea\x5c\x76\xa5\xdc\x73\x5c\xb6\x3c\x75\x45\x5c\x76\x40\x08\xf1\x82\xcb\x96\xbb\xff\x75\x97\xbd\x41\x08\xf1\xba\xcb\x96\xa7\xb3\x51\x97\x5d\x2d\x84\xf8\x8d\xcb\x96\xa7\x84\xbb\x2e\xfb\x69\x79\x2e\x75\xd9\xf2\x14\x5a\x90\x36\x65\x6f\x92\xf7\xc0\x65\xcb\xd3\x50\xb5\xcb\x7e\x46\xee\x69\x2e\x5b\x9e\x26\x5b\x5d\x76\xad\x7c\xbd\xe6\xb2\xe5\xa9\xe6\x45\x97\xbd\x4d\x08\xf1\x2d\x97\x2d\x4f\xa9\x23\x2e\x1b\xee\x7d\x59\xdc\x39\x1f\x17\xdd\x51\x27\x1e\x89\xf6\xb7\x39\xc1\x60\x67\xa8\xaf\xbd\xc7\x09\x76\xf5\x39\xf1\x60\x38\xd6\x1d\x0c\x85\xc3\x4e\x24\x2e\xba\x53\x37\x97\x45\x9d\x9e\x47\x9d\x94\x93\xad\x74\x93\x73\xd6\xe9\x8b\x8b\xde\x50\x24\x56\x4e\x77\x1d\x8c\x44\xfb\x4f\xc7\x82\x51\x67\xba\x57\x3c\x1c\x09\x9e\xdd\x10\x0c\xf7\xf7\xf5\x39\xe1\x94\x4e\x01\x0f\xa7\xde\xee\xf6\xae\x68\x88\x6b\xed\x08\x77\xf6\x9f\xeb\x4b\xd5\xdc\xdb\xdf\xce\x36\x43\xdf\x29\x7b\x66\x1a\x53\xb5\xf5\x47\x1c\xae\xe9\x5c\xb4\x2b\xee\xa4\x48\x46\xcc\x89\x07\x63\xf1\x50\x4a\x9f\x70\x4f\x7f\x8c\x6b\x4f\xd5\x96\x48\x05\x7b\x3d\x7c\x5b\xd4\x09\xb9\x9b\xf0\x5c\x9c\x7e\xaf\xf5\xa9\xa8\xb5\x4e\x9f\x89\x54\x23\xd9\xc2\xa8\x06\x52\xaa\x06\x52\xa9\x06\x58\xd5\x40\x0a\x55\x35\x1b\x75\xb9\x24\x9e\xae\xd3\x7c\xa1\x79\x7a\x0b\xc6\x58\x21\x39\xa3\x75\x89\x47\x1c\x6b\x4c\x6f\x22\x38\xa9\x02\x0f\x06\xa1\x92\xe0\xa4\x8a\xab\x89\xe0\x30\x69\x60\xc1\x88\x79\xaf\x18\x9e\xab\x85\xe7\x4a\xc1\xaf\x12\x29\x56\x88\x14\xab\x03\xb7\x32\xb0\xab\x02\xb7\x22\x30\xab\x01\xb7\x12\x78\xad\x02\xa9\x56\x00\xee\xe9\x67\x9f\x7c\xee\xa9\x67\x9e\xf8\x04\xfe\x5c\x5f\x3c\x1a\x0a\x77\x3b\xed\xc1\x48\x57\x7b\x8c\x7b\x2a\xc8\x67\x82\x7b\x22\xc8\xe7\x81\x9e\xf2\xec\x84\xa7\xa7\xbb\xde\x09\xd7\x07\xd9\x85\xea\x81\x7a\x5c\xce\xf5\x53\x0d\x09\x1e\x3c\xeb\x44\x63\x5d\xa4\x83\xbc\xff\xfa\x90\x80\xe1\x11\x4d\x61\x8d\x25\xc3\x63\x17\x62\x89\x89\x43\xe8\x24\x38\xee\xd4\xc5\x75\x48\xaf\xa9\x8f\x66\x1f\xb5\xa4\x4e\x35\xe2\x15\x55\x6b\xa3\x1a\x68\x45\x98\xb7\x94\x5a\xa2\x01\x2b\xb9\xb8\x0e\x89\x3b\x44\xf5\x4e\xf5\x0c\xf7\x5f\xef\x79\x0a\x06\x7b\xba\xc2\x4e\x9f\x6a\x2d\x73\x3a\x83\x1d\xd1\x50\x2f\x25\x98\x78\xdc\xe8\x85\x95\x5d\x56\xe9\x45\x95\x9c\x70\x44\xe7\x5c\xdf\x64\xd7\xa8\x67\x39\xad\xe4\x23\x3f\x6d\x9e\x01\xc0\x3d\x4e\x61\x9d\xc5\xe2\xd1\x78\xa8\x4d\x94\xc5\x2e\xf4\xca\xba\x61\xdb\xb6\x9a\x60\xa5\xac\x2a\x55\xed\x57\x75\xb5\xc2\xaa\xf6\xab\xba\x4a\x61\x55\xfb\x55\xbd\x41\x61\x55\xfb\x55\xbd\x5e\x61\x55\xfb\x55\x1d\x50\x58\xd5\x7e\x55\xaf\x53\x95\xaa\x2b\x55\xed\x4f\xda\xaa\x59\xd5\x95\xaa\xf6\x27\x6b\xd5\xac\xea\x4a\x55\xfb\x55\x5d\xa1\x9a\x55\x5d\xa9\x6a\xbf\xac\xff\xd3\xf2\xbd\x3c\x41\x7e\xda\x3c\xa0\x3e\xea\x19\xd5\xde\xf2\xf6\x09\x6c\xcb\x3f\x59\x1a\xe7\x7e\x13\x2b\x43\xb3\x5f\xce\x4b\x1d\xaf\x7f\xc7\x24\x47\xb3\xbf\x99\x27\xe8\x4f\xb9\xd5\x47\x19\xc9\xd7\xbb\xfd\xea\x3b\x68\xc9\xf8\xe4\xf7\xad\xbe\xc8\xe8\x4f\x18\xea\x5f\x62\xf4\x2b\x08\xfd\x4c\x42\xbf\x21\x87\xd6\x1f\xf2\x99\xe9\xd7\xe5\xd0\xfa\xad\x84\x7e\x36\xa1\x1f\x60\xf4\x1b\x99\xef\xf8\xe8\xfa\x15\x8c\xfe\x20\xa1\x9f\x4b\xe8\xff\x33\x9b\xd6\x4f\x4e\x4a\x2f\xfd\xbf\x65\xd3\xfa\xa3\x84\x7e\x3e\xa1\xff\x31\xa3\x3f\x62\xa8\xff\x11\xa3\x3f\x41\xe8\xcf\x24\xf4\x2f\xe6\xd2\xfa\xad\x19\x66\xfa\x67\x73\x69\xfd\xe2\x46\xac\x3f\x8b\xd0\x6f\x63\xf4\x0b\x32\xcd\xf4\x4f\x31\xfa\x8d\x84\xfe\x6c\x42\xff\x8f\x59\xb4\xfe\xa8\xa1\xfe\x1f\xb2\x68\xfd\x01\x42\x7f\x0e\xa1\xff\x13\x46\x3f\x92\x65\xa6\xff\x23\x46\x7f\x84\xd0\x9f\x4b\xe8\xff\x2a\x9d\xd6\x2f\xce\x36\xd3\xff\x79\x3a\xad\x3f\x4e\xe8\xcf\x27\xf4\xdf\x64\xf4\xc7\x0c\xf5\x47\x18\xfd\x82\x03\x58\x7f\x01\xa1\xef\x30\xcf\xdf\x40\x8e\x99\x7e\x88\x79\xfe\x6a\x09\xfd\x85\x84\xfe\x5e\x46\xbf\x22\xd7\x4c\xbf\x9e\xd1\x8f\x10\xfa\x45\x84\xfe\x52\x46\x7f\xdc\x50\xff\x49\x46\x7f\x88\xd0\x5f\x4c\xe8\xe7\x32\xfa\x83\x79\x66\xfa\x99\x8c\xfe\x18\xa1\xbf\x84\xd0\x5f\x97\xc1\xec\xff\xf9\x66\xfa\xe5\x19\xcc\xfe\xdf\x84\xf5\x97\x11\xfa\x85\x8c\xfe\x84\xa1\xfe\xe3\x8c\x7e\x05\xa1\x5f\x42\xe8\xd7\x33\xe7\x8f\xa1\x19\x66\xfa\x3b\x99\xf3\x47\x2b\xa1\xbf\x82\xd0\xf7\x33\xfa\x8d\x33\xcd\xf4\x4b\x19\xfd\x41\x42\x7f\x15\xa1\xff\x57\x66\xff\x81\x1f\xc7\x35\xd0\xff\x94\xd9\x7f\x46\x09\xfd\x35\x84\xfe\x6f\x19\xfd\x11\x43\xfd\x0f\x18\xfd\x09\x42\xbf\x94\xd0\xbf\xc1\xcc\xbf\xd6\x59\x66\xfa\xd7\x98\xf9\x57\xdc\x8c\xf5\xcb\x09\xfd\xcf\x33\xfa\x05\x05\x66\xfa\x17\x19\xfd\x46\x42\xdf\x4f\xe8\x77\x31\xfb\xcf\xa8\xa1\xbe\xc3\xec\x3f\x03\x84\xfe\x3a\xea\xfc\xcd\xe8\x47\x66\x9b\xe9\xd7\x31\xfa\x23\x84\xfe\x7a\x42\xff\xef\x69\xcc\xfe\xff\x7f\x66\xfa\xf7\xd2\x98\xfd\x9f\xd0\xaf\x22\xf4\x7f\xc7\xe8\x8f\x19\xea\xdf\x61\xf4\x0b\x0e\x62\xfd\x1a\x42\xff\x0c\xf3\xfa\x71\x60\x8e\x99\x7e\x87\x60\xf6\x7f\x42\x7f\x23\x75\xff\x19\xfd\x8a\xc7\xcd\xf4\xeb\x18\xfd\x08\xa1\xbf\x99\xd0\x7f\x87\x79\xfd\x35\x6e\xa8\xff\x16\xf3\xfa\x6b\x88\xd0\xdf\x42\xe8\xbf\xc2\xe8\x0f\xce\x35\xd3\x7f\x99\xd1\x1f\x23\xf4\xb7\x12\xfa\xc5\xcc\xfa\x5b\x3b\xcf\x4c\x7f\x11\xb3\xfe\x26\xbf\xda\xea\xd6\xdf\x4e\xe8\xe7\x30\xfa\x13\x86\xfa\x19\x8c\x7e\x05\xa1\xbf\x93\xd0\xbf\xa9\xd6\x5f\xfd\x3d\x98\x21\xf5\x15\x44\xfd\xf7\xdf\xf5\xf7\x4f\x9e\xcf\xa2\xe3\x6f\x15\x9a\xc5\xbf\x95\x49\xc7\x8f\x2d\x30\x8b\x1f\xf6\xd1\xf1\x77\x9f\x30\x8b\x5f\xc2\x8c\x3f\xf9\xc5\x05\xaf\xf8\x65\x69\x74\x7c\x61\x91\x59\xfc\x19\x46\xbf\xe2\x49\xb3\xf8\xf3\x8c\x7e\xdd\x62\xb3\xf8\x5f\x32\xf9\x6f\x2d\x36\x8b\xff\x31\x93\xff\xf3\x4b\xcc\xe2\x7b\x19\xfd\xc1\xa5\x66\xf1\xcd\x8c\xfe\xf0\x32\xb3\xf8\x22\x46\x7f\xf4\x29\xb3\xf8\xfb\x82\x8e\xff\xb0\xc4\x2c\xfe\x32\xa3\x3f\xb1\xdc\x2c\xbe\x9f\xb9\xfe\x9c\x95\x66\xf1\x55\x8c\x7e\xf1\x2a\xb3\xf8\xb9\x8c\x7e\xf5\x6a\xb3\xf8\x1a\x66\xfe\x37\xae\x31\x8b\xdf\xc2\xcc\xff\xce\xb5\x66\xf1\x4d\xcc\xf5\x0f\x94\x9a\xc5\x07\x98\xeb\xbf\x5e\x66\xa8\xcf\x5c\xff\x48\xb9\x59\xfc\x09\xe6\xfa\x6f\x57\x98\xc5\xbf\xc2\x5c\xff\xb8\xdf\x2c\xfe\x0a\x73\xfd\x0f\x2a\xcd\xe2\x1f\x32\xfb\x4f\x41\xc0\x2c\xfe\x0e\xf3\xfc\xad\x5c\x6f\x16\xff\x11\xa3\x5f\xbb\xc1\x2c\xfe\x26\xa3\xdf\x52\x65\x16\xff\x7d\x46\x3f\x52\x6d\x16\xff\x65\x46\xff\xc5\x1a\xb3\xf8\x3f\x33\xf7\x7f\xe8\x69\xb3\xf8\x8f\x99\xfb\x7f\x6b\xa3\x59\x7c\x26\x33\xff\xc7\x36\x99\xc5\xa7\x33\xf3\xff\xee\x66\xb3\xf8\x2b\xb9\xcc\xfe\xbf\x85\xf6\xd7\x3f\x7f\x1a\xce\xa6\xe3\x33\x98\x78\xdd\xbe\xae\xf4\xb5\xff\x2d\x8e\xc8\x51\xf1\xa3\x5a\x83\x7e\xfe\xbb\xca\x9c\xff\x5a\xd5\xf9\x2f\xf9\xef\xb6\xe5\xf9\xaf\x97\x38\xff\xbd\x91\x87\xb5\x65\xb9\xad\xfe\x89\x42\xb5\x7a\x1f\xc6\xa7\x9d\x1f\x93\xbf\x0b\xf0\xef\x00\x00\x00\xff\xff\x1a\x37\x76\xa0\x40\x7f\x00\x00")

func trace_eventsBpfBytes() ([]byte, error) {
	return bindataRead(
		_trace_eventsBpf,
		"trace_events.bpf",
	)
}

func trace_eventsBpf() (*asset, error) {
	bytes, err := trace_eventsBpfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "trace_events.bpf", size: 32576, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"trace_events.bpf": trace_eventsBpf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"trace_events.bpf": &bintree{trace_eventsBpf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

