// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event_structs.proto

/*
Package tracer is a generated protocol buffer package.

It is generated from these files:
	event_structs.proto

It has these top-level messages:
	ProtobufCommonEvent
	ProtobufChmodEvent
	ProtobufChownEvent
	ProtobufCloseEvent
	ProtobufFchmodEvent
	ProtobufFchmodatEvent
	ProtobufFchownEvent
	ProtobufFchownatEvent
	ProtobufMkdirEvent
	ProtobufMkdiratEvent
	ProtobufOpenEvent
	ProtobufReadEvent
	ProtobufWriteEvent
	Empty
	Metric
*/
package tracer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtobufCommonEvent struct {
	Timestamp uint64 `protobuf:"varint,1,opt,name=Timestamp,json=timestamp" json:"Timestamp,omitempty"`
	Pid       int64  `protobuf:"varint,2,opt,name=Pid,json=pid" json:"Pid,omitempty"`
	Ret       int64  `protobuf:"varint,3,opt,name=Ret,json=ret" json:"Ret,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=Name,json=name" json:"Name,omitempty"`
}

func (m *ProtobufCommonEvent) Reset()                    { *m = ProtobufCommonEvent{} }
func (m *ProtobufCommonEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufCommonEvent) ProtoMessage()               {}
func (*ProtobufCommonEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProtobufCommonEvent) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProtobufCommonEvent) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProtobufCommonEvent) GetRet() int64 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *ProtobufCommonEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProtobufChmodEvent struct {
	Filename []byte `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Mode     uint64 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *ProtobufChmodEvent) Reset()                    { *m = ProtobufChmodEvent{} }
func (m *ProtobufChmodEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufChmodEvent) ProtoMessage()               {}
func (*ProtobufChmodEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProtobufChmodEvent) GetFilename() []byte {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *ProtobufChmodEvent) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ProtobufChownEvent struct {
	Filename []byte `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	User     uint32 `protobuf:"varint,2,opt,name=user" json:"user,omitempty"`
	Group    uint32 `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
}

func (m *ProtobufChownEvent) Reset()                    { *m = ProtobufChownEvent{} }
func (m *ProtobufChownEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufChownEvent) ProtoMessage()               {}
func (*ProtobufChownEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProtobufChownEvent) GetFilename() []byte {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *ProtobufChownEvent) GetUser() uint32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *ProtobufChownEvent) GetGroup() uint32 {
	if m != nil {
		return m.Group
	}
	return 0
}

type ProtobufCloseEvent struct {
	Fd uint64 `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
}

func (m *ProtobufCloseEvent) Reset()                    { *m = ProtobufCloseEvent{} }
func (m *ProtobufCloseEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufCloseEvent) ProtoMessage()               {}
func (*ProtobufCloseEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProtobufCloseEvent) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

type ProtobufFchmodEvent struct {
	Fd   uint64 `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	Mode uint64 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *ProtobufFchmodEvent) Reset()                    { *m = ProtobufFchmodEvent{} }
func (m *ProtobufFchmodEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufFchmodEvent) ProtoMessage()               {}
func (*ProtobufFchmodEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ProtobufFchmodEvent) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ProtobufFchmodEvent) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ProtobufFchmodatEvent struct {
	Dfd      int64  `protobuf:"varint,1,opt,name=dfd" json:"dfd,omitempty"`
	Filename []byte `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	Mode     uint64 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (m *ProtobufFchmodatEvent) Reset()                    { *m = ProtobufFchmodatEvent{} }
func (m *ProtobufFchmodatEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufFchmodatEvent) ProtoMessage()               {}
func (*ProtobufFchmodatEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ProtobufFchmodatEvent) GetDfd() int64 {
	if m != nil {
		return m.Dfd
	}
	return 0
}

func (m *ProtobufFchmodatEvent) GetFilename() []byte {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *ProtobufFchmodatEvent) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ProtobufFchownEvent struct {
	Fd    uint64 `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	User  uint32 `protobuf:"varint,2,opt,name=user" json:"user,omitempty"`
	Group uint32 `protobuf:"varint,3,opt,name=group" json:"group,omitempty"`
}

func (m *ProtobufFchownEvent) Reset()                    { *m = ProtobufFchownEvent{} }
func (m *ProtobufFchownEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufFchownEvent) ProtoMessage()               {}
func (*ProtobufFchownEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ProtobufFchownEvent) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ProtobufFchownEvent) GetUser() uint32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *ProtobufFchownEvent) GetGroup() uint32 {
	if m != nil {
		return m.Group
	}
	return 0
}

type ProtobufFchownatEvent struct {
	Dfd      int64  `protobuf:"varint,1,opt,name=dfd" json:"dfd,omitempty"`
	Filename []byte `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	User     uint32 `protobuf:"varint,3,opt,name=user" json:"user,omitempty"`
	Group    uint32 `protobuf:"varint,4,opt,name=group" json:"group,omitempty"`
	Flag     int64  `protobuf:"varint,5,opt,name=flag" json:"flag,omitempty"`
}

func (m *ProtobufFchownatEvent) Reset()                    { *m = ProtobufFchownatEvent{} }
func (m *ProtobufFchownatEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufFchownatEvent) ProtoMessage()               {}
func (*ProtobufFchownatEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProtobufFchownatEvent) GetDfd() int64 {
	if m != nil {
		return m.Dfd
	}
	return 0
}

func (m *ProtobufFchownatEvent) GetFilename() []byte {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *ProtobufFchownatEvent) GetUser() uint32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *ProtobufFchownatEvent) GetGroup() uint32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *ProtobufFchownatEvent) GetFlag() int64 {
	if m != nil {
		return m.Flag
	}
	return 0
}

type ProtobufMkdirEvent struct {
	Pathname []byte `protobuf:"bytes,1,opt,name=pathname,proto3" json:"pathname,omitempty"`
	Mode     uint64 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *ProtobufMkdirEvent) Reset()                    { *m = ProtobufMkdirEvent{} }
func (m *ProtobufMkdirEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufMkdirEvent) ProtoMessage()               {}
func (*ProtobufMkdirEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProtobufMkdirEvent) GetPathname() []byte {
	if m != nil {
		return m.Pathname
	}
	return nil
}

func (m *ProtobufMkdirEvent) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ProtobufMkdiratEvent struct {
	Dfd      int64  `protobuf:"varint,1,opt,name=dfd" json:"dfd,omitempty"`
	Pathname []byte `protobuf:"bytes,2,opt,name=pathname,proto3" json:"pathname,omitempty"`
	Mode     uint64 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (m *ProtobufMkdiratEvent) Reset()                    { *m = ProtobufMkdiratEvent{} }
func (m *ProtobufMkdiratEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufMkdiratEvent) ProtoMessage()               {}
func (*ProtobufMkdiratEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ProtobufMkdiratEvent) GetDfd() int64 {
	if m != nil {
		return m.Dfd
	}
	return 0
}

func (m *ProtobufMkdiratEvent) GetPathname() []byte {
	if m != nil {
		return m.Pathname
	}
	return nil
}

func (m *ProtobufMkdiratEvent) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ProtobufOpenEvent struct {
	Filename []byte `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Flags    int64  `protobuf:"varint,2,opt,name=flags" json:"flags,omitempty"`
	Mode     uint64 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
}

func (m *ProtobufOpenEvent) Reset()                    { *m = ProtobufOpenEvent{} }
func (m *ProtobufOpenEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufOpenEvent) ProtoMessage()               {}
func (*ProtobufOpenEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ProtobufOpenEvent) GetFilename() []byte {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *ProtobufOpenEvent) GetFlags() int64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *ProtobufOpenEvent) GetMode() uint64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type ProtobufReadEvent struct {
	Fd    uint64 `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	Buf   []byte `protobuf:"bytes,2,opt,name=buf,proto3" json:"buf,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *ProtobufReadEvent) Reset()                    { *m = ProtobufReadEvent{} }
func (m *ProtobufReadEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufReadEvent) ProtoMessage()               {}
func (*ProtobufReadEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ProtobufReadEvent) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ProtobufReadEvent) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func (m *ProtobufReadEvent) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ProtobufWriteEvent struct {
	Fd    uint64 `protobuf:"varint,1,opt,name=fd" json:"fd,omitempty"`
	Buf   []byte `protobuf:"bytes,2,opt,name=buf,proto3" json:"buf,omitempty"`
	Count int64  `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *ProtobufWriteEvent) Reset()                    { *m = ProtobufWriteEvent{} }
func (m *ProtobufWriteEvent) String() string            { return proto.CompactTextString(m) }
func (*ProtobufWriteEvent) ProtoMessage()               {}
func (*ProtobufWriteEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ProtobufWriteEvent) GetFd() uint64 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *ProtobufWriteEvent) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

func (m *ProtobufWriteEvent) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type Metric struct {
	Count         uint64                 `protobuf:"varint,1,opt,name=Count,json=count" json:"Count,omitempty"`
	CommonEvent   *ProtobufCommonEvent   `protobuf:"bytes,2,opt,name=CommonEvent,json=commonEvent" json:"CommonEvent,omitempty"`
	ChmodEvent    *ProtobufChmodEvent    `protobuf:"bytes,3,opt,name=ChmodEvent,json=chmodEvent" json:"ChmodEvent,omitempty"`
	ChownEvent    *ProtobufChownEvent    `protobuf:"bytes,4,opt,name=ChownEvent,json=chownEvent" json:"ChownEvent,omitempty"`
	CloseEvent    *ProtobufCloseEvent    `protobuf:"bytes,5,opt,name=CloseEvent,json=closeEvent" json:"CloseEvent,omitempty"`
	FchmodEvent   *ProtobufFchmodEvent   `protobuf:"bytes,6,opt,name=FchmodEvent,json=fchmodEvent" json:"FchmodEvent,omitempty"`
	FchmodatEvent *ProtobufFchmodatEvent `protobuf:"bytes,7,opt,name=FchmodatEvent,json=fchmodatEvent" json:"FchmodatEvent,omitempty"`
	FchownEvent   *ProtobufFchownEvent   `protobuf:"bytes,8,opt,name=FchownEvent,json=fchownEvent" json:"FchownEvent,omitempty"`
	FchownatEvent *ProtobufFchownatEvent `protobuf:"bytes,9,opt,name=FchownatEvent,json=fchownatEvent" json:"FchownatEvent,omitempty"`
	MkdirEvent    *ProtobufMkdirEvent    `protobuf:"bytes,10,opt,name=MkdirEvent,json=mkdirEvent" json:"MkdirEvent,omitempty"`
	MkdiratEvent  *ProtobufMkdiratEvent  `protobuf:"bytes,11,opt,name=MkdiratEvent,json=mkdiratEvent" json:"MkdiratEvent,omitempty"`
	OpenEvent     *ProtobufOpenEvent     `protobuf:"bytes,12,opt,name=OpenEvent,json=openEvent" json:"OpenEvent,omitempty"`
	ReadEvent     *ProtobufReadEvent     `protobuf:"bytes,13,opt,name=ReadEvent,json=readEvent" json:"ReadEvent,omitempty"`
	WriteEvent    *ProtobufWriteEvent    `protobuf:"bytes,14,opt,name=WriteEvent,json=writeEvent" json:"WriteEvent,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Metric) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Metric) GetCommonEvent() *ProtobufCommonEvent {
	if m != nil {
		return m.CommonEvent
	}
	return nil
}

func (m *Metric) GetChmodEvent() *ProtobufChmodEvent {
	if m != nil {
		return m.ChmodEvent
	}
	return nil
}

func (m *Metric) GetChownEvent() *ProtobufChownEvent {
	if m != nil {
		return m.ChownEvent
	}
	return nil
}

func (m *Metric) GetCloseEvent() *ProtobufCloseEvent {
	if m != nil {
		return m.CloseEvent
	}
	return nil
}

func (m *Metric) GetFchmodEvent() *ProtobufFchmodEvent {
	if m != nil {
		return m.FchmodEvent
	}
	return nil
}

func (m *Metric) GetFchmodatEvent() *ProtobufFchmodatEvent {
	if m != nil {
		return m.FchmodatEvent
	}
	return nil
}

func (m *Metric) GetFchownEvent() *ProtobufFchownEvent {
	if m != nil {
		return m.FchownEvent
	}
	return nil
}

func (m *Metric) GetFchownatEvent() *ProtobufFchownatEvent {
	if m != nil {
		return m.FchownatEvent
	}
	return nil
}

func (m *Metric) GetMkdirEvent() *ProtobufMkdirEvent {
	if m != nil {
		return m.MkdirEvent
	}
	return nil
}

func (m *Metric) GetMkdiratEvent() *ProtobufMkdiratEvent {
	if m != nil {
		return m.MkdiratEvent
	}
	return nil
}

func (m *Metric) GetOpenEvent() *ProtobufOpenEvent {
	if m != nil {
		return m.OpenEvent
	}
	return nil
}

func (m *Metric) GetReadEvent() *ProtobufReadEvent {
	if m != nil {
		return m.ReadEvent
	}
	return nil
}

func (m *Metric) GetWriteEvent() *ProtobufWriteEvent {
	if m != nil {
		return m.WriteEvent
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtobufCommonEvent)(nil), "tracer.ProtobufCommonEvent")
	proto.RegisterType((*ProtobufChmodEvent)(nil), "tracer.ProtobufChmodEvent")
	proto.RegisterType((*ProtobufChownEvent)(nil), "tracer.ProtobufChownEvent")
	proto.RegisterType((*ProtobufCloseEvent)(nil), "tracer.ProtobufCloseEvent")
	proto.RegisterType((*ProtobufFchmodEvent)(nil), "tracer.ProtobufFchmodEvent")
	proto.RegisterType((*ProtobufFchmodatEvent)(nil), "tracer.ProtobufFchmodatEvent")
	proto.RegisterType((*ProtobufFchownEvent)(nil), "tracer.ProtobufFchownEvent")
	proto.RegisterType((*ProtobufFchownatEvent)(nil), "tracer.ProtobufFchownatEvent")
	proto.RegisterType((*ProtobufMkdirEvent)(nil), "tracer.ProtobufMkdirEvent")
	proto.RegisterType((*ProtobufMkdiratEvent)(nil), "tracer.ProtobufMkdiratEvent")
	proto.RegisterType((*ProtobufOpenEvent)(nil), "tracer.ProtobufOpenEvent")
	proto.RegisterType((*ProtobufReadEvent)(nil), "tracer.ProtobufReadEvent")
	proto.RegisterType((*ProtobufWriteEvent)(nil), "tracer.ProtobufWriteEvent")
	proto.RegisterType((*Empty)(nil), "tracer.Empty")
	proto.RegisterType((*Metric)(nil), "tracer.Metric")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MetricCollector service

type MetricCollectorClient interface {
	Process(ctx context.Context, opts ...grpc.CallOption) (MetricCollector_ProcessClient, error)
}

type metricCollectorClient struct {
	cc *grpc.ClientConn
}

func NewMetricCollectorClient(cc *grpc.ClientConn) MetricCollectorClient {
	return &metricCollectorClient{cc}
}

func (c *metricCollectorClient) Process(ctx context.Context, opts ...grpc.CallOption) (MetricCollector_ProcessClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MetricCollector_serviceDesc.Streams[0], c.cc, "/tracer.MetricCollector/Process", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricCollectorProcessClient{stream}
	return x, nil
}

type MetricCollector_ProcessClient interface {
	Send(*Metric) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type metricCollectorProcessClient struct {
	grpc.ClientStream
}

func (x *metricCollectorProcessClient) Send(m *Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricCollectorProcessClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MetricCollector service

type MetricCollectorServer interface {
	Process(MetricCollector_ProcessServer) error
}

func RegisterMetricCollectorServer(s *grpc.Server, srv MetricCollectorServer) {
	s.RegisterService(&_MetricCollector_serviceDesc, srv)
}

func _MetricCollector_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricCollectorServer).Process(&metricCollectorProcessServer{stream})
}

type MetricCollector_ProcessServer interface {
	SendAndClose(*Empty) error
	Recv() (*Metric, error)
	grpc.ServerStream
}

type metricCollectorProcessServer struct {
	grpc.ServerStream
}

func (x *metricCollectorProcessServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricCollectorProcessServer) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MetricCollector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tracer.MetricCollector",
	HandlerType: (*MetricCollectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _MetricCollector_Process_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "event_structs.proto",
}

func init() { proto.RegisterFile("event_structs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5f, 0x6f, 0xd3, 0x3e,
	0x14, 0xfd, 0xb5, 0x69, 0xbb, 0xe5, 0xa6, 0xd9, 0x6f, 0x64, 0x43, 0x32, 0x63, 0x48, 0x53, 0xc4,
	0x43, 0x1f, 0xd0, 0x1e, 0xc6, 0xc3, 0xc4, 0xa4, 0x09, 0xa4, 0x32, 0x5e, 0x60, 0x6c, 0xb2, 0x90,
	0xf8, 0xf3, 0x82, 0xb2, 0xc4, 0xd9, 0xa2, 0x35, 0x71, 0xe4, 0x38, 0x4c, 0x3c, 0xf3, 0xd9, 0xf8,
	0x5e, 0xc8, 0x76, 0x63, 0x3b, 0xc3, 0x45, 0x15, 0xbc, 0xd9, 0xd1, 0x39, 0xe7, 0x9e, 0x7b, 0xeb,
	0x73, 0x0b, 0x3b, 0xe4, 0x1b, 0xa9, 0xf8, 0xd7, 0x86, 0xb3, 0x36, 0xe5, 0xcd, 0x61, 0xcd, 0x28,
	0xa7, 0xd1, 0x84, 0xb3, 0x24, 0x25, 0x2c, 0xbe, 0x85, 0x9d, 0x4b, 0xf1, 0xe1, 0xaa, 0xcd, 0xe7,
	0xb4, 0x2c, 0x69, 0x75, 0x26, 0xc0, 0xd1, 0x3e, 0xf8, 0x1f, 0x8a, 0x92, 0x34, 0x3c, 0x29, 0x6b,
	0x34, 0x38, 0x18, 0xcc, 0x46, 0xd8, 0xe7, 0xdd, 0x87, 0x68, 0x1b, 0xbc, 0xcb, 0x22, 0x43, 0xc3,
	0x83, 0xc1, 0xcc, 0xc3, 0x5e, 0x5d, 0x64, 0xe2, 0x0b, 0x26, 0x1c, 0x79, 0xea, 0x0b, 0x23, 0x3c,
	0x8a, 0x60, 0xf4, 0x3e, 0x29, 0x09, 0x1a, 0x1d, 0x0c, 0x66, 0x3e, 0x1e, 0x55, 0x49, 0x49, 0xe2,
	0xd7, 0x10, 0xe9, 0x62, 0x37, 0x25, 0xcd, 0x54, 0xad, 0x3d, 0xd8, 0xcc, 0x8b, 0x05, 0x11, 0x08,
	0x59, 0x6a, 0x8a, 0xf5, 0x5d, 0xa8, 0x94, 0x34, 0x23, 0xb2, 0xd4, 0x08, 0xcb, 0x73, 0xfc, 0xc5,
	0x56, 0xa1, 0x77, 0xd5, 0x5a, 0x2a, 0x6d, 0x43, 0x98, 0x54, 0x09, 0xb1, 0x3c, 0x47, 0xbb, 0x30,
	0xbe, 0x66, 0xb4, 0xad, 0xa5, 0xe7, 0x10, 0xab, 0x4b, 0xfc, 0xd4, 0xd2, 0x5e, 0xd0, 0x86, 0x28,
	0xed, 0x2d, 0x18, 0xe6, 0xd9, 0x72, 0x0c, 0xc3, 0x3c, 0x8b, 0x5f, 0x98, 0xa1, 0xbd, 0x49, 0x4d,
	0x23, 0xf7, 0x60, 0x4e, 0xf3, 0x9f, 0xe1, 0x61, 0x9f, 0x9a, 0x70, 0x45, 0xde, 0x06, 0x2f, 0x5b,
	0xb2, 0x3d, 0x2c, 0x8e, 0xbd, 0x8e, 0x86, 0x2b, 0xe6, 0xe2, 0x59, 0xd2, 0x17, 0x3d, 0x57, 0x7a,
	0x30, 0x0e, 0x57, 0x6b, 0x0e, 0xe3, 0xc7, 0xa0, 0x67, 0x96, 0xde, 0x55, 0x7f, 0x6d, 0x56, 0x56,
	0xf4, 0x5c, 0x15, 0x47, 0x56, 0x45, 0x81, 0xcc, 0x17, 0xc9, 0x35, 0x1a, 0x4b, 0x61, 0x79, 0xb6,
	0x1f, 0xcd, 0xf9, 0x6d, 0x56, 0x30, 0xfd, 0x73, 0xd7, 0x09, 0xbf, 0xb1, 0x7f, 0xee, 0xee, 0xee,
	0x9c, 0xfb, 0x27, 0xd8, 0xed, 0xa9, 0xfc, 0xb1, 0x13, 0xad, 0x3c, 0x5c, 0xa1, 0xec, 0xf5, 0x7e,
	0xd1, 0x07, 0x9d, 0xf2, 0x45, 0x4d, 0xd6, 0x78, 0x8d, 0xbb, 0x30, 0x16, 0x8d, 0x35, 0xcb, 0xfc,
	0xa8, 0x8b, 0x53, 0xfa, 0xad, 0x91, 0xc6, 0x24, 0x59, 0xf1, 0xca, 0xb6, 0xc1, 0xbb, 0x6a, 0xf3,
	0xa5, 0x55, 0x71, 0x14, 0x05, 0x52, 0xda, 0x56, 0x5d, 0x1c, 0xd5, 0x25, 0x7e, 0x67, 0xe6, 0xf8,
	0x91, 0x15, 0x9c, 0xfc, 0x9b, 0xda, 0x06, 0x8c, 0xcf, 0xca, 0x9a, 0x7f, 0x8f, 0x7f, 0x4e, 0x60,
	0x72, 0x4e, 0x38, 0x2b, 0x52, 0x81, 0x9c, 0x4b, 0xa4, 0x92, 0x53, 0xc8, 0xe8, 0x14, 0x02, 0x6b,
	0xb3, 0x48, 0xe5, 0xe0, 0xe8, 0xf1, 0xa1, 0xda, 0x3f, 0x87, 0x8e, 0xe5, 0x83, 0x83, 0xd4, 0xda,
	0x44, 0x27, 0x00, 0x66, 0x57, 0x48, 0x0f, 0xc1, 0xd1, 0xde, 0x6f, 0x6c, 0x8d, 0xc0, 0x60, 0x05,
	0x52, 0x72, 0xbb, 0x20, 0xc8, 0x97, 0xe6, 0xe4, 0x76, 0x08, 0xc1, 0xd5, 0xb1, 0x11, 0x5c, 0xbd,
	0x01, 0xe4, 0x83, 0x74, 0x71, 0x35, 0x02, 0x43, 0x6a, 0xf6, 0xc5, 0x29, 0x04, 0xd6, 0x5e, 0x40,
	0x13, 0x77, 0xcb, 0x16, 0x04, 0x07, 0xb9, 0x65, 0x7b, 0x0e, 0x61, 0x6f, 0x37, 0xa0, 0x0d, 0x29,
	0xf0, 0xc4, 0x2d, 0xb0, 0x04, 0xe1, 0x30, 0xef, 0xed, 0x13, 0xe5, 0x41, 0x37, 0xbf, 0xb9, 0xd2,
	0x83, 0xee, 0x5e, 0x78, 0xd0, 0xed, 0x2b, 0x0f, 0x26, 0xf2, 0xc8, 0x5f, 0xe9, 0xc1, 0x80, 0xa4,
	0x07, 0x6b, 0x4d, 0x9c, 0x00, 0x98, 0xc8, 0x22, 0x70, 0xcf, 0xd0, 0x20, 0x30, 0x94, 0x26, 0xe0,
	0xaf, 0x60, 0x6a, 0x07, 0x15, 0x05, 0x92, 0xbd, 0xef, 0x64, 0x77, 0xe5, 0xa7, 0xa5, 0x1d, 0xed,
	0x63, 0xf0, 0x75, 0x20, 0xd1, 0x54, 0xd2, 0x1f, 0xdd, 0xa7, 0x6b, 0x00, 0xf6, 0xa9, 0x0e, 0xef,
	0x31, 0xf8, 0x3a, 0x6e, 0x28, 0x74, 0x13, 0x35, 0x00, 0xfb, 0x4c, 0x47, 0xf3, 0x04, 0xc0, 0x44,
	0x0b, 0x6d, 0xb9, 0xfb, 0x35, 0x08, 0x0c, 0x77, 0xfa, 0x7c, 0xf4, 0x12, 0xfe, 0x57, 0x31, 0x9a,
	0xd3, 0xc5, 0x82, 0xa4, 0x9c, 0xb2, 0xe8, 0x19, 0x6c, 0x5c, 0x32, 0x9a, 0x92, 0xa6, 0x89, 0xb6,
	0x3a, 0x15, 0x85, 0xd9, 0x0b, 0xbb, 0xbb, 0x0a, 0xe1, 0x7f, 0xb3, 0xc1, 0xd5, 0x44, 0xfe, 0xb1,
	0x3f, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x1d, 0x13, 0x97, 0xef, 0x07, 0x00, 0x00,
}
